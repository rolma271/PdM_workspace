
Ej2_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ffc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080031ac  080031ac  000131ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003278  08003278  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003278  08003278  00013278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003280  08003280  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003280  08003280  00013280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003284  08003284  00013284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000001b4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000228  20000228  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008938  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000192a  00000000  00000000  00028a1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007c8  00000000  00000000  0002a350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005d9  00000000  00000000  0002ab18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025efe  00000000  00000000  0002b0f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000ae35  00000000  00000000  00050fef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e3369  00000000  00000000  0005be24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002544  00000000  00000000  0013f190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  001416d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003194 	.word	0x08003194

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08003194 	.word	0x08003194

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08a      	sub	sp, #40	; 0x28
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d10e      	bne.n	80005ba <BSP_LED_Init+0x2e>
 800059c:	2300      	movs	r3, #0
 800059e:	613b      	str	r3, [r7, #16]
 80005a0:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <BSP_LED_Init+0x94>)
 80005a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a4:	4a1e      	ldr	r2, [pc, #120]	; (8000620 <BSP_LED_Init+0x94>)
 80005a6:	f043 0302 	orr.w	r3, r3, #2
 80005aa:	6313      	str	r3, [r2, #48]	; 0x30
 80005ac:	4b1c      	ldr	r3, [pc, #112]	; (8000620 <BSP_LED_Init+0x94>)
 80005ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b0:	f003 0302 	and.w	r3, r3, #2
 80005b4:	613b      	str	r3, [r7, #16]
 80005b6:	693b      	ldr	r3, [r7, #16]
 80005b8:	e00d      	b.n	80005d6 <BSP_LED_Init+0x4a>
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	4b18      	ldr	r3, [pc, #96]	; (8000620 <BSP_LED_Init+0x94>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a17      	ldr	r2, [pc, #92]	; (8000620 <BSP_LED_Init+0x94>)
 80005c4:	f043 0302 	orr.w	r3, r3, #2
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b15      	ldr	r3, [pc, #84]	; (8000620 <BSP_LED_Init+0x94>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0302 	and.w	r3, r3, #2
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	4a12      	ldr	r2, [pc, #72]	; (8000624 <BSP_LED_Init+0x98>)
 80005da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e0:	2301      	movs	r3, #1
 80005e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80005e8:	2302      	movs	r3, #2
 80005ea:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <BSP_LED_Init+0x9c>)
 80005f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f4:	f107 0214 	add.w	r2, r7, #20
 80005f8:	4611      	mov	r1, r2
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fac8 	bl	8000b90 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	4a09      	ldr	r2, [pc, #36]	; (8000628 <BSP_LED_Init+0x9c>)
 8000604:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	4a06      	ldr	r2, [pc, #24]	; (8000624 <BSP_LED_Init+0x98>)
 800060c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000610:	2200      	movs	r2, #0
 8000612:	4619      	mov	r1, r3
 8000614:	f000 fc68 	bl	8000ee8 <HAL_GPIO_WritePin>
}
 8000618:	bf00      	nop
 800061a:	3728      	adds	r7, #40	; 0x28
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	08003224 	.word	0x08003224
 8000628:	20000000 	.word	0x20000000

0800062c <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	4a07      	ldr	r2, [pc, #28]	; (8000658 <BSP_LED_On+0x2c>)
 800063a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	4a06      	ldr	r2, [pc, #24]	; (800065c <BSP_LED_On+0x30>)
 8000642:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000646:	2201      	movs	r2, #1
 8000648:	4619      	mov	r1, r3
 800064a:	f000 fc4d 	bl	8000ee8 <HAL_GPIO_WritePin>
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000000 	.word	0x20000000
 800065c:	08003224 	.word	0x08003224

08000660 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	4a07      	ldr	r2, [pc, #28]	; (800068c <BSP_LED_Toggle+0x2c>)
 800066e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	4906      	ldr	r1, [pc, #24]	; (8000690 <BSP_LED_Toggle+0x30>)
 8000676:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800067a:	4619      	mov	r1, r3
 800067c:	4610      	mov	r0, r2
 800067e:	f000 fc4c 	bl	8000f1a <HAL_GPIO_TogglePin>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000000 	.word	0x20000000
 8000690:	08003224 	.word	0x08003224

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <SystemInit+0x60>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a15      	ldr	r2, [pc, #84]	; (80006f4 <SystemInit+0x60>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80006a8:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x64>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <SystemInit+0x64>)
 80006ae:	f043 0301 	orr.w	r3, r3, #1
 80006b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006b4:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <SystemInit+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x64>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a0e      	ldr	r2, [pc, #56]	; (80006f8 <SystemInit+0x64>)
 80006c0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80006c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006c8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <SystemInit+0x64>)
 80006cc:	4a0b      	ldr	r2, [pc, #44]	; (80006fc <SystemInit+0x68>)
 80006ce:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <SystemInit+0x64>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a08      	ldr	r2, [pc, #32]	; (80006f8 <SystemInit+0x64>)
 80006d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <SystemInit+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006e2:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <SystemInit+0x60>)
 80006e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006e8:	609a      	str	r2, [r3, #8]
#endif
}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	e000ed00 	.word	0xe000ed00
 80006f8:	40023800 	.word	0x40023800
 80006fc:	24003010 	.word	0x24003010

08000700 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr

0800070e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000712:	e7fe      	b.n	8000712 <HardFault_Handler+0x4>

08000714 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000718:	e7fe      	b.n	8000718 <MemManage_Handler+0x4>

0800071a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800071e:	e7fe      	b.n	800071e <BusFault_Handler+0x4>

08000720 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000724:	e7fe      	b.n	8000724 <UsageFault_Handler+0x4>

08000726 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr

08000742 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
}
 8000746:	bf00      	nop
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000754:	f000 f8f2 	bl	800093c <HAL_IncTick>
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}

0800075c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
 800076c:	e00a      	b.n	8000784 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800076e:	f3af 8000 	nop.w
 8000772:	4601      	mov	r1, r0
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	1c5a      	adds	r2, r3, #1
 8000778:	60ba      	str	r2, [r7, #8]
 800077a:	b2ca      	uxtb	r2, r1
 800077c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	3301      	adds	r3, #1
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	697a      	ldr	r2, [r7, #20]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	429a      	cmp	r2, r3
 800078a:	dbf0      	blt.n	800076e <_read+0x12>
	}

return len;
 800078c:	687b      	ldr	r3, [r7, #4]
}
 800078e:	4618      	mov	r0, r3
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b086      	sub	sp, #24
 800079a:	af00      	add	r7, sp, #0
 800079c:	60f8      	str	r0, [r7, #12]
 800079e:	60b9      	str	r1, [r7, #8]
 80007a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
 80007a6:	e009      	b.n	80007bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	1c5a      	adds	r2, r3, #1
 80007ac:	60ba      	str	r2, [r7, #8]
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 fd13 	bl	80021dc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	3301      	adds	r3, #1
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	697a      	ldr	r2, [r7, #20]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	dbf1      	blt.n	80007a8 <_write+0x12>
	}
	return len;
 80007c4:	687b      	ldr	r3, [r7, #4]
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <_close>:

int _close(int file)
{
 80007ce:	b480      	push	{r7}
 80007d0:	b083      	sub	sp, #12
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
	return -1;
 80007d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007da:	4618      	mov	r0, r3
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007e6:	b480      	push	{r7}
 80007e8:	b083      	sub	sp, #12
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
 80007ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007f6:	605a      	str	r2, [r3, #4]
	return 0;
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr

08000806 <_isatty>:

int _isatty(int file)
{
 8000806:	b480      	push	{r7}
 8000808:	b083      	sub	sp, #12
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
	return 1;
 800080e:	2301      	movs	r3, #1
}
 8000810:	4618      	mov	r0, r3
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
	return 0;
 8000828:	2300      	movs	r3, #0
}
 800082a:	4618      	mov	r0, r3
 800082c:	3714      	adds	r7, #20
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
	...

08000838 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000840:	4a14      	ldr	r2, [pc, #80]	; (8000894 <_sbrk+0x5c>)
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <_sbrk+0x60>)
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <_sbrk+0x64>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d102      	bne.n	800085a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <_sbrk+0x64>)
 8000856:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <_sbrk+0x68>)
 8000858:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <_sbrk+0x64>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4413      	add	r3, r2
 8000862:	693a      	ldr	r2, [r7, #16]
 8000864:	429a      	cmp	r2, r3
 8000866:	d207      	bcs.n	8000878 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000868:	f001 fec2 	bl	80025f0 <__errno>
 800086c:	4603      	mov	r3, r0
 800086e:	220c      	movs	r2, #12
 8000870:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000876:	e009      	b.n	800088c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <_sbrk+0x64>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800087e:	4b07      	ldr	r3, [pc, #28]	; (800089c <_sbrk+0x64>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4413      	add	r3, r2
 8000886:	4a05      	ldr	r2, [pc, #20]	; (800089c <_sbrk+0x64>)
 8000888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800088a:	68fb      	ldr	r3, [r7, #12]
}
 800088c:	4618      	mov	r0, r3
 800088e:	3718      	adds	r7, #24
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20030000 	.word	0x20030000
 8000898:	00000400 	.word	0x00000400
 800089c:	20000090 	.word	0x20000090
 80008a0:	20000228 	.word	0x20000228

080008a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008a8:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <HAL_Init+0x34>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a0a      	ldr	r2, [pc, #40]	; (80008d8 <HAL_Init+0x34>)
 80008ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008b2:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b4:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <HAL_Init+0x34>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a07      	ldr	r2, [pc, #28]	; (80008d8 <HAL_Init+0x34>)
 80008ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c0:	2003      	movs	r0, #3
 80008c2:	f000 f931 	bl	8000b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008c6:	200f      	movs	r0, #15
 80008c8:	f000 f808 	bl	80008dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008cc:	f000 fb92 	bl	8000ff4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d0:	2300      	movs	r3, #0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023c00 	.word	0x40023c00

080008dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <HAL_InitTick+0x54>)
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <HAL_InitTick+0x58>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	4619      	mov	r1, r3
 80008ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 f93b 	bl	8000b76 <HAL_SYSTICK_Config>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
 8000908:	e00e      	b.n	8000928 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2b0f      	cmp	r3, #15
 800090e:	d80a      	bhi.n	8000926 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000910:	2200      	movs	r2, #0
 8000912:	6879      	ldr	r1, [r7, #4]
 8000914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000918:	f000 f911 	bl	8000b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800091c:	4a06      	ldr	r2, [pc, #24]	; (8000938 <HAL_InitTick+0x5c>)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000922:	2300      	movs	r3, #0
 8000924:	e000      	b.n	8000928 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000926:	2301      	movs	r3, #1
}
 8000928:	4618      	mov	r0, r3
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	2000000c 	.word	0x2000000c
 8000934:	20000014 	.word	0x20000014
 8000938:	20000010 	.word	0x20000010

0800093c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_IncTick+0x20>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	461a      	mov	r2, r3
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_IncTick+0x24>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4413      	add	r3, r2
 800094c:	4a04      	ldr	r2, [pc, #16]	; (8000960 <HAL_IncTick+0x24>)
 800094e:	6013      	str	r3, [r2, #0]
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	20000014 	.word	0x20000014
 8000960:	20000094 	.word	0x20000094

08000964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  return uwTick;
 8000968:	4b03      	ldr	r3, [pc, #12]	; (8000978 <HAL_GetTick+0x14>)
 800096a:	681b      	ldr	r3, [r3, #0]
}
 800096c:	4618      	mov	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	20000094 	.word	0x20000094

0800097c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000984:	f7ff ffee 	bl	8000964 <HAL_GetTick>
 8000988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000994:	d005      	beq.n	80009a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000996:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <HAL_Delay+0x44>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	461a      	mov	r2, r3
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	4413      	add	r3, r2
 80009a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009a2:	bf00      	nop
 80009a4:	f7ff ffde 	bl	8000964 <HAL_GetTick>
 80009a8:	4602      	mov	r2, r0
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	68fa      	ldr	r2, [r7, #12]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d8f7      	bhi.n	80009a4 <HAL_Delay+0x28>
  {
  }
}
 80009b4:	bf00      	nop
 80009b6:	bf00      	nop
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000014 	.word	0x20000014

080009c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f003 0307 	and.w	r3, r3, #7
 80009d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <__NVIC_SetPriorityGrouping+0x44>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009e0:	4013      	ands	r3, r2
 80009e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009f6:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <__NVIC_SetPriorityGrouping+0x44>)
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	60d3      	str	r3, [r2, #12]
}
 80009fc:	bf00      	nop
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a10:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <__NVIC_GetPriorityGrouping+0x18>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	0a1b      	lsrs	r3, r3, #8
 8000a16:	f003 0307 	and.w	r3, r3, #7
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	6039      	str	r1, [r7, #0]
 8000a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	db0a      	blt.n	8000a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	490c      	ldr	r1, [pc, #48]	; (8000a74 <__NVIC_SetPriority+0x4c>)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	0112      	lsls	r2, r2, #4
 8000a48:	b2d2      	uxtb	r2, r2
 8000a4a:	440b      	add	r3, r1
 8000a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a50:	e00a      	b.n	8000a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	4908      	ldr	r1, [pc, #32]	; (8000a78 <__NVIC_SetPriority+0x50>)
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	f003 030f 	and.w	r3, r3, #15
 8000a5e:	3b04      	subs	r3, #4
 8000a60:	0112      	lsls	r2, r2, #4
 8000a62:	b2d2      	uxtb	r2, r2
 8000a64:	440b      	add	r3, r1
 8000a66:	761a      	strb	r2, [r3, #24]
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	e000e100 	.word	0xe000e100
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b089      	sub	sp, #36	; 0x24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	f1c3 0307 	rsb	r3, r3, #7
 8000a96:	2b04      	cmp	r3, #4
 8000a98:	bf28      	it	cs
 8000a9a:	2304      	movcs	r3, #4
 8000a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	2b06      	cmp	r3, #6
 8000aa4:	d902      	bls.n	8000aac <NVIC_EncodePriority+0x30>
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3b03      	subs	r3, #3
 8000aaa:	e000      	b.n	8000aae <NVIC_EncodePriority+0x32>
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	43da      	mvns	r2, r3
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	401a      	ands	r2, r3
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ace:	43d9      	mvns	r1, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad4:	4313      	orrs	r3, r2
         );
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3724      	adds	r7, #36	; 0x24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
	...

08000ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000af4:	d301      	bcc.n	8000afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af6:	2301      	movs	r3, #1
 8000af8:	e00f      	b.n	8000b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000afa:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <SysTick_Config+0x40>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b02:	210f      	movs	r1, #15
 8000b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b08:	f7ff ff8e 	bl	8000a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <SysTick_Config+0x40>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b12:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <SysTick_Config+0x40>)
 8000b14:	2207      	movs	r2, #7
 8000b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	e000e010 	.word	0xe000e010

08000b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff ff47 	bl	80009c4 <__NVIC_SetPriorityGrouping>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b086      	sub	sp, #24
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	4603      	mov	r3, r0
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
 8000b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b50:	f7ff ff5c 	bl	8000a0c <__NVIC_GetPriorityGrouping>
 8000b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	6978      	ldr	r0, [r7, #20]
 8000b5c:	f7ff ff8e 	bl	8000a7c <NVIC_EncodePriority>
 8000b60:	4602      	mov	r2, r0
 8000b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b66:	4611      	mov	r1, r2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff5d 	bl	8000a28 <__NVIC_SetPriority>
}
 8000b6e:	bf00      	nop
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff ffb0 	bl	8000ae4 <SysTick_Config>
 8000b84:	4603      	mov	r3, r0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b089      	sub	sp, #36	; 0x24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
 8000baa:	e177      	b.n	8000e9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bac:	2201      	movs	r2, #1
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	697a      	ldr	r2, [r7, #20]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	f040 8166 	bne.w	8000e96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f003 0303 	and.w	r3, r3, #3
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d005      	beq.n	8000be2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d130      	bne.n	8000c44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	2203      	movs	r2, #3
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	68da      	ldr	r2, [r3, #12]
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	69ba      	ldr	r2, [r7, #24]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	69ba      	ldr	r2, [r7, #24]
 8000c10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c18:	2201      	movs	r2, #1
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	4013      	ands	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	091b      	lsrs	r3, r3, #4
 8000c2e:	f003 0201 	and.w	r2, r3, #1
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f003 0303 	and.w	r3, r3, #3
 8000c4c:	2b03      	cmp	r3, #3
 8000c4e:	d017      	beq.n	8000c80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	2203      	movs	r2, #3
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	43db      	mvns	r3, r3
 8000c62:	69ba      	ldr	r2, [r7, #24]
 8000c64:	4013      	ands	r3, r2
 8000c66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	689a      	ldr	r2, [r3, #8]
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 0303 	and.w	r3, r3, #3
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d123      	bne.n	8000cd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	08da      	lsrs	r2, r3, #3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3208      	adds	r2, #8
 8000c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	f003 0307 	and.w	r3, r3, #7
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	220f      	movs	r2, #15
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4013      	ands	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	691a      	ldr	r2, [r3, #16]
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	08da      	lsrs	r2, r3, #3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3208      	adds	r2, #8
 8000cce:	69b9      	ldr	r1, [r7, #24]
 8000cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	2203      	movs	r2, #3
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f003 0203 	and.w	r2, r3, #3
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	f000 80c0 	beq.w	8000e96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	4b66      	ldr	r3, [pc, #408]	; (8000eb4 <HAL_GPIO_Init+0x324>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	4a65      	ldr	r2, [pc, #404]	; (8000eb4 <HAL_GPIO_Init+0x324>)
 8000d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d24:	6453      	str	r3, [r2, #68]	; 0x44
 8000d26:	4b63      	ldr	r3, [pc, #396]	; (8000eb4 <HAL_GPIO_Init+0x324>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d32:	4a61      	ldr	r2, [pc, #388]	; (8000eb8 <HAL_GPIO_Init+0x328>)
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	089b      	lsrs	r3, r3, #2
 8000d38:	3302      	adds	r3, #2
 8000d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f003 0303 	and.w	r3, r3, #3
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	220f      	movs	r2, #15
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	4013      	ands	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a58      	ldr	r2, [pc, #352]	; (8000ebc <HAL_GPIO_Init+0x32c>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d037      	beq.n	8000dce <HAL_GPIO_Init+0x23e>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a57      	ldr	r2, [pc, #348]	; (8000ec0 <HAL_GPIO_Init+0x330>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d031      	beq.n	8000dca <HAL_GPIO_Init+0x23a>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a56      	ldr	r2, [pc, #344]	; (8000ec4 <HAL_GPIO_Init+0x334>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d02b      	beq.n	8000dc6 <HAL_GPIO_Init+0x236>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a55      	ldr	r2, [pc, #340]	; (8000ec8 <HAL_GPIO_Init+0x338>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d025      	beq.n	8000dc2 <HAL_GPIO_Init+0x232>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a54      	ldr	r2, [pc, #336]	; (8000ecc <HAL_GPIO_Init+0x33c>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d01f      	beq.n	8000dbe <HAL_GPIO_Init+0x22e>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a53      	ldr	r2, [pc, #332]	; (8000ed0 <HAL_GPIO_Init+0x340>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d019      	beq.n	8000dba <HAL_GPIO_Init+0x22a>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a52      	ldr	r2, [pc, #328]	; (8000ed4 <HAL_GPIO_Init+0x344>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d013      	beq.n	8000db6 <HAL_GPIO_Init+0x226>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a51      	ldr	r2, [pc, #324]	; (8000ed8 <HAL_GPIO_Init+0x348>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d00d      	beq.n	8000db2 <HAL_GPIO_Init+0x222>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a50      	ldr	r2, [pc, #320]	; (8000edc <HAL_GPIO_Init+0x34c>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d007      	beq.n	8000dae <HAL_GPIO_Init+0x21e>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a4f      	ldr	r2, [pc, #316]	; (8000ee0 <HAL_GPIO_Init+0x350>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d101      	bne.n	8000daa <HAL_GPIO_Init+0x21a>
 8000da6:	2309      	movs	r3, #9
 8000da8:	e012      	b.n	8000dd0 <HAL_GPIO_Init+0x240>
 8000daa:	230a      	movs	r3, #10
 8000dac:	e010      	b.n	8000dd0 <HAL_GPIO_Init+0x240>
 8000dae:	2308      	movs	r3, #8
 8000db0:	e00e      	b.n	8000dd0 <HAL_GPIO_Init+0x240>
 8000db2:	2307      	movs	r3, #7
 8000db4:	e00c      	b.n	8000dd0 <HAL_GPIO_Init+0x240>
 8000db6:	2306      	movs	r3, #6
 8000db8:	e00a      	b.n	8000dd0 <HAL_GPIO_Init+0x240>
 8000dba:	2305      	movs	r3, #5
 8000dbc:	e008      	b.n	8000dd0 <HAL_GPIO_Init+0x240>
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	e006      	b.n	8000dd0 <HAL_GPIO_Init+0x240>
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e004      	b.n	8000dd0 <HAL_GPIO_Init+0x240>
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	e002      	b.n	8000dd0 <HAL_GPIO_Init+0x240>
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e000      	b.n	8000dd0 <HAL_GPIO_Init+0x240>
 8000dce:	2300      	movs	r3, #0
 8000dd0:	69fa      	ldr	r2, [r7, #28]
 8000dd2:	f002 0203 	and.w	r2, r2, #3
 8000dd6:	0092      	lsls	r2, r2, #2
 8000dd8:	4093      	lsls	r3, r2
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000de0:	4935      	ldr	r1, [pc, #212]	; (8000eb8 <HAL_GPIO_Init+0x328>)
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	089b      	lsrs	r3, r3, #2
 8000de6:	3302      	adds	r3, #2
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dee:	4b3d      	ldr	r3, [pc, #244]	; (8000ee4 <HAL_GPIO_Init+0x354>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	43db      	mvns	r3, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d003      	beq.n	8000e12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e12:	4a34      	ldr	r2, [pc, #208]	; (8000ee4 <HAL_GPIO_Init+0x354>)
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e18:	4b32      	ldr	r3, [pc, #200]	; (8000ee4 <HAL_GPIO_Init+0x354>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	43db      	mvns	r3, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d003      	beq.n	8000e3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e3c:	4a29      	ldr	r2, [pc, #164]	; (8000ee4 <HAL_GPIO_Init+0x354>)
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e42:	4b28      	ldr	r3, [pc, #160]	; (8000ee4 <HAL_GPIO_Init+0x354>)
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d003      	beq.n	8000e66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e66:	4a1f      	ldr	r2, [pc, #124]	; (8000ee4 <HAL_GPIO_Init+0x354>)
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <HAL_GPIO_Init+0x354>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d003      	beq.n	8000e90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e90:	4a14      	ldr	r2, [pc, #80]	; (8000ee4 <HAL_GPIO_Init+0x354>)
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	61fb      	str	r3, [r7, #28]
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	2b0f      	cmp	r3, #15
 8000ea0:	f67f ae84 	bls.w	8000bac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ea4:	bf00      	nop
 8000ea6:	bf00      	nop
 8000ea8:	3724      	adds	r7, #36	; 0x24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40013800 	.word	0x40013800
 8000ebc:	40020000 	.word	0x40020000
 8000ec0:	40020400 	.word	0x40020400
 8000ec4:	40020800 	.word	0x40020800
 8000ec8:	40020c00 	.word	0x40020c00
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40021400 	.word	0x40021400
 8000ed4:	40021800 	.word	0x40021800
 8000ed8:	40021c00 	.word	0x40021c00
 8000edc:	40022000 	.word	0x40022000
 8000ee0:	40022400 	.word	0x40022400
 8000ee4:	40013c00 	.word	0x40013c00

08000ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	807b      	strh	r3, [r7, #2]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ef8:	787b      	ldrb	r3, [r7, #1]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000efe:	887a      	ldrh	r2, [r7, #2]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f04:	e003      	b.n	8000f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f06:	887b      	ldrh	r3, [r7, #2]
 8000f08:	041a      	lsls	r2, r3, #16
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	619a      	str	r2, [r3, #24]
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b085      	sub	sp, #20
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	460b      	mov	r3, r1
 8000f24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f2c:	887a      	ldrh	r2, [r7, #2]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	4013      	ands	r3, r2
 8000f32:	041a      	lsls	r2, r3, #16
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	43d9      	mvns	r1, r3
 8000f38:	887b      	ldrh	r3, [r7, #2]
 8000f3a:	400b      	ands	r3, r1
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	619a      	str	r2, [r3, #24]
}
 8000f42:	bf00      	nop
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	; 0x28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8000f58:	2300      	movs	r3, #0
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	4b23      	ldr	r3, [pc, #140]	; (8000fec <HAL_UART_MspInit+0x9c>)
 8000f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f60:	4a22      	ldr	r2, [pc, #136]	; (8000fec <HAL_UART_MspInit+0x9c>)
 8000f62:	f043 0308 	orr.w	r3, r3, #8
 8000f66:	6313      	str	r3, [r2, #48]	; 0x30
 8000f68:	4b20      	ldr	r3, [pc, #128]	; (8000fec <HAL_UART_MspInit+0x9c>)
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6c:	f003 0308 	and.w	r3, r3, #8
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8000f74:	2300      	movs	r3, #0
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <HAL_UART_MspInit+0x9c>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7c:	4a1b      	ldr	r2, [pc, #108]	; (8000fec <HAL_UART_MspInit+0x9c>)
 8000f7e:	f043 0308 	orr.w	r3, r3, #8
 8000f82:	6313      	str	r3, [r2, #48]	; 0x30
 8000f84:	4b19      	ldr	r3, [pc, #100]	; (8000fec <HAL_UART_MspInit+0x9c>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f88:	f003 0308 	and.w	r3, r3, #8
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8000f90:	2300      	movs	r3, #0
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	4b15      	ldr	r3, [pc, #84]	; (8000fec <HAL_UART_MspInit+0x9c>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	4a14      	ldr	r2, [pc, #80]	; (8000fec <HAL_UART_MspInit+0x9c>)
 8000f9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_UART_MspInit+0x9c>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8000fac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8000fbe:	2307      	movs	r3, #7
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4809      	ldr	r0, [pc, #36]	; (8000ff0 <HAL_UART_MspInit+0xa0>)
 8000fca:	f7ff fde1 	bl	8000b90 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8000fce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8000fd4:	2307      	movs	r3, #7
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <HAL_UART_MspInit+0xa0>)
 8000fe0:	f7ff fdd6 	bl	8000b90 <HAL_GPIO_Init>
}
 8000fe4:	bf00      	nop
 8000fe6:	3728      	adds	r7, #40	; 0x28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020c00 	.word	0x40020c00

08000ff4 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	603b      	str	r3, [r7, #0]
 8001012:	4b20      	ldr	r3, [pc, #128]	; (8001094 <HAL_PWREx_EnableOverDrive+0x90>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	4a1f      	ldr	r2, [pc, #124]	; (8001094 <HAL_PWREx_EnableOverDrive+0x90>)
 8001018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101c:	6413      	str	r3, [r2, #64]	; 0x40
 800101e:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <HAL_PWREx_EnableOverDrive+0x90>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800102a:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <HAL_PWREx_EnableOverDrive+0x94>)
 800102c:	2201      	movs	r2, #1
 800102e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001030:	f7ff fc98 	bl	8000964 <HAL_GetTick>
 8001034:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001036:	e009      	b.n	800104c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001038:	f7ff fc94 	bl	8000964 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001046:	d901      	bls.n	800104c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e01f      	b.n	800108c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800104c:	4b13      	ldr	r3, [pc, #76]	; (800109c <HAL_PWREx_EnableOverDrive+0x98>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001058:	d1ee      	bne.n	8001038 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800105a:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800105c:	2201      	movs	r2, #1
 800105e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001060:	f7ff fc80 	bl	8000964 <HAL_GetTick>
 8001064:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001066:	e009      	b.n	800107c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001068:	f7ff fc7c 	bl	8000964 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001076:	d901      	bls.n	800107c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e007      	b.n	800108c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800107c:	4b07      	ldr	r3, [pc, #28]	; (800109c <HAL_PWREx_EnableOverDrive+0x98>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001084:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001088:	d1ee      	bne.n	8001068 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40023800 	.word	0x40023800
 8001098:	420e0040 	.word	0x420e0040
 800109c:	40007000 	.word	0x40007000
 80010a0:	420e0044 	.word	0x420e0044

080010a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e267      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d075      	beq.n	80011ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010c2:	4b88      	ldr	r3, [pc, #544]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 030c 	and.w	r3, r3, #12
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	d00c      	beq.n	80010e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ce:	4b85      	ldr	r3, [pc, #532]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010d6:	2b08      	cmp	r3, #8
 80010d8:	d112      	bne.n	8001100 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010da:	4b82      	ldr	r3, [pc, #520]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010e6:	d10b      	bne.n	8001100 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e8:	4b7e      	ldr	r3, [pc, #504]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d05b      	beq.n	80011ac <HAL_RCC_OscConfig+0x108>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d157      	bne.n	80011ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e242      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001108:	d106      	bne.n	8001118 <HAL_RCC_OscConfig+0x74>
 800110a:	4b76      	ldr	r3, [pc, #472]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a75      	ldr	r2, [pc, #468]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	e01d      	b.n	8001154 <HAL_RCC_OscConfig+0xb0>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001120:	d10c      	bne.n	800113c <HAL_RCC_OscConfig+0x98>
 8001122:	4b70      	ldr	r3, [pc, #448]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a6f      	ldr	r2, [pc, #444]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	4b6d      	ldr	r3, [pc, #436]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a6c      	ldr	r2, [pc, #432]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	e00b      	b.n	8001154 <HAL_RCC_OscConfig+0xb0>
 800113c:	4b69      	ldr	r3, [pc, #420]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a68      	ldr	r2, [pc, #416]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	4b66      	ldr	r3, [pc, #408]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a65      	ldr	r2, [pc, #404]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 800114e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d013      	beq.n	8001184 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115c:	f7ff fc02 	bl	8000964 <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001164:	f7ff fbfe 	bl	8000964 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b64      	cmp	r3, #100	; 0x64
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e207      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001176:	4b5b      	ldr	r3, [pc, #364]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d0f0      	beq.n	8001164 <HAL_RCC_OscConfig+0xc0>
 8001182:	e014      	b.n	80011ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001184:	f7ff fbee 	bl	8000964 <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800118c:	f7ff fbea 	bl	8000964 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b64      	cmp	r3, #100	; 0x64
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e1f3      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800119e:	4b51      	ldr	r3, [pc, #324]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1f0      	bne.n	800118c <HAL_RCC_OscConfig+0xe8>
 80011aa:	e000      	b.n	80011ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d063      	beq.n	8001282 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ba:	4b4a      	ldr	r3, [pc, #296]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 030c 	and.w	r3, r3, #12
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00b      	beq.n	80011de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011c6:	4b47      	ldr	r3, [pc, #284]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ce:	2b08      	cmp	r3, #8
 80011d0:	d11c      	bne.n	800120c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011d2:	4b44      	ldr	r3, [pc, #272]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d116      	bne.n	800120c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011de:	4b41      	ldr	r3, [pc, #260]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d005      	beq.n	80011f6 <HAL_RCC_OscConfig+0x152>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d001      	beq.n	80011f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e1c7      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f6:	4b3b      	ldr	r3, [pc, #236]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	4937      	ldr	r1, [pc, #220]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001206:	4313      	orrs	r3, r2
 8001208:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120a:	e03a      	b.n	8001282 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d020      	beq.n	8001256 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001214:	4b34      	ldr	r3, [pc, #208]	; (80012e8 <HAL_RCC_OscConfig+0x244>)
 8001216:	2201      	movs	r2, #1
 8001218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121a:	f7ff fba3 	bl	8000964 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001222:	f7ff fb9f 	bl	8000964 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e1a8      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001234:	4b2b      	ldr	r3, [pc, #172]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0f0      	beq.n	8001222 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001240:	4b28      	ldr	r3, [pc, #160]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	4925      	ldr	r1, [pc, #148]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001250:	4313      	orrs	r3, r2
 8001252:	600b      	str	r3, [r1, #0]
 8001254:	e015      	b.n	8001282 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001256:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <HAL_RCC_OscConfig+0x244>)
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125c:	f7ff fb82 	bl	8000964 <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001264:	f7ff fb7e 	bl	8000964 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e187      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001276:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1f0      	bne.n	8001264 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	2b00      	cmp	r3, #0
 800128c:	d036      	beq.n	80012fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d016      	beq.n	80012c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <HAL_RCC_OscConfig+0x248>)
 8001298:	2201      	movs	r2, #1
 800129a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800129c:	f7ff fb62 	bl	8000964 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012a4:	f7ff fb5e 	bl	8000964 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e167      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <HAL_RCC_OscConfig+0x240>)
 80012b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0f0      	beq.n	80012a4 <HAL_RCC_OscConfig+0x200>
 80012c2:	e01b      	b.n	80012fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <HAL_RCC_OscConfig+0x248>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ca:	f7ff fb4b 	bl	8000964 <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d0:	e00e      	b.n	80012f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012d2:	f7ff fb47 	bl	8000964 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d907      	bls.n	80012f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e150      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
 80012e4:	40023800 	.word	0x40023800
 80012e8:	42470000 	.word	0x42470000
 80012ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f0:	4b88      	ldr	r3, [pc, #544]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 80012f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1ea      	bne.n	80012d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 8097 	beq.w	8001438 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800130e:	4b81      	ldr	r3, [pc, #516]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d10f      	bne.n	800133a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	4b7d      	ldr	r3, [pc, #500]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	4a7c      	ldr	r2, [pc, #496]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 8001324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001328:	6413      	str	r3, [r2, #64]	; 0x40
 800132a:	4b7a      	ldr	r3, [pc, #488]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001336:	2301      	movs	r3, #1
 8001338:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133a:	4b77      	ldr	r3, [pc, #476]	; (8001518 <HAL_RCC_OscConfig+0x474>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001342:	2b00      	cmp	r3, #0
 8001344:	d118      	bne.n	8001378 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001346:	4b74      	ldr	r3, [pc, #464]	; (8001518 <HAL_RCC_OscConfig+0x474>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a73      	ldr	r2, [pc, #460]	; (8001518 <HAL_RCC_OscConfig+0x474>)
 800134c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001352:	f7ff fb07 	bl	8000964 <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800135a:	f7ff fb03 	bl	8000964 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e10c      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136c:	4b6a      	ldr	r3, [pc, #424]	; (8001518 <HAL_RCC_OscConfig+0x474>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0f0      	beq.n	800135a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d106      	bne.n	800138e <HAL_RCC_OscConfig+0x2ea>
 8001380:	4b64      	ldr	r3, [pc, #400]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 8001382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001384:	4a63      	ldr	r2, [pc, #396]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	6713      	str	r3, [r2, #112]	; 0x70
 800138c:	e01c      	b.n	80013c8 <HAL_RCC_OscConfig+0x324>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2b05      	cmp	r3, #5
 8001394:	d10c      	bne.n	80013b0 <HAL_RCC_OscConfig+0x30c>
 8001396:	4b5f      	ldr	r3, [pc, #380]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 8001398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800139a:	4a5e      	ldr	r2, [pc, #376]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	6713      	str	r3, [r2, #112]	; 0x70
 80013a2:	4b5c      	ldr	r3, [pc, #368]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 80013a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a6:	4a5b      	ldr	r2, [pc, #364]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6713      	str	r3, [r2, #112]	; 0x70
 80013ae:	e00b      	b.n	80013c8 <HAL_RCC_OscConfig+0x324>
 80013b0:	4b58      	ldr	r3, [pc, #352]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 80013b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b4:	4a57      	ldr	r2, [pc, #348]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 80013b6:	f023 0301 	bic.w	r3, r3, #1
 80013ba:	6713      	str	r3, [r2, #112]	; 0x70
 80013bc:	4b55      	ldr	r3, [pc, #340]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 80013be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c0:	4a54      	ldr	r2, [pc, #336]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 80013c2:	f023 0304 	bic.w	r3, r3, #4
 80013c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d015      	beq.n	80013fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d0:	f7ff fac8 	bl	8000964 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d6:	e00a      	b.n	80013ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013d8:	f7ff fac4 	bl	8000964 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e0cb      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ee:	4b49      	ldr	r3, [pc, #292]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 80013f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0ee      	beq.n	80013d8 <HAL_RCC_OscConfig+0x334>
 80013fa:	e014      	b.n	8001426 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fc:	f7ff fab2 	bl	8000964 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001402:	e00a      	b.n	800141a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001404:	f7ff faae 	bl	8000964 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001412:	4293      	cmp	r3, r2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e0b5      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800141a:	4b3e      	ldr	r3, [pc, #248]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 800141c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1ee      	bne.n	8001404 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001426:	7dfb      	ldrb	r3, [r7, #23]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d105      	bne.n	8001438 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800142c:	4b39      	ldr	r3, [pc, #228]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	4a38      	ldr	r2, [pc, #224]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 8001432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001436:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 80a1 	beq.w	8001584 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001442:	4b34      	ldr	r3, [pc, #208]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	2b08      	cmp	r3, #8
 800144c:	d05c      	beq.n	8001508 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	2b02      	cmp	r3, #2
 8001454:	d141      	bne.n	80014da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001456:	4b31      	ldr	r3, [pc, #196]	; (800151c <HAL_RCC_OscConfig+0x478>)
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff fa82 	bl	8000964 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001464:	f7ff fa7e 	bl	8000964 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e087      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001476:	4b27      	ldr	r3, [pc, #156]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69da      	ldr	r2, [r3, #28]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	431a      	orrs	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001490:	019b      	lsls	r3, r3, #6
 8001492:	431a      	orrs	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001498:	085b      	lsrs	r3, r3, #1
 800149a:	3b01      	subs	r3, #1
 800149c:	041b      	lsls	r3, r3, #16
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a4:	061b      	lsls	r3, r3, #24
 80014a6:	491b      	ldr	r1, [pc, #108]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014ac:	4b1b      	ldr	r3, [pc, #108]	; (800151c <HAL_RCC_OscConfig+0x478>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b2:	f7ff fa57 	bl	8000964 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ba:	f7ff fa53 	bl	8000964 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e05c      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x416>
 80014d8:	e054      	b.n	8001584 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <HAL_RCC_OscConfig+0x478>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e0:	f7ff fa40 	bl	8000964 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e8:	f7ff fa3c 	bl	8000964 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e045      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_RCC_OscConfig+0x470>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f0      	bne.n	80014e8 <HAL_RCC_OscConfig+0x444>
 8001506:	e03d      	b.n	8001584 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d107      	bne.n	8001520 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e038      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
 8001514:	40023800 	.word	0x40023800
 8001518:	40007000 	.word	0x40007000
 800151c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001520:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <HAL_RCC_OscConfig+0x4ec>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d028      	beq.n	8001580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001538:	429a      	cmp	r2, r3
 800153a:	d121      	bne.n	8001580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001546:	429a      	cmp	r2, r3
 8001548:	d11a      	bne.n	8001580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001550:	4013      	ands	r3, r2
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001556:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001558:	4293      	cmp	r3, r2
 800155a:	d111      	bne.n	8001580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001566:	085b      	lsrs	r3, r3, #1
 8001568:	3b01      	subs	r3, #1
 800156a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800156c:	429a      	cmp	r2, r3
 800156e:	d107      	bne.n	8001580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800157c:	429a      	cmp	r2, r3
 800157e:	d001      	beq.n	8001584 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e000      	b.n	8001586 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800

08001594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e0cc      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015a8:	4b68      	ldr	r3, [pc, #416]	; (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 030f 	and.w	r3, r3, #15
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d90c      	bls.n	80015d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b6:	4b65      	ldr	r3, [pc, #404]	; (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015be:	4b63      	ldr	r3, [pc, #396]	; (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d001      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e0b8      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d020      	beq.n	800161e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d005      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015e8:	4b59      	ldr	r3, [pc, #356]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	4a58      	ldr	r2, [pc, #352]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0308 	and.w	r3, r3, #8
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d005      	beq.n	800160c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001600:	4b53      	ldr	r3, [pc, #332]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	4a52      	ldr	r2, [pc, #328]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800160a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800160c:	4b50      	ldr	r3, [pc, #320]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	494d      	ldr	r1, [pc, #308]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 800161a:	4313      	orrs	r3, r2
 800161c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	d044      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d107      	bne.n	8001642 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001632:	4b47      	ldr	r3, [pc, #284]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d119      	bne.n	8001672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e07f      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d003      	beq.n	8001652 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800164e:	2b03      	cmp	r3, #3
 8001650:	d107      	bne.n	8001662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001652:	4b3f      	ldr	r3, [pc, #252]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d109      	bne.n	8001672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e06f      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001662:	4b3b      	ldr	r3, [pc, #236]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e067      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001672:	4b37      	ldr	r3, [pc, #220]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f023 0203 	bic.w	r2, r3, #3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	4934      	ldr	r1, [pc, #208]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	4313      	orrs	r3, r2
 8001682:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001684:	f7ff f96e 	bl	8000964 <HAL_GetTick>
 8001688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168a:	e00a      	b.n	80016a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800168c:	f7ff f96a 	bl	8000964 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	f241 3288 	movw	r2, #5000	; 0x1388
 800169a:	4293      	cmp	r3, r2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e04f      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a2:	4b2b      	ldr	r3, [pc, #172]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 020c 	and.w	r2, r3, #12
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d1eb      	bne.n	800168c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016b4:	4b25      	ldr	r3, [pc, #148]	; (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 030f 	and.w	r3, r3, #15
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d20c      	bcs.n	80016dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c2:	4b22      	ldr	r3, [pc, #136]	; (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ca:	4b20      	ldr	r3, [pc, #128]	; (800174c <HAL_RCC_ClockConfig+0x1b8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d001      	beq.n	80016dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e032      	b.n	8001742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d008      	beq.n	80016fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016e8:	4b19      	ldr	r3, [pc, #100]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	4916      	ldr	r1, [pc, #88]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d009      	beq.n	800171a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001706:	4b12      	ldr	r3, [pc, #72]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	490e      	ldr	r1, [pc, #56]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	4313      	orrs	r3, r2
 8001718:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800171a:	f000 f821 	bl	8001760 <HAL_RCC_GetSysClockFreq>
 800171e:	4602      	mov	r2, r0
 8001720:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	091b      	lsrs	r3, r3, #4
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	490a      	ldr	r1, [pc, #40]	; (8001754 <HAL_RCC_ClockConfig+0x1c0>)
 800172c:	5ccb      	ldrb	r3, [r1, r3]
 800172e:	fa22 f303 	lsr.w	r3, r2, r3
 8001732:	4a09      	ldr	r2, [pc, #36]	; (8001758 <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <HAL_RCC_ClockConfig+0x1c8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff f8ce 	bl	80008dc <HAL_InitTick>

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023c00 	.word	0x40023c00
 8001750:	40023800 	.word	0x40023800
 8001754:	0800322c 	.word	0x0800322c
 8001758:	2000000c 	.word	0x2000000c
 800175c:	20000010 	.word	0x20000010

08001760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001764:	b094      	sub	sp, #80	; 0x50
 8001766:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001768:	2300      	movs	r3, #0
 800176a:	647b      	str	r3, [r7, #68]	; 0x44
 800176c:	2300      	movs	r3, #0
 800176e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001770:	2300      	movs	r3, #0
 8001772:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001774:	2300      	movs	r3, #0
 8001776:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001778:	4b79      	ldr	r3, [pc, #484]	; (8001960 <HAL_RCC_GetSysClockFreq+0x200>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 030c 	and.w	r3, r3, #12
 8001780:	2b08      	cmp	r3, #8
 8001782:	d00d      	beq.n	80017a0 <HAL_RCC_GetSysClockFreq+0x40>
 8001784:	2b08      	cmp	r3, #8
 8001786:	f200 80e1 	bhi.w	800194c <HAL_RCC_GetSysClockFreq+0x1ec>
 800178a:	2b00      	cmp	r3, #0
 800178c:	d002      	beq.n	8001794 <HAL_RCC_GetSysClockFreq+0x34>
 800178e:	2b04      	cmp	r3, #4
 8001790:	d003      	beq.n	800179a <HAL_RCC_GetSysClockFreq+0x3a>
 8001792:	e0db      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001794:	4b73      	ldr	r3, [pc, #460]	; (8001964 <HAL_RCC_GetSysClockFreq+0x204>)
 8001796:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001798:	e0db      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800179a:	4b73      	ldr	r3, [pc, #460]	; (8001968 <HAL_RCC_GetSysClockFreq+0x208>)
 800179c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800179e:	e0d8      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017a0:	4b6f      	ldr	r3, [pc, #444]	; (8001960 <HAL_RCC_GetSysClockFreq+0x200>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017a8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017aa:	4b6d      	ldr	r3, [pc, #436]	; (8001960 <HAL_RCC_GetSysClockFreq+0x200>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d063      	beq.n	800187e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017b6:	4b6a      	ldr	r3, [pc, #424]	; (8001960 <HAL_RCC_GetSysClockFreq+0x200>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	099b      	lsrs	r3, r3, #6
 80017bc:	2200      	movs	r2, #0
 80017be:	63bb      	str	r3, [r7, #56]	; 0x38
 80017c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80017c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017c8:	633b      	str	r3, [r7, #48]	; 0x30
 80017ca:	2300      	movs	r3, #0
 80017cc:	637b      	str	r3, [r7, #52]	; 0x34
 80017ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80017d2:	4622      	mov	r2, r4
 80017d4:	462b      	mov	r3, r5
 80017d6:	f04f 0000 	mov.w	r0, #0
 80017da:	f04f 0100 	mov.w	r1, #0
 80017de:	0159      	lsls	r1, r3, #5
 80017e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017e4:	0150      	lsls	r0, r2, #5
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4621      	mov	r1, r4
 80017ec:	1a51      	subs	r1, r2, r1
 80017ee:	6139      	str	r1, [r7, #16]
 80017f0:	4629      	mov	r1, r5
 80017f2:	eb63 0301 	sbc.w	r3, r3, r1
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001804:	4659      	mov	r1, fp
 8001806:	018b      	lsls	r3, r1, #6
 8001808:	4651      	mov	r1, sl
 800180a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800180e:	4651      	mov	r1, sl
 8001810:	018a      	lsls	r2, r1, #6
 8001812:	4651      	mov	r1, sl
 8001814:	ebb2 0801 	subs.w	r8, r2, r1
 8001818:	4659      	mov	r1, fp
 800181a:	eb63 0901 	sbc.w	r9, r3, r1
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800182a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800182e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001832:	4690      	mov	r8, r2
 8001834:	4699      	mov	r9, r3
 8001836:	4623      	mov	r3, r4
 8001838:	eb18 0303 	adds.w	r3, r8, r3
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	462b      	mov	r3, r5
 8001840:	eb49 0303 	adc.w	r3, r9, r3
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001852:	4629      	mov	r1, r5
 8001854:	024b      	lsls	r3, r1, #9
 8001856:	4621      	mov	r1, r4
 8001858:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800185c:	4621      	mov	r1, r4
 800185e:	024a      	lsls	r2, r1, #9
 8001860:	4610      	mov	r0, r2
 8001862:	4619      	mov	r1, r3
 8001864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001866:	2200      	movs	r2, #0
 8001868:	62bb      	str	r3, [r7, #40]	; 0x28
 800186a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800186c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001870:	f7fe fd0e 	bl	8000290 <__aeabi_uldivmod>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4613      	mov	r3, r2
 800187a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800187c:	e058      	b.n	8001930 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800187e:	4b38      	ldr	r3, [pc, #224]	; (8001960 <HAL_RCC_GetSysClockFreq+0x200>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	099b      	lsrs	r3, r3, #6
 8001884:	2200      	movs	r2, #0
 8001886:	4618      	mov	r0, r3
 8001888:	4611      	mov	r1, r2
 800188a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800188e:	623b      	str	r3, [r7, #32]
 8001890:	2300      	movs	r3, #0
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
 8001894:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001898:	4642      	mov	r2, r8
 800189a:	464b      	mov	r3, r9
 800189c:	f04f 0000 	mov.w	r0, #0
 80018a0:	f04f 0100 	mov.w	r1, #0
 80018a4:	0159      	lsls	r1, r3, #5
 80018a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018aa:	0150      	lsls	r0, r2, #5
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4641      	mov	r1, r8
 80018b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80018b6:	4649      	mov	r1, r9
 80018b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018d0:	ebb2 040a 	subs.w	r4, r2, sl
 80018d4:	eb63 050b 	sbc.w	r5, r3, fp
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	00eb      	lsls	r3, r5, #3
 80018e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018e6:	00e2      	lsls	r2, r4, #3
 80018e8:	4614      	mov	r4, r2
 80018ea:	461d      	mov	r5, r3
 80018ec:	4643      	mov	r3, r8
 80018ee:	18e3      	adds	r3, r4, r3
 80018f0:	603b      	str	r3, [r7, #0]
 80018f2:	464b      	mov	r3, r9
 80018f4:	eb45 0303 	adc.w	r3, r5, r3
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001906:	4629      	mov	r1, r5
 8001908:	028b      	lsls	r3, r1, #10
 800190a:	4621      	mov	r1, r4
 800190c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001910:	4621      	mov	r1, r4
 8001912:	028a      	lsls	r2, r1, #10
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800191a:	2200      	movs	r2, #0
 800191c:	61bb      	str	r3, [r7, #24]
 800191e:	61fa      	str	r2, [r7, #28]
 8001920:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001924:	f7fe fcb4 	bl	8000290 <__aeabi_uldivmod>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4613      	mov	r3, r2
 800192e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001930:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <HAL_RCC_GetSysClockFreq+0x200>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	0c1b      	lsrs	r3, r3, #16
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	3301      	adds	r3, #1
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001940:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001944:	fbb2 f3f3 	udiv	r3, r2, r3
 8001948:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800194a:	e002      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <HAL_RCC_GetSysClockFreq+0x204>)
 800194e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001950:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001954:	4618      	mov	r0, r3
 8001956:	3750      	adds	r7, #80	; 0x50
 8001958:	46bd      	mov	sp, r7
 800195a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	00f42400 	.word	0x00f42400
 8001968:	007a1200 	.word	0x007a1200

0800196c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <HAL_RCC_GetHCLKFreq+0x14>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	2000000c 	.word	0x2000000c

08001984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001988:	f7ff fff0 	bl	800196c <HAL_RCC_GetHCLKFreq>
 800198c:	4602      	mov	r2, r0
 800198e:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	0a9b      	lsrs	r3, r3, #10
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	4903      	ldr	r1, [pc, #12]	; (80019a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800199a:	5ccb      	ldrb	r3, [r1, r3]
 800199c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40023800 	.word	0x40023800
 80019a8:	0800323c 	.word	0x0800323c

080019ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019b0:	f7ff ffdc 	bl	800196c <HAL_RCC_GetHCLKFreq>
 80019b4:	4602      	mov	r2, r0
 80019b6:	4b05      	ldr	r3, [pc, #20]	; (80019cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	0b5b      	lsrs	r3, r3, #13
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	4903      	ldr	r1, [pc, #12]	; (80019d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019c2:	5ccb      	ldrb	r3, [r1, r3]
 80019c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40023800 	.word	0x40023800
 80019d0:	0800323c 	.word	0x0800323c

080019d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e03f      	b.n	8001a66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d106      	bne.n	8001a00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff faa8 	bl	8000f50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2224      	movs	r2, #36	; 0x24
 8001a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68da      	ldr	r2, [r3, #12]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 f929 	bl	8001c70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	691a      	ldr	r2, [r3, #16]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	695a      	ldr	r2, [r3, #20]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2220      	movs	r2, #32
 8001a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2220      	movs	r2, #32
 8001a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b08a      	sub	sp, #40	; 0x28
 8001a72:	af02      	add	r7, sp, #8
 8001a74:	60f8      	str	r0, [r7, #12]
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	603b      	str	r3, [r7, #0]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b20      	cmp	r3, #32
 8001a8c:	d17c      	bne.n	8001b88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d002      	beq.n	8001a9a <HAL_UART_Transmit+0x2c>
 8001a94:	88fb      	ldrh	r3, [r7, #6]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e075      	b.n	8001b8a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d101      	bne.n	8001aac <HAL_UART_Transmit+0x3e>
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	e06e      	b.n	8001b8a <HAL_UART_Transmit+0x11c>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2221      	movs	r2, #33	; 0x21
 8001abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ac2:	f7fe ff4f 	bl	8000964 <HAL_GetTick>
 8001ac6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	88fa      	ldrh	r2, [r7, #6]
 8001acc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	88fa      	ldrh	r2, [r7, #6]
 8001ad2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001adc:	d108      	bne.n	8001af0 <HAL_UART_Transmit+0x82>
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d104      	bne.n	8001af0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	61bb      	str	r3, [r7, #24]
 8001aee:	e003      	b.n	8001af8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001b00:	e02a      	b.n	8001b58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2180      	movs	r1, #128	; 0x80
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 f840 	bl	8001b92 <UART_WaitOnFlagUntilTimeout>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e036      	b.n	8001b8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10b      	bne.n	8001b3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	461a      	mov	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	3302      	adds	r3, #2
 8001b36:	61bb      	str	r3, [r7, #24]
 8001b38:	e007      	b.n	8001b4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	781a      	ldrb	r2, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	3301      	adds	r3, #1
 8001b48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1cf      	bne.n	8001b02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2140      	movs	r1, #64	; 0x40
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f000 f810 	bl	8001b92 <UART_WaitOnFlagUntilTimeout>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e006      	b.n	8001b8a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2220      	movs	r2, #32
 8001b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	e000      	b.n	8001b8a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001b88:	2302      	movs	r3, #2
  }
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3720      	adds	r7, #32
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b090      	sub	sp, #64	; 0x40
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	60f8      	str	r0, [r7, #12]
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	603b      	str	r3, [r7, #0]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ba2:	e050      	b.n	8001c46 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001baa:	d04c      	beq.n	8001c46 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d007      	beq.n	8001bc2 <UART_WaitOnFlagUntilTimeout+0x30>
 8001bb2:	f7fe fed7 	bl	8000964 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d241      	bcs.n	8001c46 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	330c      	adds	r3, #12
 8001bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bcc:	e853 3f00 	ldrex	r3, [r3]
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	330c      	adds	r3, #12
 8001be0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001be2:	637a      	str	r2, [r7, #52]	; 0x34
 8001be4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001be6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001be8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bea:	e841 2300 	strex	r3, r2, [r1]
 8001bee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1e5      	bne.n	8001bc2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	3314      	adds	r3, #20
 8001bfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	e853 3f00 	ldrex	r3, [r3]
 8001c04:	613b      	str	r3, [r7, #16]
   return(result);
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	f023 0301 	bic.w	r3, r3, #1
 8001c0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	3314      	adds	r3, #20
 8001c14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c16:	623a      	str	r2, [r7, #32]
 8001c18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c1a:	69f9      	ldr	r1, [r7, #28]
 8001c1c:	6a3a      	ldr	r2, [r7, #32]
 8001c1e:	e841 2300 	strex	r3, r2, [r1]
 8001c22:	61bb      	str	r3, [r7, #24]
   return(result);
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1e5      	bne.n	8001bf6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2220      	movs	r2, #32
 8001c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e00f      	b.n	8001c66 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	bf0c      	ite	eq
 8001c56:	2301      	moveq	r3, #1
 8001c58:	2300      	movne	r3, #0
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d09f      	beq.n	8001ba4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3740      	adds	r7, #64	; 0x40
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c74:	b0c0      	sub	sp, #256	; 0x100
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c8c:	68d9      	ldr	r1, [r3, #12]
 8001c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	ea40 0301 	orr.w	r3, r0, r1
 8001c98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001cc8:	f021 010c 	bic.w	r1, r1, #12
 8001ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001cd6:	430b      	orrs	r3, r1
 8001cd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cea:	6999      	ldr	r1, [r3, #24]
 8001cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	ea40 0301 	orr.w	r3, r0, r1
 8001cf6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	4b8f      	ldr	r3, [pc, #572]	; (8001f3c <UART_SetConfig+0x2cc>)
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d005      	beq.n	8001d10 <UART_SetConfig+0xa0>
 8001d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	4b8d      	ldr	r3, [pc, #564]	; (8001f40 <UART_SetConfig+0x2d0>)
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d104      	bne.n	8001d1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d10:	f7ff fe4c 	bl	80019ac <HAL_RCC_GetPCLK2Freq>
 8001d14:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001d18:	e003      	b.n	8001d22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d1a:	f7ff fe33 	bl	8001984 <HAL_RCC_GetPCLK1Freq>
 8001d1e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d2c:	f040 810c 	bne.w	8001f48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d34:	2200      	movs	r2, #0
 8001d36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001d3a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001d3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001d42:	4622      	mov	r2, r4
 8001d44:	462b      	mov	r3, r5
 8001d46:	1891      	adds	r1, r2, r2
 8001d48:	65b9      	str	r1, [r7, #88]	; 0x58
 8001d4a:	415b      	adcs	r3, r3
 8001d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001d52:	4621      	mov	r1, r4
 8001d54:	eb12 0801 	adds.w	r8, r2, r1
 8001d58:	4629      	mov	r1, r5
 8001d5a:	eb43 0901 	adc.w	r9, r3, r1
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	f04f 0300 	mov.w	r3, #0
 8001d66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d72:	4690      	mov	r8, r2
 8001d74:	4699      	mov	r9, r3
 8001d76:	4623      	mov	r3, r4
 8001d78:	eb18 0303 	adds.w	r3, r8, r3
 8001d7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001d80:	462b      	mov	r3, r5
 8001d82:	eb49 0303 	adc.w	r3, r9, r3
 8001d86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001d96:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001d9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001d9e:	460b      	mov	r3, r1
 8001da0:	18db      	adds	r3, r3, r3
 8001da2:	653b      	str	r3, [r7, #80]	; 0x50
 8001da4:	4613      	mov	r3, r2
 8001da6:	eb42 0303 	adc.w	r3, r2, r3
 8001daa:	657b      	str	r3, [r7, #84]	; 0x54
 8001dac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001db0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001db4:	f7fe fa6c 	bl	8000290 <__aeabi_uldivmod>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4b61      	ldr	r3, [pc, #388]	; (8001f44 <UART_SetConfig+0x2d4>)
 8001dbe:	fba3 2302 	umull	r2, r3, r3, r2
 8001dc2:	095b      	lsrs	r3, r3, #5
 8001dc4:	011c      	lsls	r4, r3, #4
 8001dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001dd0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001dd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001dd8:	4642      	mov	r2, r8
 8001dda:	464b      	mov	r3, r9
 8001ddc:	1891      	adds	r1, r2, r2
 8001dde:	64b9      	str	r1, [r7, #72]	; 0x48
 8001de0:	415b      	adcs	r3, r3
 8001de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001de4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001de8:	4641      	mov	r1, r8
 8001dea:	eb12 0a01 	adds.w	sl, r2, r1
 8001dee:	4649      	mov	r1, r9
 8001df0:	eb43 0b01 	adc.w	fp, r3, r1
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	f04f 0300 	mov.w	r3, #0
 8001dfc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e08:	4692      	mov	sl, r2
 8001e0a:	469b      	mov	fp, r3
 8001e0c:	4643      	mov	r3, r8
 8001e0e:	eb1a 0303 	adds.w	r3, sl, r3
 8001e12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001e16:	464b      	mov	r3, r9
 8001e18:	eb4b 0303 	adc.w	r3, fp, r3
 8001e1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001e2c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001e30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001e34:	460b      	mov	r3, r1
 8001e36:	18db      	adds	r3, r3, r3
 8001e38:	643b      	str	r3, [r7, #64]	; 0x40
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	eb42 0303 	adc.w	r3, r2, r3
 8001e40:	647b      	str	r3, [r7, #68]	; 0x44
 8001e42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001e4a:	f7fe fa21 	bl	8000290 <__aeabi_uldivmod>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4611      	mov	r1, r2
 8001e54:	4b3b      	ldr	r3, [pc, #236]	; (8001f44 <UART_SetConfig+0x2d4>)
 8001e56:	fba3 2301 	umull	r2, r3, r3, r1
 8001e5a:	095b      	lsrs	r3, r3, #5
 8001e5c:	2264      	movs	r2, #100	; 0x64
 8001e5e:	fb02 f303 	mul.w	r3, r2, r3
 8001e62:	1acb      	subs	r3, r1, r3
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001e6a:	4b36      	ldr	r3, [pc, #216]	; (8001f44 <UART_SetConfig+0x2d4>)
 8001e6c:	fba3 2302 	umull	r2, r3, r3, r2
 8001e70:	095b      	lsrs	r3, r3, #5
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e78:	441c      	add	r4, r3
 8001e7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001e84:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001e88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001e8c:	4642      	mov	r2, r8
 8001e8e:	464b      	mov	r3, r9
 8001e90:	1891      	adds	r1, r2, r2
 8001e92:	63b9      	str	r1, [r7, #56]	; 0x38
 8001e94:	415b      	adcs	r3, r3
 8001e96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e9c:	4641      	mov	r1, r8
 8001e9e:	1851      	adds	r1, r2, r1
 8001ea0:	6339      	str	r1, [r7, #48]	; 0x30
 8001ea2:	4649      	mov	r1, r9
 8001ea4:	414b      	adcs	r3, r1
 8001ea6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ea8:	f04f 0200 	mov.w	r2, #0
 8001eac:	f04f 0300 	mov.w	r3, #0
 8001eb0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001eb4:	4659      	mov	r1, fp
 8001eb6:	00cb      	lsls	r3, r1, #3
 8001eb8:	4651      	mov	r1, sl
 8001eba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ebe:	4651      	mov	r1, sl
 8001ec0:	00ca      	lsls	r2, r1, #3
 8001ec2:	4610      	mov	r0, r2
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	4642      	mov	r2, r8
 8001eca:	189b      	adds	r3, r3, r2
 8001ecc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001ed0:	464b      	mov	r3, r9
 8001ed2:	460a      	mov	r2, r1
 8001ed4:	eb42 0303 	adc.w	r3, r2, r3
 8001ed8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001ee8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001eec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	18db      	adds	r3, r3, r3
 8001ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	eb42 0303 	adc.w	r3, r2, r3
 8001efc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001efe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001f06:	f7fe f9c3 	bl	8000290 <__aeabi_uldivmod>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <UART_SetConfig+0x2d4>)
 8001f10:	fba3 1302 	umull	r1, r3, r3, r2
 8001f14:	095b      	lsrs	r3, r3, #5
 8001f16:	2164      	movs	r1, #100	; 0x64
 8001f18:	fb01 f303 	mul.w	r3, r1, r3
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	3332      	adds	r3, #50	; 0x32
 8001f22:	4a08      	ldr	r2, [pc, #32]	; (8001f44 <UART_SetConfig+0x2d4>)
 8001f24:	fba2 2303 	umull	r2, r3, r2, r3
 8001f28:	095b      	lsrs	r3, r3, #5
 8001f2a:	f003 0207 	and.w	r2, r3, #7
 8001f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4422      	add	r2, r4
 8001f36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001f38:	e106      	b.n	8002148 <UART_SetConfig+0x4d8>
 8001f3a:	bf00      	nop
 8001f3c:	40011000 	.word	0x40011000
 8001f40:	40011400 	.word	0x40011400
 8001f44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001f52:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001f56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001f5a:	4642      	mov	r2, r8
 8001f5c:	464b      	mov	r3, r9
 8001f5e:	1891      	adds	r1, r2, r2
 8001f60:	6239      	str	r1, [r7, #32]
 8001f62:	415b      	adcs	r3, r3
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
 8001f66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f6a:	4641      	mov	r1, r8
 8001f6c:	1854      	adds	r4, r2, r1
 8001f6e:	4649      	mov	r1, r9
 8001f70:	eb43 0501 	adc.w	r5, r3, r1
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	f04f 0300 	mov.w	r3, #0
 8001f7c:	00eb      	lsls	r3, r5, #3
 8001f7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f82:	00e2      	lsls	r2, r4, #3
 8001f84:	4614      	mov	r4, r2
 8001f86:	461d      	mov	r5, r3
 8001f88:	4643      	mov	r3, r8
 8001f8a:	18e3      	adds	r3, r4, r3
 8001f8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001f90:	464b      	mov	r3, r9
 8001f92:	eb45 0303 	adc.w	r3, r5, r3
 8001f96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001fa6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	f04f 0300 	mov.w	r3, #0
 8001fb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001fb6:	4629      	mov	r1, r5
 8001fb8:	008b      	lsls	r3, r1, #2
 8001fba:	4621      	mov	r1, r4
 8001fbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001fc0:	4621      	mov	r1, r4
 8001fc2:	008a      	lsls	r2, r1, #2
 8001fc4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001fc8:	f7fe f962 	bl	8000290 <__aeabi_uldivmod>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4b60      	ldr	r3, [pc, #384]	; (8002154 <UART_SetConfig+0x4e4>)
 8001fd2:	fba3 2302 	umull	r2, r3, r3, r2
 8001fd6:	095b      	lsrs	r3, r3, #5
 8001fd8:	011c      	lsls	r4, r3, #4
 8001fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001fe4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001fe8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001fec:	4642      	mov	r2, r8
 8001fee:	464b      	mov	r3, r9
 8001ff0:	1891      	adds	r1, r2, r2
 8001ff2:	61b9      	str	r1, [r7, #24]
 8001ff4:	415b      	adcs	r3, r3
 8001ff6:	61fb      	str	r3, [r7, #28]
 8001ff8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ffc:	4641      	mov	r1, r8
 8001ffe:	1851      	adds	r1, r2, r1
 8002000:	6139      	str	r1, [r7, #16]
 8002002:	4649      	mov	r1, r9
 8002004:	414b      	adcs	r3, r1
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002014:	4659      	mov	r1, fp
 8002016:	00cb      	lsls	r3, r1, #3
 8002018:	4651      	mov	r1, sl
 800201a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800201e:	4651      	mov	r1, sl
 8002020:	00ca      	lsls	r2, r1, #3
 8002022:	4610      	mov	r0, r2
 8002024:	4619      	mov	r1, r3
 8002026:	4603      	mov	r3, r0
 8002028:	4642      	mov	r2, r8
 800202a:	189b      	adds	r3, r3, r2
 800202c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002030:	464b      	mov	r3, r9
 8002032:	460a      	mov	r2, r1
 8002034:	eb42 0303 	adc.w	r3, r2, r3
 8002038:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800203c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	67bb      	str	r3, [r7, #120]	; 0x78
 8002046:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	f04f 0300 	mov.w	r3, #0
 8002050:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002054:	4649      	mov	r1, r9
 8002056:	008b      	lsls	r3, r1, #2
 8002058:	4641      	mov	r1, r8
 800205a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800205e:	4641      	mov	r1, r8
 8002060:	008a      	lsls	r2, r1, #2
 8002062:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002066:	f7fe f913 	bl	8000290 <__aeabi_uldivmod>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4611      	mov	r1, r2
 8002070:	4b38      	ldr	r3, [pc, #224]	; (8002154 <UART_SetConfig+0x4e4>)
 8002072:	fba3 2301 	umull	r2, r3, r3, r1
 8002076:	095b      	lsrs	r3, r3, #5
 8002078:	2264      	movs	r2, #100	; 0x64
 800207a:	fb02 f303 	mul.w	r3, r2, r3
 800207e:	1acb      	subs	r3, r1, r3
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	3332      	adds	r3, #50	; 0x32
 8002084:	4a33      	ldr	r2, [pc, #204]	; (8002154 <UART_SetConfig+0x4e4>)
 8002086:	fba2 2303 	umull	r2, r3, r2, r3
 800208a:	095b      	lsrs	r3, r3, #5
 800208c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002090:	441c      	add	r4, r3
 8002092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002096:	2200      	movs	r2, #0
 8002098:	673b      	str	r3, [r7, #112]	; 0x70
 800209a:	677a      	str	r2, [r7, #116]	; 0x74
 800209c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80020a0:	4642      	mov	r2, r8
 80020a2:	464b      	mov	r3, r9
 80020a4:	1891      	adds	r1, r2, r2
 80020a6:	60b9      	str	r1, [r7, #8]
 80020a8:	415b      	adcs	r3, r3
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020b0:	4641      	mov	r1, r8
 80020b2:	1851      	adds	r1, r2, r1
 80020b4:	6039      	str	r1, [r7, #0]
 80020b6:	4649      	mov	r1, r9
 80020b8:	414b      	adcs	r3, r1
 80020ba:	607b      	str	r3, [r7, #4]
 80020bc:	f04f 0200 	mov.w	r2, #0
 80020c0:	f04f 0300 	mov.w	r3, #0
 80020c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80020c8:	4659      	mov	r1, fp
 80020ca:	00cb      	lsls	r3, r1, #3
 80020cc:	4651      	mov	r1, sl
 80020ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020d2:	4651      	mov	r1, sl
 80020d4:	00ca      	lsls	r2, r1, #3
 80020d6:	4610      	mov	r0, r2
 80020d8:	4619      	mov	r1, r3
 80020da:	4603      	mov	r3, r0
 80020dc:	4642      	mov	r2, r8
 80020de:	189b      	adds	r3, r3, r2
 80020e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80020e2:	464b      	mov	r3, r9
 80020e4:	460a      	mov	r2, r1
 80020e6:	eb42 0303 	adc.w	r3, r2, r3
 80020ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80020ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	663b      	str	r3, [r7, #96]	; 0x60
 80020f6:	667a      	str	r2, [r7, #100]	; 0x64
 80020f8:	f04f 0200 	mov.w	r2, #0
 80020fc:	f04f 0300 	mov.w	r3, #0
 8002100:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002104:	4649      	mov	r1, r9
 8002106:	008b      	lsls	r3, r1, #2
 8002108:	4641      	mov	r1, r8
 800210a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800210e:	4641      	mov	r1, r8
 8002110:	008a      	lsls	r2, r1, #2
 8002112:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002116:	f7fe f8bb 	bl	8000290 <__aeabi_uldivmod>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4b0d      	ldr	r3, [pc, #52]	; (8002154 <UART_SetConfig+0x4e4>)
 8002120:	fba3 1302 	umull	r1, r3, r3, r2
 8002124:	095b      	lsrs	r3, r3, #5
 8002126:	2164      	movs	r1, #100	; 0x64
 8002128:	fb01 f303 	mul.w	r3, r1, r3
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	011b      	lsls	r3, r3, #4
 8002130:	3332      	adds	r3, #50	; 0x32
 8002132:	4a08      	ldr	r2, [pc, #32]	; (8002154 <UART_SetConfig+0x4e4>)
 8002134:	fba2 2303 	umull	r2, r3, r2, r3
 8002138:	095b      	lsrs	r3, r3, #5
 800213a:	f003 020f 	and.w	r2, r3, #15
 800213e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4422      	add	r2, r4
 8002146:	609a      	str	r2, [r3, #8]
}
 8002148:	bf00      	nop
 800214a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800214e:	46bd      	mov	sp, r7
 8002150:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002154:	51eb851f 	.word	0x51eb851f

08002158 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 800215c:	f7fe fba2 	bl	80008a4 <HAL_Init>

  /* Configure the system clock to 180 MHz */
  SystemClock_Config();
 8002160:	f000 f84e 	bl	8002200 <SystemClock_Config>

  /* Initialize BSP Led for LED2 and LED3*/
  BSP_LED_Init(LED2);
 8002164:	2001      	movs	r0, #1
 8002166:	f7fe fa11 	bl	800058c <BSP_LED_Init>
  BSP_LED_Init(LED3);
 800216a:	2002      	movs	r0, #2
 800216c:	f7fe fa0e 	bl	800058c <BSP_LED_Init>
	                  BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
      - Stop Bit    = One Stop bit
      - Parity      = ODD parity
      - BaudRate    = 9600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTx;
 8002170:	4b16      	ldr	r3, [pc, #88]	; (80021cc <main+0x74>)
 8002172:	4a17      	ldr	r2, [pc, #92]	; (80021d0 <main+0x78>)
 8002174:	601a      	str	r2, [r3, #0]

  UartHandle.Init.BaudRate   = 9600;
 8002176:	4b15      	ldr	r3, [pc, #84]	; (80021cc <main+0x74>)
 8002178:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800217c:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800217e:	4b13      	ldr	r3, [pc, #76]	; (80021cc <main+0x74>)
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8002184:	4b11      	ldr	r3, [pc, #68]	; (80021cc <main+0x74>)
 8002186:	2200      	movs	r2, #0
 8002188:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 800218a:	4b10      	ldr	r3, [pc, #64]	; (80021cc <main+0x74>)
 800218c:	2200      	movs	r2, #0
 800218e:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8002190:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <main+0x74>)
 8002192:	2200      	movs	r2, #0
 8002194:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8002196:	4b0d      	ldr	r3, [pc, #52]	; (80021cc <main+0x74>)
 8002198:	220c      	movs	r2, #12
 800219a:	615a      	str	r2, [r3, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <main+0x74>)
 800219e:	2200      	movs	r2, #0
 80021a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 80021a2:	480a      	ldr	r0, [pc, #40]	; (80021cc <main+0x74>)
 80021a4:	f7ff fc16 	bl	80019d4 <HAL_UART_Init>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <main+0x5a>
  {
    /* Initialization Error */
    Error_Handler();
 80021ae:	f000 f889 	bl	80022c4 <Error_Handler>
  }

  /* Output a message on Hyperterminal using printf function */
  printf("\n\r UART Printf Example: retarget the C library printf function to the UART\n\r");
 80021b2:	4808      	ldr	r0, [pc, #32]	; (80021d4 <main+0x7c>)
 80021b4:	f000 f978 	bl	80024a8 <iprintf>
  printf("** Test finished successfully. ** \n\r");
 80021b8:	4807      	ldr	r0, [pc, #28]	; (80021d8 <main+0x80>)
 80021ba:	f000 f975 	bl	80024a8 <iprintf>

  /* Infinite loop */
  while (1)
  {
	  BSP_LED_Toggle(LED3);
 80021be:	2002      	movs	r0, #2
 80021c0:	f7fe fa4e 	bl	8000660 <BSP_LED_Toggle>
	  HAL_Delay(100);
 80021c4:	2064      	movs	r0, #100	; 0x64
 80021c6:	f7fe fbd9 	bl	800097c <HAL_Delay>
	  BSP_LED_Toggle(LED3);
 80021ca:	e7f8      	b.n	80021be <main+0x66>
 80021cc:	20000098 	.word	0x20000098
 80021d0:	40004800 	.word	0x40004800
 80021d4:	080031ac 	.word	0x080031ac
 80021d8:	080031fc 	.word	0x080031fc

080021dc <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
 80021e4:	1d39      	adds	r1, r7, #4
 80021e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021ea:	2201      	movs	r2, #1
 80021ec:	4803      	ldr	r0, [pc, #12]	; (80021fc <__io_putchar+0x20>)
 80021ee:	f7ff fc3e 	bl	8001a6e <HAL_UART_Transmit>

  return ch;
 80021f2:	687b      	ldr	r3, [r7, #4]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000098 	.word	0x20000098

08002200 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b094      	sub	sp, #80	; 0x50
 8002204:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	4b2c      	ldr	r3, [pc, #176]	; (80022bc <SystemClock_Config+0xbc>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	4a2b      	ldr	r2, [pc, #172]	; (80022bc <SystemClock_Config+0xbc>)
 8002210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002214:	6413      	str	r3, [r2, #64]	; 0x40
 8002216:	4b29      	ldr	r3, [pc, #164]	; (80022bc <SystemClock_Config+0xbc>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002222:	2300      	movs	r3, #0
 8002224:	607b      	str	r3, [r7, #4]
 8002226:	4b26      	ldr	r3, [pc, #152]	; (80022c0 <SystemClock_Config+0xc0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a25      	ldr	r2, [pc, #148]	; (80022c0 <SystemClock_Config+0xc0>)
 800222c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	4b23      	ldr	r3, [pc, #140]	; (80022c0 <SystemClock_Config+0xc0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800223a:	607b      	str	r3, [r7, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800223e:	2301      	movs	r3, #1
 8002240:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002242:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002246:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002248:	2302      	movs	r3, #2
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800224c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002250:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002252:	2308      	movs	r3, #8
 8002254:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8002256:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800225a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800225c:	2302      	movs	r3, #2
 800225e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002260:	2307      	movs	r3, #7
 8002262:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002264:	f107 030c 	add.w	r3, r7, #12
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe ff1b 	bl	80010a4 <HAL_RCC_OscConfig>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 8002274:	f000 f826 	bl	80022c4 <Error_Handler>
  }
  
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002278:	f7fe fec4 	bl	8001004 <HAL_PWREx_EnableOverDrive>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 8002282:	f000 f81f 	bl	80022c4 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002286:	230f      	movs	r3, #15
 8002288:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800228a:	2302      	movs	r3, #2
 800228c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800228e:	2300      	movs	r3, #0
 8002290:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8002292:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002296:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8002298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800229c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800229e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022a2:	2105      	movs	r1, #5
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff f975 	bl	8001594 <HAL_RCC_ClockConfig>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <SystemClock_Config+0xb4>
  {
    /* Initialization Error */
    Error_Handler();
 80022b0:	f000 f808 	bl	80022c4 <Error_Handler>
  }
}
 80022b4:	bf00      	nop
 80022b6:	3750      	adds	r7, #80	; 0x50
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40007000 	.word	0x40007000

080022c4 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 80022c8:	2001      	movs	r0, #1
 80022ca:	f7fe f9af 	bl	800062c <BSP_LED_On>
  while (1)
 80022ce:	e7fe      	b.n	80022ce <Error_Handler+0xa>

080022d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80022d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002308 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80022d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80022d6:	e003      	b.n	80022e0 <LoopCopyDataInit>

080022d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80022d8:	4b0c      	ldr	r3, [pc, #48]	; (800230c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80022da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80022dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80022de:	3104      	adds	r1, #4

080022e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80022e0:	480b      	ldr	r0, [pc, #44]	; (8002310 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80022e2:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80022e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80022e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80022e8:	d3f6      	bcc.n	80022d8 <CopyDataInit>
  ldr  r2, =_sbss
 80022ea:	4a0b      	ldr	r2, [pc, #44]	; (8002318 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80022ec:	e002      	b.n	80022f4 <LoopFillZerobss>

080022ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80022ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80022f0:	f842 3b04 	str.w	r3, [r2], #4

080022f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80022f4:	4b09      	ldr	r3, [pc, #36]	; (800231c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80022f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80022f8:	d3f9      	bcc.n	80022ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022fa:	f7fe f9cb 	bl	8000694 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022fe:	f000 f97d 	bl	80025fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002302:	f7ff ff29 	bl	8002158 <main>
  bx  lr    
 8002306:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002308:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800230c:	08003288 	.word	0x08003288
  ldr  r0, =_sdata
 8002310:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002314:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8002318:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 800231c:	20000228 	.word	0x20000228

08002320 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002320:	e7fe      	b.n	8002320 <ADC_IRQHandler>
	...

08002324 <std>:
 8002324:	2300      	movs	r3, #0
 8002326:	b510      	push	{r4, lr}
 8002328:	4604      	mov	r4, r0
 800232a:	e9c0 3300 	strd	r3, r3, [r0]
 800232e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002332:	6083      	str	r3, [r0, #8]
 8002334:	8181      	strh	r1, [r0, #12]
 8002336:	6643      	str	r3, [r0, #100]	; 0x64
 8002338:	81c2      	strh	r2, [r0, #14]
 800233a:	6183      	str	r3, [r0, #24]
 800233c:	4619      	mov	r1, r3
 800233e:	2208      	movs	r2, #8
 8002340:	305c      	adds	r0, #92	; 0x5c
 8002342:	f000 f906 	bl	8002552 <memset>
 8002346:	4b0d      	ldr	r3, [pc, #52]	; (800237c <std+0x58>)
 8002348:	6263      	str	r3, [r4, #36]	; 0x24
 800234a:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <std+0x5c>)
 800234c:	62a3      	str	r3, [r4, #40]	; 0x28
 800234e:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <std+0x60>)
 8002350:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002352:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <std+0x64>)
 8002354:	6323      	str	r3, [r4, #48]	; 0x30
 8002356:	4b0d      	ldr	r3, [pc, #52]	; (800238c <std+0x68>)
 8002358:	6224      	str	r4, [r4, #32]
 800235a:	429c      	cmp	r4, r3
 800235c:	d006      	beq.n	800236c <std+0x48>
 800235e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002362:	4294      	cmp	r4, r2
 8002364:	d002      	beq.n	800236c <std+0x48>
 8002366:	33d0      	adds	r3, #208	; 0xd0
 8002368:	429c      	cmp	r4, r3
 800236a:	d105      	bne.n	8002378 <std+0x54>
 800236c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002374:	f000 b966 	b.w	8002644 <__retarget_lock_init_recursive>
 8002378:	bd10      	pop	{r4, pc}
 800237a:	bf00      	nop
 800237c:	080024cd 	.word	0x080024cd
 8002380:	080024ef 	.word	0x080024ef
 8002384:	08002527 	.word	0x08002527
 8002388:	0800254b 	.word	0x0800254b
 800238c:	200000dc 	.word	0x200000dc

08002390 <stdio_exit_handler>:
 8002390:	4a02      	ldr	r2, [pc, #8]	; (800239c <stdio_exit_handler+0xc>)
 8002392:	4903      	ldr	r1, [pc, #12]	; (80023a0 <stdio_exit_handler+0x10>)
 8002394:	4803      	ldr	r0, [pc, #12]	; (80023a4 <stdio_exit_handler+0x14>)
 8002396:	f000 b869 	b.w	800246c <_fwalk_sglue>
 800239a:	bf00      	nop
 800239c:	20000018 	.word	0x20000018
 80023a0:	08002ef1 	.word	0x08002ef1
 80023a4:	20000024 	.word	0x20000024

080023a8 <cleanup_stdio>:
 80023a8:	6841      	ldr	r1, [r0, #4]
 80023aa:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <cleanup_stdio+0x34>)
 80023ac:	4299      	cmp	r1, r3
 80023ae:	b510      	push	{r4, lr}
 80023b0:	4604      	mov	r4, r0
 80023b2:	d001      	beq.n	80023b8 <cleanup_stdio+0x10>
 80023b4:	f000 fd9c 	bl	8002ef0 <_fflush_r>
 80023b8:	68a1      	ldr	r1, [r4, #8]
 80023ba:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <cleanup_stdio+0x38>)
 80023bc:	4299      	cmp	r1, r3
 80023be:	d002      	beq.n	80023c6 <cleanup_stdio+0x1e>
 80023c0:	4620      	mov	r0, r4
 80023c2:	f000 fd95 	bl	8002ef0 <_fflush_r>
 80023c6:	68e1      	ldr	r1, [r4, #12]
 80023c8:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <cleanup_stdio+0x3c>)
 80023ca:	4299      	cmp	r1, r3
 80023cc:	d004      	beq.n	80023d8 <cleanup_stdio+0x30>
 80023ce:	4620      	mov	r0, r4
 80023d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023d4:	f000 bd8c 	b.w	8002ef0 <_fflush_r>
 80023d8:	bd10      	pop	{r4, pc}
 80023da:	bf00      	nop
 80023dc:	200000dc 	.word	0x200000dc
 80023e0:	20000144 	.word	0x20000144
 80023e4:	200001ac 	.word	0x200001ac

080023e8 <global_stdio_init.part.0>:
 80023e8:	b510      	push	{r4, lr}
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <global_stdio_init.part.0+0x30>)
 80023ec:	4c0b      	ldr	r4, [pc, #44]	; (800241c <global_stdio_init.part.0+0x34>)
 80023ee:	4a0c      	ldr	r2, [pc, #48]	; (8002420 <global_stdio_init.part.0+0x38>)
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	4620      	mov	r0, r4
 80023f4:	2200      	movs	r2, #0
 80023f6:	2104      	movs	r1, #4
 80023f8:	f7ff ff94 	bl	8002324 <std>
 80023fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002400:	2201      	movs	r2, #1
 8002402:	2109      	movs	r1, #9
 8002404:	f7ff ff8e 	bl	8002324 <std>
 8002408:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800240c:	2202      	movs	r2, #2
 800240e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002412:	2112      	movs	r1, #18
 8002414:	f7ff bf86 	b.w	8002324 <std>
 8002418:	20000214 	.word	0x20000214
 800241c:	200000dc 	.word	0x200000dc
 8002420:	08002391 	.word	0x08002391

08002424 <__sfp_lock_acquire>:
 8002424:	4801      	ldr	r0, [pc, #4]	; (800242c <__sfp_lock_acquire+0x8>)
 8002426:	f000 b90e 	b.w	8002646 <__retarget_lock_acquire_recursive>
 800242a:	bf00      	nop
 800242c:	2000021d 	.word	0x2000021d

08002430 <__sfp_lock_release>:
 8002430:	4801      	ldr	r0, [pc, #4]	; (8002438 <__sfp_lock_release+0x8>)
 8002432:	f000 b909 	b.w	8002648 <__retarget_lock_release_recursive>
 8002436:	bf00      	nop
 8002438:	2000021d 	.word	0x2000021d

0800243c <__sinit>:
 800243c:	b510      	push	{r4, lr}
 800243e:	4604      	mov	r4, r0
 8002440:	f7ff fff0 	bl	8002424 <__sfp_lock_acquire>
 8002444:	6a23      	ldr	r3, [r4, #32]
 8002446:	b11b      	cbz	r3, 8002450 <__sinit+0x14>
 8002448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800244c:	f7ff bff0 	b.w	8002430 <__sfp_lock_release>
 8002450:	4b04      	ldr	r3, [pc, #16]	; (8002464 <__sinit+0x28>)
 8002452:	6223      	str	r3, [r4, #32]
 8002454:	4b04      	ldr	r3, [pc, #16]	; (8002468 <__sinit+0x2c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1f5      	bne.n	8002448 <__sinit+0xc>
 800245c:	f7ff ffc4 	bl	80023e8 <global_stdio_init.part.0>
 8002460:	e7f2      	b.n	8002448 <__sinit+0xc>
 8002462:	bf00      	nop
 8002464:	080023a9 	.word	0x080023a9
 8002468:	20000214 	.word	0x20000214

0800246c <_fwalk_sglue>:
 800246c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002470:	4607      	mov	r7, r0
 8002472:	4688      	mov	r8, r1
 8002474:	4614      	mov	r4, r2
 8002476:	2600      	movs	r6, #0
 8002478:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800247c:	f1b9 0901 	subs.w	r9, r9, #1
 8002480:	d505      	bpl.n	800248e <_fwalk_sglue+0x22>
 8002482:	6824      	ldr	r4, [r4, #0]
 8002484:	2c00      	cmp	r4, #0
 8002486:	d1f7      	bne.n	8002478 <_fwalk_sglue+0xc>
 8002488:	4630      	mov	r0, r6
 800248a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800248e:	89ab      	ldrh	r3, [r5, #12]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d907      	bls.n	80024a4 <_fwalk_sglue+0x38>
 8002494:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002498:	3301      	adds	r3, #1
 800249a:	d003      	beq.n	80024a4 <_fwalk_sglue+0x38>
 800249c:	4629      	mov	r1, r5
 800249e:	4638      	mov	r0, r7
 80024a0:	47c0      	blx	r8
 80024a2:	4306      	orrs	r6, r0
 80024a4:	3568      	adds	r5, #104	; 0x68
 80024a6:	e7e9      	b.n	800247c <_fwalk_sglue+0x10>

080024a8 <iprintf>:
 80024a8:	b40f      	push	{r0, r1, r2, r3}
 80024aa:	b507      	push	{r0, r1, r2, lr}
 80024ac:	4906      	ldr	r1, [pc, #24]	; (80024c8 <iprintf+0x20>)
 80024ae:	ab04      	add	r3, sp, #16
 80024b0:	6808      	ldr	r0, [r1, #0]
 80024b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80024b6:	6881      	ldr	r1, [r0, #8]
 80024b8:	9301      	str	r3, [sp, #4]
 80024ba:	f000 f9e9 	bl	8002890 <_vfiprintf_r>
 80024be:	b003      	add	sp, #12
 80024c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80024c4:	b004      	add	sp, #16
 80024c6:	4770      	bx	lr
 80024c8:	20000070 	.word	0x20000070

080024cc <__sread>:
 80024cc:	b510      	push	{r4, lr}
 80024ce:	460c      	mov	r4, r1
 80024d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024d4:	f000 f868 	bl	80025a8 <_read_r>
 80024d8:	2800      	cmp	r0, #0
 80024da:	bfab      	itete	ge
 80024dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80024de:	89a3      	ldrhlt	r3, [r4, #12]
 80024e0:	181b      	addge	r3, r3, r0
 80024e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80024e6:	bfac      	ite	ge
 80024e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80024ea:	81a3      	strhlt	r3, [r4, #12]
 80024ec:	bd10      	pop	{r4, pc}

080024ee <__swrite>:
 80024ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024f2:	461f      	mov	r7, r3
 80024f4:	898b      	ldrh	r3, [r1, #12]
 80024f6:	05db      	lsls	r3, r3, #23
 80024f8:	4605      	mov	r5, r0
 80024fa:	460c      	mov	r4, r1
 80024fc:	4616      	mov	r6, r2
 80024fe:	d505      	bpl.n	800250c <__swrite+0x1e>
 8002500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002504:	2302      	movs	r3, #2
 8002506:	2200      	movs	r2, #0
 8002508:	f000 f83c 	bl	8002584 <_lseek_r>
 800250c:	89a3      	ldrh	r3, [r4, #12]
 800250e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002512:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002516:	81a3      	strh	r3, [r4, #12]
 8002518:	4632      	mov	r2, r6
 800251a:	463b      	mov	r3, r7
 800251c:	4628      	mov	r0, r5
 800251e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002522:	f000 b853 	b.w	80025cc <_write_r>

08002526 <__sseek>:
 8002526:	b510      	push	{r4, lr}
 8002528:	460c      	mov	r4, r1
 800252a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800252e:	f000 f829 	bl	8002584 <_lseek_r>
 8002532:	1c43      	adds	r3, r0, #1
 8002534:	89a3      	ldrh	r3, [r4, #12]
 8002536:	bf15      	itete	ne
 8002538:	6560      	strne	r0, [r4, #84]	; 0x54
 800253a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800253e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002542:	81a3      	strheq	r3, [r4, #12]
 8002544:	bf18      	it	ne
 8002546:	81a3      	strhne	r3, [r4, #12]
 8002548:	bd10      	pop	{r4, pc}

0800254a <__sclose>:
 800254a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800254e:	f000 b809 	b.w	8002564 <_close_r>

08002552 <memset>:
 8002552:	4402      	add	r2, r0
 8002554:	4603      	mov	r3, r0
 8002556:	4293      	cmp	r3, r2
 8002558:	d100      	bne.n	800255c <memset+0xa>
 800255a:	4770      	bx	lr
 800255c:	f803 1b01 	strb.w	r1, [r3], #1
 8002560:	e7f9      	b.n	8002556 <memset+0x4>
	...

08002564 <_close_r>:
 8002564:	b538      	push	{r3, r4, r5, lr}
 8002566:	4d06      	ldr	r5, [pc, #24]	; (8002580 <_close_r+0x1c>)
 8002568:	2300      	movs	r3, #0
 800256a:	4604      	mov	r4, r0
 800256c:	4608      	mov	r0, r1
 800256e:	602b      	str	r3, [r5, #0]
 8002570:	f7fe f92d 	bl	80007ce <_close>
 8002574:	1c43      	adds	r3, r0, #1
 8002576:	d102      	bne.n	800257e <_close_r+0x1a>
 8002578:	682b      	ldr	r3, [r5, #0]
 800257a:	b103      	cbz	r3, 800257e <_close_r+0x1a>
 800257c:	6023      	str	r3, [r4, #0]
 800257e:	bd38      	pop	{r3, r4, r5, pc}
 8002580:	20000218 	.word	0x20000218

08002584 <_lseek_r>:
 8002584:	b538      	push	{r3, r4, r5, lr}
 8002586:	4d07      	ldr	r5, [pc, #28]	; (80025a4 <_lseek_r+0x20>)
 8002588:	4604      	mov	r4, r0
 800258a:	4608      	mov	r0, r1
 800258c:	4611      	mov	r1, r2
 800258e:	2200      	movs	r2, #0
 8002590:	602a      	str	r2, [r5, #0]
 8002592:	461a      	mov	r2, r3
 8002594:	f7fe f942 	bl	800081c <_lseek>
 8002598:	1c43      	adds	r3, r0, #1
 800259a:	d102      	bne.n	80025a2 <_lseek_r+0x1e>
 800259c:	682b      	ldr	r3, [r5, #0]
 800259e:	b103      	cbz	r3, 80025a2 <_lseek_r+0x1e>
 80025a0:	6023      	str	r3, [r4, #0]
 80025a2:	bd38      	pop	{r3, r4, r5, pc}
 80025a4:	20000218 	.word	0x20000218

080025a8 <_read_r>:
 80025a8:	b538      	push	{r3, r4, r5, lr}
 80025aa:	4d07      	ldr	r5, [pc, #28]	; (80025c8 <_read_r+0x20>)
 80025ac:	4604      	mov	r4, r0
 80025ae:	4608      	mov	r0, r1
 80025b0:	4611      	mov	r1, r2
 80025b2:	2200      	movs	r2, #0
 80025b4:	602a      	str	r2, [r5, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	f7fe f8d0 	bl	800075c <_read>
 80025bc:	1c43      	adds	r3, r0, #1
 80025be:	d102      	bne.n	80025c6 <_read_r+0x1e>
 80025c0:	682b      	ldr	r3, [r5, #0]
 80025c2:	b103      	cbz	r3, 80025c6 <_read_r+0x1e>
 80025c4:	6023      	str	r3, [r4, #0]
 80025c6:	bd38      	pop	{r3, r4, r5, pc}
 80025c8:	20000218 	.word	0x20000218

080025cc <_write_r>:
 80025cc:	b538      	push	{r3, r4, r5, lr}
 80025ce:	4d07      	ldr	r5, [pc, #28]	; (80025ec <_write_r+0x20>)
 80025d0:	4604      	mov	r4, r0
 80025d2:	4608      	mov	r0, r1
 80025d4:	4611      	mov	r1, r2
 80025d6:	2200      	movs	r2, #0
 80025d8:	602a      	str	r2, [r5, #0]
 80025da:	461a      	mov	r2, r3
 80025dc:	f7fe f8db 	bl	8000796 <_write>
 80025e0:	1c43      	adds	r3, r0, #1
 80025e2:	d102      	bne.n	80025ea <_write_r+0x1e>
 80025e4:	682b      	ldr	r3, [r5, #0]
 80025e6:	b103      	cbz	r3, 80025ea <_write_r+0x1e>
 80025e8:	6023      	str	r3, [r4, #0]
 80025ea:	bd38      	pop	{r3, r4, r5, pc}
 80025ec:	20000218 	.word	0x20000218

080025f0 <__errno>:
 80025f0:	4b01      	ldr	r3, [pc, #4]	; (80025f8 <__errno+0x8>)
 80025f2:	6818      	ldr	r0, [r3, #0]
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	20000070 	.word	0x20000070

080025fc <__libc_init_array>:
 80025fc:	b570      	push	{r4, r5, r6, lr}
 80025fe:	4d0d      	ldr	r5, [pc, #52]	; (8002634 <__libc_init_array+0x38>)
 8002600:	4c0d      	ldr	r4, [pc, #52]	; (8002638 <__libc_init_array+0x3c>)
 8002602:	1b64      	subs	r4, r4, r5
 8002604:	10a4      	asrs	r4, r4, #2
 8002606:	2600      	movs	r6, #0
 8002608:	42a6      	cmp	r6, r4
 800260a:	d109      	bne.n	8002620 <__libc_init_array+0x24>
 800260c:	4d0b      	ldr	r5, [pc, #44]	; (800263c <__libc_init_array+0x40>)
 800260e:	4c0c      	ldr	r4, [pc, #48]	; (8002640 <__libc_init_array+0x44>)
 8002610:	f000 fdc0 	bl	8003194 <_init>
 8002614:	1b64      	subs	r4, r4, r5
 8002616:	10a4      	asrs	r4, r4, #2
 8002618:	2600      	movs	r6, #0
 800261a:	42a6      	cmp	r6, r4
 800261c:	d105      	bne.n	800262a <__libc_init_array+0x2e>
 800261e:	bd70      	pop	{r4, r5, r6, pc}
 8002620:	f855 3b04 	ldr.w	r3, [r5], #4
 8002624:	4798      	blx	r3
 8002626:	3601      	adds	r6, #1
 8002628:	e7ee      	b.n	8002608 <__libc_init_array+0xc>
 800262a:	f855 3b04 	ldr.w	r3, [r5], #4
 800262e:	4798      	blx	r3
 8002630:	3601      	adds	r6, #1
 8002632:	e7f2      	b.n	800261a <__libc_init_array+0x1e>
 8002634:	08003280 	.word	0x08003280
 8002638:	08003280 	.word	0x08003280
 800263c:	08003280 	.word	0x08003280
 8002640:	08003284 	.word	0x08003284

08002644 <__retarget_lock_init_recursive>:
 8002644:	4770      	bx	lr

08002646 <__retarget_lock_acquire_recursive>:
 8002646:	4770      	bx	lr

08002648 <__retarget_lock_release_recursive>:
 8002648:	4770      	bx	lr
	...

0800264c <_free_r>:
 800264c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800264e:	2900      	cmp	r1, #0
 8002650:	d044      	beq.n	80026dc <_free_r+0x90>
 8002652:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002656:	9001      	str	r0, [sp, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	f1a1 0404 	sub.w	r4, r1, #4
 800265e:	bfb8      	it	lt
 8002660:	18e4      	addlt	r4, r4, r3
 8002662:	f000 f8df 	bl	8002824 <__malloc_lock>
 8002666:	4a1e      	ldr	r2, [pc, #120]	; (80026e0 <_free_r+0x94>)
 8002668:	9801      	ldr	r0, [sp, #4]
 800266a:	6813      	ldr	r3, [r2, #0]
 800266c:	b933      	cbnz	r3, 800267c <_free_r+0x30>
 800266e:	6063      	str	r3, [r4, #4]
 8002670:	6014      	str	r4, [r2, #0]
 8002672:	b003      	add	sp, #12
 8002674:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002678:	f000 b8da 	b.w	8002830 <__malloc_unlock>
 800267c:	42a3      	cmp	r3, r4
 800267e:	d908      	bls.n	8002692 <_free_r+0x46>
 8002680:	6825      	ldr	r5, [r4, #0]
 8002682:	1961      	adds	r1, r4, r5
 8002684:	428b      	cmp	r3, r1
 8002686:	bf01      	itttt	eq
 8002688:	6819      	ldreq	r1, [r3, #0]
 800268a:	685b      	ldreq	r3, [r3, #4]
 800268c:	1949      	addeq	r1, r1, r5
 800268e:	6021      	streq	r1, [r4, #0]
 8002690:	e7ed      	b.n	800266e <_free_r+0x22>
 8002692:	461a      	mov	r2, r3
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	b10b      	cbz	r3, 800269c <_free_r+0x50>
 8002698:	42a3      	cmp	r3, r4
 800269a:	d9fa      	bls.n	8002692 <_free_r+0x46>
 800269c:	6811      	ldr	r1, [r2, #0]
 800269e:	1855      	adds	r5, r2, r1
 80026a0:	42a5      	cmp	r5, r4
 80026a2:	d10b      	bne.n	80026bc <_free_r+0x70>
 80026a4:	6824      	ldr	r4, [r4, #0]
 80026a6:	4421      	add	r1, r4
 80026a8:	1854      	adds	r4, r2, r1
 80026aa:	42a3      	cmp	r3, r4
 80026ac:	6011      	str	r1, [r2, #0]
 80026ae:	d1e0      	bne.n	8002672 <_free_r+0x26>
 80026b0:	681c      	ldr	r4, [r3, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	6053      	str	r3, [r2, #4]
 80026b6:	440c      	add	r4, r1
 80026b8:	6014      	str	r4, [r2, #0]
 80026ba:	e7da      	b.n	8002672 <_free_r+0x26>
 80026bc:	d902      	bls.n	80026c4 <_free_r+0x78>
 80026be:	230c      	movs	r3, #12
 80026c0:	6003      	str	r3, [r0, #0]
 80026c2:	e7d6      	b.n	8002672 <_free_r+0x26>
 80026c4:	6825      	ldr	r5, [r4, #0]
 80026c6:	1961      	adds	r1, r4, r5
 80026c8:	428b      	cmp	r3, r1
 80026ca:	bf04      	itt	eq
 80026cc:	6819      	ldreq	r1, [r3, #0]
 80026ce:	685b      	ldreq	r3, [r3, #4]
 80026d0:	6063      	str	r3, [r4, #4]
 80026d2:	bf04      	itt	eq
 80026d4:	1949      	addeq	r1, r1, r5
 80026d6:	6021      	streq	r1, [r4, #0]
 80026d8:	6054      	str	r4, [r2, #4]
 80026da:	e7ca      	b.n	8002672 <_free_r+0x26>
 80026dc:	b003      	add	sp, #12
 80026de:	bd30      	pop	{r4, r5, pc}
 80026e0:	20000220 	.word	0x20000220

080026e4 <sbrk_aligned>:
 80026e4:	b570      	push	{r4, r5, r6, lr}
 80026e6:	4e0e      	ldr	r6, [pc, #56]	; (8002720 <sbrk_aligned+0x3c>)
 80026e8:	460c      	mov	r4, r1
 80026ea:	6831      	ldr	r1, [r6, #0]
 80026ec:	4605      	mov	r5, r0
 80026ee:	b911      	cbnz	r1, 80026f6 <sbrk_aligned+0x12>
 80026f0:	f000 fcbc 	bl	800306c <_sbrk_r>
 80026f4:	6030      	str	r0, [r6, #0]
 80026f6:	4621      	mov	r1, r4
 80026f8:	4628      	mov	r0, r5
 80026fa:	f000 fcb7 	bl	800306c <_sbrk_r>
 80026fe:	1c43      	adds	r3, r0, #1
 8002700:	d00a      	beq.n	8002718 <sbrk_aligned+0x34>
 8002702:	1cc4      	adds	r4, r0, #3
 8002704:	f024 0403 	bic.w	r4, r4, #3
 8002708:	42a0      	cmp	r0, r4
 800270a:	d007      	beq.n	800271c <sbrk_aligned+0x38>
 800270c:	1a21      	subs	r1, r4, r0
 800270e:	4628      	mov	r0, r5
 8002710:	f000 fcac 	bl	800306c <_sbrk_r>
 8002714:	3001      	adds	r0, #1
 8002716:	d101      	bne.n	800271c <sbrk_aligned+0x38>
 8002718:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800271c:	4620      	mov	r0, r4
 800271e:	bd70      	pop	{r4, r5, r6, pc}
 8002720:	20000224 	.word	0x20000224

08002724 <_malloc_r>:
 8002724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002728:	1ccd      	adds	r5, r1, #3
 800272a:	f025 0503 	bic.w	r5, r5, #3
 800272e:	3508      	adds	r5, #8
 8002730:	2d0c      	cmp	r5, #12
 8002732:	bf38      	it	cc
 8002734:	250c      	movcc	r5, #12
 8002736:	2d00      	cmp	r5, #0
 8002738:	4607      	mov	r7, r0
 800273a:	db01      	blt.n	8002740 <_malloc_r+0x1c>
 800273c:	42a9      	cmp	r1, r5
 800273e:	d905      	bls.n	800274c <_malloc_r+0x28>
 8002740:	230c      	movs	r3, #12
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	2600      	movs	r6, #0
 8002746:	4630      	mov	r0, r6
 8002748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800274c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002820 <_malloc_r+0xfc>
 8002750:	f000 f868 	bl	8002824 <__malloc_lock>
 8002754:	f8d8 3000 	ldr.w	r3, [r8]
 8002758:	461c      	mov	r4, r3
 800275a:	bb5c      	cbnz	r4, 80027b4 <_malloc_r+0x90>
 800275c:	4629      	mov	r1, r5
 800275e:	4638      	mov	r0, r7
 8002760:	f7ff ffc0 	bl	80026e4 <sbrk_aligned>
 8002764:	1c43      	adds	r3, r0, #1
 8002766:	4604      	mov	r4, r0
 8002768:	d155      	bne.n	8002816 <_malloc_r+0xf2>
 800276a:	f8d8 4000 	ldr.w	r4, [r8]
 800276e:	4626      	mov	r6, r4
 8002770:	2e00      	cmp	r6, #0
 8002772:	d145      	bne.n	8002800 <_malloc_r+0xdc>
 8002774:	2c00      	cmp	r4, #0
 8002776:	d048      	beq.n	800280a <_malloc_r+0xe6>
 8002778:	6823      	ldr	r3, [r4, #0]
 800277a:	4631      	mov	r1, r6
 800277c:	4638      	mov	r0, r7
 800277e:	eb04 0903 	add.w	r9, r4, r3
 8002782:	f000 fc73 	bl	800306c <_sbrk_r>
 8002786:	4581      	cmp	r9, r0
 8002788:	d13f      	bne.n	800280a <_malloc_r+0xe6>
 800278a:	6821      	ldr	r1, [r4, #0]
 800278c:	1a6d      	subs	r5, r5, r1
 800278e:	4629      	mov	r1, r5
 8002790:	4638      	mov	r0, r7
 8002792:	f7ff ffa7 	bl	80026e4 <sbrk_aligned>
 8002796:	3001      	adds	r0, #1
 8002798:	d037      	beq.n	800280a <_malloc_r+0xe6>
 800279a:	6823      	ldr	r3, [r4, #0]
 800279c:	442b      	add	r3, r5
 800279e:	6023      	str	r3, [r4, #0]
 80027a0:	f8d8 3000 	ldr.w	r3, [r8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d038      	beq.n	800281a <_malloc_r+0xf6>
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	42a2      	cmp	r2, r4
 80027ac:	d12b      	bne.n	8002806 <_malloc_r+0xe2>
 80027ae:	2200      	movs	r2, #0
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	e00f      	b.n	80027d4 <_malloc_r+0xb0>
 80027b4:	6822      	ldr	r2, [r4, #0]
 80027b6:	1b52      	subs	r2, r2, r5
 80027b8:	d41f      	bmi.n	80027fa <_malloc_r+0xd6>
 80027ba:	2a0b      	cmp	r2, #11
 80027bc:	d917      	bls.n	80027ee <_malloc_r+0xca>
 80027be:	1961      	adds	r1, r4, r5
 80027c0:	42a3      	cmp	r3, r4
 80027c2:	6025      	str	r5, [r4, #0]
 80027c4:	bf18      	it	ne
 80027c6:	6059      	strne	r1, [r3, #4]
 80027c8:	6863      	ldr	r3, [r4, #4]
 80027ca:	bf08      	it	eq
 80027cc:	f8c8 1000 	streq.w	r1, [r8]
 80027d0:	5162      	str	r2, [r4, r5]
 80027d2:	604b      	str	r3, [r1, #4]
 80027d4:	4638      	mov	r0, r7
 80027d6:	f104 060b 	add.w	r6, r4, #11
 80027da:	f000 f829 	bl	8002830 <__malloc_unlock>
 80027de:	f026 0607 	bic.w	r6, r6, #7
 80027e2:	1d23      	adds	r3, r4, #4
 80027e4:	1af2      	subs	r2, r6, r3
 80027e6:	d0ae      	beq.n	8002746 <_malloc_r+0x22>
 80027e8:	1b9b      	subs	r3, r3, r6
 80027ea:	50a3      	str	r3, [r4, r2]
 80027ec:	e7ab      	b.n	8002746 <_malloc_r+0x22>
 80027ee:	42a3      	cmp	r3, r4
 80027f0:	6862      	ldr	r2, [r4, #4]
 80027f2:	d1dd      	bne.n	80027b0 <_malloc_r+0x8c>
 80027f4:	f8c8 2000 	str.w	r2, [r8]
 80027f8:	e7ec      	b.n	80027d4 <_malloc_r+0xb0>
 80027fa:	4623      	mov	r3, r4
 80027fc:	6864      	ldr	r4, [r4, #4]
 80027fe:	e7ac      	b.n	800275a <_malloc_r+0x36>
 8002800:	4634      	mov	r4, r6
 8002802:	6876      	ldr	r6, [r6, #4]
 8002804:	e7b4      	b.n	8002770 <_malloc_r+0x4c>
 8002806:	4613      	mov	r3, r2
 8002808:	e7cc      	b.n	80027a4 <_malloc_r+0x80>
 800280a:	230c      	movs	r3, #12
 800280c:	603b      	str	r3, [r7, #0]
 800280e:	4638      	mov	r0, r7
 8002810:	f000 f80e 	bl	8002830 <__malloc_unlock>
 8002814:	e797      	b.n	8002746 <_malloc_r+0x22>
 8002816:	6025      	str	r5, [r4, #0]
 8002818:	e7dc      	b.n	80027d4 <_malloc_r+0xb0>
 800281a:	605b      	str	r3, [r3, #4]
 800281c:	deff      	udf	#255	; 0xff
 800281e:	bf00      	nop
 8002820:	20000220 	.word	0x20000220

08002824 <__malloc_lock>:
 8002824:	4801      	ldr	r0, [pc, #4]	; (800282c <__malloc_lock+0x8>)
 8002826:	f7ff bf0e 	b.w	8002646 <__retarget_lock_acquire_recursive>
 800282a:	bf00      	nop
 800282c:	2000021c 	.word	0x2000021c

08002830 <__malloc_unlock>:
 8002830:	4801      	ldr	r0, [pc, #4]	; (8002838 <__malloc_unlock+0x8>)
 8002832:	f7ff bf09 	b.w	8002648 <__retarget_lock_release_recursive>
 8002836:	bf00      	nop
 8002838:	2000021c 	.word	0x2000021c

0800283c <__sfputc_r>:
 800283c:	6893      	ldr	r3, [r2, #8]
 800283e:	3b01      	subs	r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	b410      	push	{r4}
 8002844:	6093      	str	r3, [r2, #8]
 8002846:	da08      	bge.n	800285a <__sfputc_r+0x1e>
 8002848:	6994      	ldr	r4, [r2, #24]
 800284a:	42a3      	cmp	r3, r4
 800284c:	db01      	blt.n	8002852 <__sfputc_r+0x16>
 800284e:	290a      	cmp	r1, #10
 8002850:	d103      	bne.n	800285a <__sfputc_r+0x1e>
 8002852:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002856:	f000 bb73 	b.w	8002f40 <__swbuf_r>
 800285a:	6813      	ldr	r3, [r2, #0]
 800285c:	1c58      	adds	r0, r3, #1
 800285e:	6010      	str	r0, [r2, #0]
 8002860:	7019      	strb	r1, [r3, #0]
 8002862:	4608      	mov	r0, r1
 8002864:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002868:	4770      	bx	lr

0800286a <__sfputs_r>:
 800286a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800286c:	4606      	mov	r6, r0
 800286e:	460f      	mov	r7, r1
 8002870:	4614      	mov	r4, r2
 8002872:	18d5      	adds	r5, r2, r3
 8002874:	42ac      	cmp	r4, r5
 8002876:	d101      	bne.n	800287c <__sfputs_r+0x12>
 8002878:	2000      	movs	r0, #0
 800287a:	e007      	b.n	800288c <__sfputs_r+0x22>
 800287c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002880:	463a      	mov	r2, r7
 8002882:	4630      	mov	r0, r6
 8002884:	f7ff ffda 	bl	800283c <__sfputc_r>
 8002888:	1c43      	adds	r3, r0, #1
 800288a:	d1f3      	bne.n	8002874 <__sfputs_r+0xa>
 800288c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002890 <_vfiprintf_r>:
 8002890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002894:	460d      	mov	r5, r1
 8002896:	b09d      	sub	sp, #116	; 0x74
 8002898:	4614      	mov	r4, r2
 800289a:	4698      	mov	r8, r3
 800289c:	4606      	mov	r6, r0
 800289e:	b118      	cbz	r0, 80028a8 <_vfiprintf_r+0x18>
 80028a0:	6a03      	ldr	r3, [r0, #32]
 80028a2:	b90b      	cbnz	r3, 80028a8 <_vfiprintf_r+0x18>
 80028a4:	f7ff fdca 	bl	800243c <__sinit>
 80028a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80028aa:	07d9      	lsls	r1, r3, #31
 80028ac:	d405      	bmi.n	80028ba <_vfiprintf_r+0x2a>
 80028ae:	89ab      	ldrh	r3, [r5, #12]
 80028b0:	059a      	lsls	r2, r3, #22
 80028b2:	d402      	bmi.n	80028ba <_vfiprintf_r+0x2a>
 80028b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80028b6:	f7ff fec6 	bl	8002646 <__retarget_lock_acquire_recursive>
 80028ba:	89ab      	ldrh	r3, [r5, #12]
 80028bc:	071b      	lsls	r3, r3, #28
 80028be:	d501      	bpl.n	80028c4 <_vfiprintf_r+0x34>
 80028c0:	692b      	ldr	r3, [r5, #16]
 80028c2:	b99b      	cbnz	r3, 80028ec <_vfiprintf_r+0x5c>
 80028c4:	4629      	mov	r1, r5
 80028c6:	4630      	mov	r0, r6
 80028c8:	f000 fb78 	bl	8002fbc <__swsetup_r>
 80028cc:	b170      	cbz	r0, 80028ec <_vfiprintf_r+0x5c>
 80028ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80028d0:	07dc      	lsls	r4, r3, #31
 80028d2:	d504      	bpl.n	80028de <_vfiprintf_r+0x4e>
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028d8:	b01d      	add	sp, #116	; 0x74
 80028da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028de:	89ab      	ldrh	r3, [r5, #12]
 80028e0:	0598      	lsls	r0, r3, #22
 80028e2:	d4f7      	bmi.n	80028d4 <_vfiprintf_r+0x44>
 80028e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80028e6:	f7ff feaf 	bl	8002648 <__retarget_lock_release_recursive>
 80028ea:	e7f3      	b.n	80028d4 <_vfiprintf_r+0x44>
 80028ec:	2300      	movs	r3, #0
 80028ee:	9309      	str	r3, [sp, #36]	; 0x24
 80028f0:	2320      	movs	r3, #32
 80028f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80028f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80028fa:	2330      	movs	r3, #48	; 0x30
 80028fc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002ab0 <_vfiprintf_r+0x220>
 8002900:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002904:	f04f 0901 	mov.w	r9, #1
 8002908:	4623      	mov	r3, r4
 800290a:	469a      	mov	sl, r3
 800290c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002910:	b10a      	cbz	r2, 8002916 <_vfiprintf_r+0x86>
 8002912:	2a25      	cmp	r2, #37	; 0x25
 8002914:	d1f9      	bne.n	800290a <_vfiprintf_r+0x7a>
 8002916:	ebba 0b04 	subs.w	fp, sl, r4
 800291a:	d00b      	beq.n	8002934 <_vfiprintf_r+0xa4>
 800291c:	465b      	mov	r3, fp
 800291e:	4622      	mov	r2, r4
 8002920:	4629      	mov	r1, r5
 8002922:	4630      	mov	r0, r6
 8002924:	f7ff ffa1 	bl	800286a <__sfputs_r>
 8002928:	3001      	adds	r0, #1
 800292a:	f000 80a9 	beq.w	8002a80 <_vfiprintf_r+0x1f0>
 800292e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002930:	445a      	add	r2, fp
 8002932:	9209      	str	r2, [sp, #36]	; 0x24
 8002934:	f89a 3000 	ldrb.w	r3, [sl]
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80a1 	beq.w	8002a80 <_vfiprintf_r+0x1f0>
 800293e:	2300      	movs	r3, #0
 8002940:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002944:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002948:	f10a 0a01 	add.w	sl, sl, #1
 800294c:	9304      	str	r3, [sp, #16]
 800294e:	9307      	str	r3, [sp, #28]
 8002950:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002954:	931a      	str	r3, [sp, #104]	; 0x68
 8002956:	4654      	mov	r4, sl
 8002958:	2205      	movs	r2, #5
 800295a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800295e:	4854      	ldr	r0, [pc, #336]	; (8002ab0 <_vfiprintf_r+0x220>)
 8002960:	f7fd fc46 	bl	80001f0 <memchr>
 8002964:	9a04      	ldr	r2, [sp, #16]
 8002966:	b9d8      	cbnz	r0, 80029a0 <_vfiprintf_r+0x110>
 8002968:	06d1      	lsls	r1, r2, #27
 800296a:	bf44      	itt	mi
 800296c:	2320      	movmi	r3, #32
 800296e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002972:	0713      	lsls	r3, r2, #28
 8002974:	bf44      	itt	mi
 8002976:	232b      	movmi	r3, #43	; 0x2b
 8002978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800297c:	f89a 3000 	ldrb.w	r3, [sl]
 8002980:	2b2a      	cmp	r3, #42	; 0x2a
 8002982:	d015      	beq.n	80029b0 <_vfiprintf_r+0x120>
 8002984:	9a07      	ldr	r2, [sp, #28]
 8002986:	4654      	mov	r4, sl
 8002988:	2000      	movs	r0, #0
 800298a:	f04f 0c0a 	mov.w	ip, #10
 800298e:	4621      	mov	r1, r4
 8002990:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002994:	3b30      	subs	r3, #48	; 0x30
 8002996:	2b09      	cmp	r3, #9
 8002998:	d94d      	bls.n	8002a36 <_vfiprintf_r+0x1a6>
 800299a:	b1b0      	cbz	r0, 80029ca <_vfiprintf_r+0x13a>
 800299c:	9207      	str	r2, [sp, #28]
 800299e:	e014      	b.n	80029ca <_vfiprintf_r+0x13a>
 80029a0:	eba0 0308 	sub.w	r3, r0, r8
 80029a4:	fa09 f303 	lsl.w	r3, r9, r3
 80029a8:	4313      	orrs	r3, r2
 80029aa:	9304      	str	r3, [sp, #16]
 80029ac:	46a2      	mov	sl, r4
 80029ae:	e7d2      	b.n	8002956 <_vfiprintf_r+0xc6>
 80029b0:	9b03      	ldr	r3, [sp, #12]
 80029b2:	1d19      	adds	r1, r3, #4
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	9103      	str	r1, [sp, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	bfbb      	ittet	lt
 80029bc:	425b      	neglt	r3, r3
 80029be:	f042 0202 	orrlt.w	r2, r2, #2
 80029c2:	9307      	strge	r3, [sp, #28]
 80029c4:	9307      	strlt	r3, [sp, #28]
 80029c6:	bfb8      	it	lt
 80029c8:	9204      	strlt	r2, [sp, #16]
 80029ca:	7823      	ldrb	r3, [r4, #0]
 80029cc:	2b2e      	cmp	r3, #46	; 0x2e
 80029ce:	d10c      	bne.n	80029ea <_vfiprintf_r+0x15a>
 80029d0:	7863      	ldrb	r3, [r4, #1]
 80029d2:	2b2a      	cmp	r3, #42	; 0x2a
 80029d4:	d134      	bne.n	8002a40 <_vfiprintf_r+0x1b0>
 80029d6:	9b03      	ldr	r3, [sp, #12]
 80029d8:	1d1a      	adds	r2, r3, #4
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	9203      	str	r2, [sp, #12]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	bfb8      	it	lt
 80029e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80029e6:	3402      	adds	r4, #2
 80029e8:	9305      	str	r3, [sp, #20]
 80029ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8002ac0 <_vfiprintf_r+0x230>
 80029ee:	7821      	ldrb	r1, [r4, #0]
 80029f0:	2203      	movs	r2, #3
 80029f2:	4650      	mov	r0, sl
 80029f4:	f7fd fbfc 	bl	80001f0 <memchr>
 80029f8:	b138      	cbz	r0, 8002a0a <_vfiprintf_r+0x17a>
 80029fa:	9b04      	ldr	r3, [sp, #16]
 80029fc:	eba0 000a 	sub.w	r0, r0, sl
 8002a00:	2240      	movs	r2, #64	; 0x40
 8002a02:	4082      	lsls	r2, r0
 8002a04:	4313      	orrs	r3, r2
 8002a06:	3401      	adds	r4, #1
 8002a08:	9304      	str	r3, [sp, #16]
 8002a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a0e:	4829      	ldr	r0, [pc, #164]	; (8002ab4 <_vfiprintf_r+0x224>)
 8002a10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a14:	2206      	movs	r2, #6
 8002a16:	f7fd fbeb 	bl	80001f0 <memchr>
 8002a1a:	2800      	cmp	r0, #0
 8002a1c:	d03f      	beq.n	8002a9e <_vfiprintf_r+0x20e>
 8002a1e:	4b26      	ldr	r3, [pc, #152]	; (8002ab8 <_vfiprintf_r+0x228>)
 8002a20:	bb1b      	cbnz	r3, 8002a6a <_vfiprintf_r+0x1da>
 8002a22:	9b03      	ldr	r3, [sp, #12]
 8002a24:	3307      	adds	r3, #7
 8002a26:	f023 0307 	bic.w	r3, r3, #7
 8002a2a:	3308      	adds	r3, #8
 8002a2c:	9303      	str	r3, [sp, #12]
 8002a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a30:	443b      	add	r3, r7
 8002a32:	9309      	str	r3, [sp, #36]	; 0x24
 8002a34:	e768      	b.n	8002908 <_vfiprintf_r+0x78>
 8002a36:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a3a:	460c      	mov	r4, r1
 8002a3c:	2001      	movs	r0, #1
 8002a3e:	e7a6      	b.n	800298e <_vfiprintf_r+0xfe>
 8002a40:	2300      	movs	r3, #0
 8002a42:	3401      	adds	r4, #1
 8002a44:	9305      	str	r3, [sp, #20]
 8002a46:	4619      	mov	r1, r3
 8002a48:	f04f 0c0a 	mov.w	ip, #10
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a52:	3a30      	subs	r2, #48	; 0x30
 8002a54:	2a09      	cmp	r2, #9
 8002a56:	d903      	bls.n	8002a60 <_vfiprintf_r+0x1d0>
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0c6      	beq.n	80029ea <_vfiprintf_r+0x15a>
 8002a5c:	9105      	str	r1, [sp, #20]
 8002a5e:	e7c4      	b.n	80029ea <_vfiprintf_r+0x15a>
 8002a60:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a64:	4604      	mov	r4, r0
 8002a66:	2301      	movs	r3, #1
 8002a68:	e7f0      	b.n	8002a4c <_vfiprintf_r+0x1bc>
 8002a6a:	ab03      	add	r3, sp, #12
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	462a      	mov	r2, r5
 8002a70:	4b12      	ldr	r3, [pc, #72]	; (8002abc <_vfiprintf_r+0x22c>)
 8002a72:	a904      	add	r1, sp, #16
 8002a74:	4630      	mov	r0, r6
 8002a76:	f3af 8000 	nop.w
 8002a7a:	4607      	mov	r7, r0
 8002a7c:	1c78      	adds	r0, r7, #1
 8002a7e:	d1d6      	bne.n	8002a2e <_vfiprintf_r+0x19e>
 8002a80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a82:	07d9      	lsls	r1, r3, #31
 8002a84:	d405      	bmi.n	8002a92 <_vfiprintf_r+0x202>
 8002a86:	89ab      	ldrh	r3, [r5, #12]
 8002a88:	059a      	lsls	r2, r3, #22
 8002a8a:	d402      	bmi.n	8002a92 <_vfiprintf_r+0x202>
 8002a8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a8e:	f7ff fddb 	bl	8002648 <__retarget_lock_release_recursive>
 8002a92:	89ab      	ldrh	r3, [r5, #12]
 8002a94:	065b      	lsls	r3, r3, #25
 8002a96:	f53f af1d 	bmi.w	80028d4 <_vfiprintf_r+0x44>
 8002a9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a9c:	e71c      	b.n	80028d8 <_vfiprintf_r+0x48>
 8002a9e:	ab03      	add	r3, sp, #12
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	462a      	mov	r2, r5
 8002aa4:	4b05      	ldr	r3, [pc, #20]	; (8002abc <_vfiprintf_r+0x22c>)
 8002aa6:	a904      	add	r1, sp, #16
 8002aa8:	4630      	mov	r0, r6
 8002aaa:	f000 f879 	bl	8002ba0 <_printf_i>
 8002aae:	e7e4      	b.n	8002a7a <_vfiprintf_r+0x1ea>
 8002ab0:	08003244 	.word	0x08003244
 8002ab4:	0800324e 	.word	0x0800324e
 8002ab8:	00000000 	.word	0x00000000
 8002abc:	0800286b 	.word	0x0800286b
 8002ac0:	0800324a 	.word	0x0800324a

08002ac4 <_printf_common>:
 8002ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ac8:	4616      	mov	r6, r2
 8002aca:	4699      	mov	r9, r3
 8002acc:	688a      	ldr	r2, [r1, #8]
 8002ace:	690b      	ldr	r3, [r1, #16]
 8002ad0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	bfb8      	it	lt
 8002ad8:	4613      	movlt	r3, r2
 8002ada:	6033      	str	r3, [r6, #0]
 8002adc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ae0:	4607      	mov	r7, r0
 8002ae2:	460c      	mov	r4, r1
 8002ae4:	b10a      	cbz	r2, 8002aea <_printf_common+0x26>
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	6033      	str	r3, [r6, #0]
 8002aea:	6823      	ldr	r3, [r4, #0]
 8002aec:	0699      	lsls	r1, r3, #26
 8002aee:	bf42      	ittt	mi
 8002af0:	6833      	ldrmi	r3, [r6, #0]
 8002af2:	3302      	addmi	r3, #2
 8002af4:	6033      	strmi	r3, [r6, #0]
 8002af6:	6825      	ldr	r5, [r4, #0]
 8002af8:	f015 0506 	ands.w	r5, r5, #6
 8002afc:	d106      	bne.n	8002b0c <_printf_common+0x48>
 8002afe:	f104 0a19 	add.w	sl, r4, #25
 8002b02:	68e3      	ldr	r3, [r4, #12]
 8002b04:	6832      	ldr	r2, [r6, #0]
 8002b06:	1a9b      	subs	r3, r3, r2
 8002b08:	42ab      	cmp	r3, r5
 8002b0a:	dc26      	bgt.n	8002b5a <_printf_common+0x96>
 8002b0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002b10:	1e13      	subs	r3, r2, #0
 8002b12:	6822      	ldr	r2, [r4, #0]
 8002b14:	bf18      	it	ne
 8002b16:	2301      	movne	r3, #1
 8002b18:	0692      	lsls	r2, r2, #26
 8002b1a:	d42b      	bmi.n	8002b74 <_printf_common+0xb0>
 8002b1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b20:	4649      	mov	r1, r9
 8002b22:	4638      	mov	r0, r7
 8002b24:	47c0      	blx	r8
 8002b26:	3001      	adds	r0, #1
 8002b28:	d01e      	beq.n	8002b68 <_printf_common+0xa4>
 8002b2a:	6823      	ldr	r3, [r4, #0]
 8002b2c:	6922      	ldr	r2, [r4, #16]
 8002b2e:	f003 0306 	and.w	r3, r3, #6
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	bf02      	ittt	eq
 8002b36:	68e5      	ldreq	r5, [r4, #12]
 8002b38:	6833      	ldreq	r3, [r6, #0]
 8002b3a:	1aed      	subeq	r5, r5, r3
 8002b3c:	68a3      	ldr	r3, [r4, #8]
 8002b3e:	bf0c      	ite	eq
 8002b40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b44:	2500      	movne	r5, #0
 8002b46:	4293      	cmp	r3, r2
 8002b48:	bfc4      	itt	gt
 8002b4a:	1a9b      	subgt	r3, r3, r2
 8002b4c:	18ed      	addgt	r5, r5, r3
 8002b4e:	2600      	movs	r6, #0
 8002b50:	341a      	adds	r4, #26
 8002b52:	42b5      	cmp	r5, r6
 8002b54:	d11a      	bne.n	8002b8c <_printf_common+0xc8>
 8002b56:	2000      	movs	r0, #0
 8002b58:	e008      	b.n	8002b6c <_printf_common+0xa8>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	4652      	mov	r2, sl
 8002b5e:	4649      	mov	r1, r9
 8002b60:	4638      	mov	r0, r7
 8002b62:	47c0      	blx	r8
 8002b64:	3001      	adds	r0, #1
 8002b66:	d103      	bne.n	8002b70 <_printf_common+0xac>
 8002b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b70:	3501      	adds	r5, #1
 8002b72:	e7c6      	b.n	8002b02 <_printf_common+0x3e>
 8002b74:	18e1      	adds	r1, r4, r3
 8002b76:	1c5a      	adds	r2, r3, #1
 8002b78:	2030      	movs	r0, #48	; 0x30
 8002b7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b7e:	4422      	add	r2, r4
 8002b80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b88:	3302      	adds	r3, #2
 8002b8a:	e7c7      	b.n	8002b1c <_printf_common+0x58>
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	4622      	mov	r2, r4
 8002b90:	4649      	mov	r1, r9
 8002b92:	4638      	mov	r0, r7
 8002b94:	47c0      	blx	r8
 8002b96:	3001      	adds	r0, #1
 8002b98:	d0e6      	beq.n	8002b68 <_printf_common+0xa4>
 8002b9a:	3601      	adds	r6, #1
 8002b9c:	e7d9      	b.n	8002b52 <_printf_common+0x8e>
	...

08002ba0 <_printf_i>:
 8002ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ba4:	7e0f      	ldrb	r7, [r1, #24]
 8002ba6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002ba8:	2f78      	cmp	r7, #120	; 0x78
 8002baa:	4691      	mov	r9, r2
 8002bac:	4680      	mov	r8, r0
 8002bae:	460c      	mov	r4, r1
 8002bb0:	469a      	mov	sl, r3
 8002bb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002bb6:	d807      	bhi.n	8002bc8 <_printf_i+0x28>
 8002bb8:	2f62      	cmp	r7, #98	; 0x62
 8002bba:	d80a      	bhi.n	8002bd2 <_printf_i+0x32>
 8002bbc:	2f00      	cmp	r7, #0
 8002bbe:	f000 80d4 	beq.w	8002d6a <_printf_i+0x1ca>
 8002bc2:	2f58      	cmp	r7, #88	; 0x58
 8002bc4:	f000 80c0 	beq.w	8002d48 <_printf_i+0x1a8>
 8002bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002bd0:	e03a      	b.n	8002c48 <_printf_i+0xa8>
 8002bd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002bd6:	2b15      	cmp	r3, #21
 8002bd8:	d8f6      	bhi.n	8002bc8 <_printf_i+0x28>
 8002bda:	a101      	add	r1, pc, #4	; (adr r1, 8002be0 <_printf_i+0x40>)
 8002bdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002be0:	08002c39 	.word	0x08002c39
 8002be4:	08002c4d 	.word	0x08002c4d
 8002be8:	08002bc9 	.word	0x08002bc9
 8002bec:	08002bc9 	.word	0x08002bc9
 8002bf0:	08002bc9 	.word	0x08002bc9
 8002bf4:	08002bc9 	.word	0x08002bc9
 8002bf8:	08002c4d 	.word	0x08002c4d
 8002bfc:	08002bc9 	.word	0x08002bc9
 8002c00:	08002bc9 	.word	0x08002bc9
 8002c04:	08002bc9 	.word	0x08002bc9
 8002c08:	08002bc9 	.word	0x08002bc9
 8002c0c:	08002d51 	.word	0x08002d51
 8002c10:	08002c79 	.word	0x08002c79
 8002c14:	08002d0b 	.word	0x08002d0b
 8002c18:	08002bc9 	.word	0x08002bc9
 8002c1c:	08002bc9 	.word	0x08002bc9
 8002c20:	08002d73 	.word	0x08002d73
 8002c24:	08002bc9 	.word	0x08002bc9
 8002c28:	08002c79 	.word	0x08002c79
 8002c2c:	08002bc9 	.word	0x08002bc9
 8002c30:	08002bc9 	.word	0x08002bc9
 8002c34:	08002d13 	.word	0x08002d13
 8002c38:	682b      	ldr	r3, [r5, #0]
 8002c3a:	1d1a      	adds	r2, r3, #4
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	602a      	str	r2, [r5, #0]
 8002c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e09f      	b.n	8002d8c <_printf_i+0x1ec>
 8002c4c:	6820      	ldr	r0, [r4, #0]
 8002c4e:	682b      	ldr	r3, [r5, #0]
 8002c50:	0607      	lsls	r7, r0, #24
 8002c52:	f103 0104 	add.w	r1, r3, #4
 8002c56:	6029      	str	r1, [r5, #0]
 8002c58:	d501      	bpl.n	8002c5e <_printf_i+0xbe>
 8002c5a:	681e      	ldr	r6, [r3, #0]
 8002c5c:	e003      	b.n	8002c66 <_printf_i+0xc6>
 8002c5e:	0646      	lsls	r6, r0, #25
 8002c60:	d5fb      	bpl.n	8002c5a <_printf_i+0xba>
 8002c62:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002c66:	2e00      	cmp	r6, #0
 8002c68:	da03      	bge.n	8002c72 <_printf_i+0xd2>
 8002c6a:	232d      	movs	r3, #45	; 0x2d
 8002c6c:	4276      	negs	r6, r6
 8002c6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c72:	485a      	ldr	r0, [pc, #360]	; (8002ddc <_printf_i+0x23c>)
 8002c74:	230a      	movs	r3, #10
 8002c76:	e012      	b.n	8002c9e <_printf_i+0xfe>
 8002c78:	682b      	ldr	r3, [r5, #0]
 8002c7a:	6820      	ldr	r0, [r4, #0]
 8002c7c:	1d19      	adds	r1, r3, #4
 8002c7e:	6029      	str	r1, [r5, #0]
 8002c80:	0605      	lsls	r5, r0, #24
 8002c82:	d501      	bpl.n	8002c88 <_printf_i+0xe8>
 8002c84:	681e      	ldr	r6, [r3, #0]
 8002c86:	e002      	b.n	8002c8e <_printf_i+0xee>
 8002c88:	0641      	lsls	r1, r0, #25
 8002c8a:	d5fb      	bpl.n	8002c84 <_printf_i+0xe4>
 8002c8c:	881e      	ldrh	r6, [r3, #0]
 8002c8e:	4853      	ldr	r0, [pc, #332]	; (8002ddc <_printf_i+0x23c>)
 8002c90:	2f6f      	cmp	r7, #111	; 0x6f
 8002c92:	bf0c      	ite	eq
 8002c94:	2308      	moveq	r3, #8
 8002c96:	230a      	movne	r3, #10
 8002c98:	2100      	movs	r1, #0
 8002c9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c9e:	6865      	ldr	r5, [r4, #4]
 8002ca0:	60a5      	str	r5, [r4, #8]
 8002ca2:	2d00      	cmp	r5, #0
 8002ca4:	bfa2      	ittt	ge
 8002ca6:	6821      	ldrge	r1, [r4, #0]
 8002ca8:	f021 0104 	bicge.w	r1, r1, #4
 8002cac:	6021      	strge	r1, [r4, #0]
 8002cae:	b90e      	cbnz	r6, 8002cb4 <_printf_i+0x114>
 8002cb0:	2d00      	cmp	r5, #0
 8002cb2:	d04b      	beq.n	8002d4c <_printf_i+0x1ac>
 8002cb4:	4615      	mov	r5, r2
 8002cb6:	fbb6 f1f3 	udiv	r1, r6, r3
 8002cba:	fb03 6711 	mls	r7, r3, r1, r6
 8002cbe:	5dc7      	ldrb	r7, [r0, r7]
 8002cc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002cc4:	4637      	mov	r7, r6
 8002cc6:	42bb      	cmp	r3, r7
 8002cc8:	460e      	mov	r6, r1
 8002cca:	d9f4      	bls.n	8002cb6 <_printf_i+0x116>
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d10b      	bne.n	8002ce8 <_printf_i+0x148>
 8002cd0:	6823      	ldr	r3, [r4, #0]
 8002cd2:	07de      	lsls	r6, r3, #31
 8002cd4:	d508      	bpl.n	8002ce8 <_printf_i+0x148>
 8002cd6:	6923      	ldr	r3, [r4, #16]
 8002cd8:	6861      	ldr	r1, [r4, #4]
 8002cda:	4299      	cmp	r1, r3
 8002cdc:	bfde      	ittt	le
 8002cde:	2330      	movle	r3, #48	; 0x30
 8002ce0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ce4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002ce8:	1b52      	subs	r2, r2, r5
 8002cea:	6122      	str	r2, [r4, #16]
 8002cec:	f8cd a000 	str.w	sl, [sp]
 8002cf0:	464b      	mov	r3, r9
 8002cf2:	aa03      	add	r2, sp, #12
 8002cf4:	4621      	mov	r1, r4
 8002cf6:	4640      	mov	r0, r8
 8002cf8:	f7ff fee4 	bl	8002ac4 <_printf_common>
 8002cfc:	3001      	adds	r0, #1
 8002cfe:	d14a      	bne.n	8002d96 <_printf_i+0x1f6>
 8002d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d04:	b004      	add	sp, #16
 8002d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d0a:	6823      	ldr	r3, [r4, #0]
 8002d0c:	f043 0320 	orr.w	r3, r3, #32
 8002d10:	6023      	str	r3, [r4, #0]
 8002d12:	4833      	ldr	r0, [pc, #204]	; (8002de0 <_printf_i+0x240>)
 8002d14:	2778      	movs	r7, #120	; 0x78
 8002d16:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002d1a:	6823      	ldr	r3, [r4, #0]
 8002d1c:	6829      	ldr	r1, [r5, #0]
 8002d1e:	061f      	lsls	r7, r3, #24
 8002d20:	f851 6b04 	ldr.w	r6, [r1], #4
 8002d24:	d402      	bmi.n	8002d2c <_printf_i+0x18c>
 8002d26:	065f      	lsls	r7, r3, #25
 8002d28:	bf48      	it	mi
 8002d2a:	b2b6      	uxthmi	r6, r6
 8002d2c:	07df      	lsls	r7, r3, #31
 8002d2e:	bf48      	it	mi
 8002d30:	f043 0320 	orrmi.w	r3, r3, #32
 8002d34:	6029      	str	r1, [r5, #0]
 8002d36:	bf48      	it	mi
 8002d38:	6023      	strmi	r3, [r4, #0]
 8002d3a:	b91e      	cbnz	r6, 8002d44 <_printf_i+0x1a4>
 8002d3c:	6823      	ldr	r3, [r4, #0]
 8002d3e:	f023 0320 	bic.w	r3, r3, #32
 8002d42:	6023      	str	r3, [r4, #0]
 8002d44:	2310      	movs	r3, #16
 8002d46:	e7a7      	b.n	8002c98 <_printf_i+0xf8>
 8002d48:	4824      	ldr	r0, [pc, #144]	; (8002ddc <_printf_i+0x23c>)
 8002d4a:	e7e4      	b.n	8002d16 <_printf_i+0x176>
 8002d4c:	4615      	mov	r5, r2
 8002d4e:	e7bd      	b.n	8002ccc <_printf_i+0x12c>
 8002d50:	682b      	ldr	r3, [r5, #0]
 8002d52:	6826      	ldr	r6, [r4, #0]
 8002d54:	6961      	ldr	r1, [r4, #20]
 8002d56:	1d18      	adds	r0, r3, #4
 8002d58:	6028      	str	r0, [r5, #0]
 8002d5a:	0635      	lsls	r5, r6, #24
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	d501      	bpl.n	8002d64 <_printf_i+0x1c4>
 8002d60:	6019      	str	r1, [r3, #0]
 8002d62:	e002      	b.n	8002d6a <_printf_i+0x1ca>
 8002d64:	0670      	lsls	r0, r6, #25
 8002d66:	d5fb      	bpl.n	8002d60 <_printf_i+0x1c0>
 8002d68:	8019      	strh	r1, [r3, #0]
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	6123      	str	r3, [r4, #16]
 8002d6e:	4615      	mov	r5, r2
 8002d70:	e7bc      	b.n	8002cec <_printf_i+0x14c>
 8002d72:	682b      	ldr	r3, [r5, #0]
 8002d74:	1d1a      	adds	r2, r3, #4
 8002d76:	602a      	str	r2, [r5, #0]
 8002d78:	681d      	ldr	r5, [r3, #0]
 8002d7a:	6862      	ldr	r2, [r4, #4]
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	4628      	mov	r0, r5
 8002d80:	f7fd fa36 	bl	80001f0 <memchr>
 8002d84:	b108      	cbz	r0, 8002d8a <_printf_i+0x1ea>
 8002d86:	1b40      	subs	r0, r0, r5
 8002d88:	6060      	str	r0, [r4, #4]
 8002d8a:	6863      	ldr	r3, [r4, #4]
 8002d8c:	6123      	str	r3, [r4, #16]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d94:	e7aa      	b.n	8002cec <_printf_i+0x14c>
 8002d96:	6923      	ldr	r3, [r4, #16]
 8002d98:	462a      	mov	r2, r5
 8002d9a:	4649      	mov	r1, r9
 8002d9c:	4640      	mov	r0, r8
 8002d9e:	47d0      	blx	sl
 8002da0:	3001      	adds	r0, #1
 8002da2:	d0ad      	beq.n	8002d00 <_printf_i+0x160>
 8002da4:	6823      	ldr	r3, [r4, #0]
 8002da6:	079b      	lsls	r3, r3, #30
 8002da8:	d413      	bmi.n	8002dd2 <_printf_i+0x232>
 8002daa:	68e0      	ldr	r0, [r4, #12]
 8002dac:	9b03      	ldr	r3, [sp, #12]
 8002dae:	4298      	cmp	r0, r3
 8002db0:	bfb8      	it	lt
 8002db2:	4618      	movlt	r0, r3
 8002db4:	e7a6      	b.n	8002d04 <_printf_i+0x164>
 8002db6:	2301      	movs	r3, #1
 8002db8:	4632      	mov	r2, r6
 8002dba:	4649      	mov	r1, r9
 8002dbc:	4640      	mov	r0, r8
 8002dbe:	47d0      	blx	sl
 8002dc0:	3001      	adds	r0, #1
 8002dc2:	d09d      	beq.n	8002d00 <_printf_i+0x160>
 8002dc4:	3501      	adds	r5, #1
 8002dc6:	68e3      	ldr	r3, [r4, #12]
 8002dc8:	9903      	ldr	r1, [sp, #12]
 8002dca:	1a5b      	subs	r3, r3, r1
 8002dcc:	42ab      	cmp	r3, r5
 8002dce:	dcf2      	bgt.n	8002db6 <_printf_i+0x216>
 8002dd0:	e7eb      	b.n	8002daa <_printf_i+0x20a>
 8002dd2:	2500      	movs	r5, #0
 8002dd4:	f104 0619 	add.w	r6, r4, #25
 8002dd8:	e7f5      	b.n	8002dc6 <_printf_i+0x226>
 8002dda:	bf00      	nop
 8002ddc:	08003255 	.word	0x08003255
 8002de0:	08003266 	.word	0x08003266

08002de4 <__sflush_r>:
 8002de4:	898a      	ldrh	r2, [r1, #12]
 8002de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dea:	4605      	mov	r5, r0
 8002dec:	0710      	lsls	r0, r2, #28
 8002dee:	460c      	mov	r4, r1
 8002df0:	d458      	bmi.n	8002ea4 <__sflush_r+0xc0>
 8002df2:	684b      	ldr	r3, [r1, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	dc05      	bgt.n	8002e04 <__sflush_r+0x20>
 8002df8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	dc02      	bgt.n	8002e04 <__sflush_r+0x20>
 8002dfe:	2000      	movs	r0, #0
 8002e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e06:	2e00      	cmp	r6, #0
 8002e08:	d0f9      	beq.n	8002dfe <__sflush_r+0x1a>
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002e10:	682f      	ldr	r7, [r5, #0]
 8002e12:	6a21      	ldr	r1, [r4, #32]
 8002e14:	602b      	str	r3, [r5, #0]
 8002e16:	d032      	beq.n	8002e7e <__sflush_r+0x9a>
 8002e18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e1a:	89a3      	ldrh	r3, [r4, #12]
 8002e1c:	075a      	lsls	r2, r3, #29
 8002e1e:	d505      	bpl.n	8002e2c <__sflush_r+0x48>
 8002e20:	6863      	ldr	r3, [r4, #4]
 8002e22:	1ac0      	subs	r0, r0, r3
 8002e24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e26:	b10b      	cbz	r3, 8002e2c <__sflush_r+0x48>
 8002e28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e2a:	1ac0      	subs	r0, r0, r3
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	4602      	mov	r2, r0
 8002e30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e32:	6a21      	ldr	r1, [r4, #32]
 8002e34:	4628      	mov	r0, r5
 8002e36:	47b0      	blx	r6
 8002e38:	1c43      	adds	r3, r0, #1
 8002e3a:	89a3      	ldrh	r3, [r4, #12]
 8002e3c:	d106      	bne.n	8002e4c <__sflush_r+0x68>
 8002e3e:	6829      	ldr	r1, [r5, #0]
 8002e40:	291d      	cmp	r1, #29
 8002e42:	d82b      	bhi.n	8002e9c <__sflush_r+0xb8>
 8002e44:	4a29      	ldr	r2, [pc, #164]	; (8002eec <__sflush_r+0x108>)
 8002e46:	410a      	asrs	r2, r1
 8002e48:	07d6      	lsls	r6, r2, #31
 8002e4a:	d427      	bmi.n	8002e9c <__sflush_r+0xb8>
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	6062      	str	r2, [r4, #4]
 8002e50:	04d9      	lsls	r1, r3, #19
 8002e52:	6922      	ldr	r2, [r4, #16]
 8002e54:	6022      	str	r2, [r4, #0]
 8002e56:	d504      	bpl.n	8002e62 <__sflush_r+0x7e>
 8002e58:	1c42      	adds	r2, r0, #1
 8002e5a:	d101      	bne.n	8002e60 <__sflush_r+0x7c>
 8002e5c:	682b      	ldr	r3, [r5, #0]
 8002e5e:	b903      	cbnz	r3, 8002e62 <__sflush_r+0x7e>
 8002e60:	6560      	str	r0, [r4, #84]	; 0x54
 8002e62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e64:	602f      	str	r7, [r5, #0]
 8002e66:	2900      	cmp	r1, #0
 8002e68:	d0c9      	beq.n	8002dfe <__sflush_r+0x1a>
 8002e6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e6e:	4299      	cmp	r1, r3
 8002e70:	d002      	beq.n	8002e78 <__sflush_r+0x94>
 8002e72:	4628      	mov	r0, r5
 8002e74:	f7ff fbea 	bl	800264c <_free_r>
 8002e78:	2000      	movs	r0, #0
 8002e7a:	6360      	str	r0, [r4, #52]	; 0x34
 8002e7c:	e7c0      	b.n	8002e00 <__sflush_r+0x1c>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	4628      	mov	r0, r5
 8002e82:	47b0      	blx	r6
 8002e84:	1c41      	adds	r1, r0, #1
 8002e86:	d1c8      	bne.n	8002e1a <__sflush_r+0x36>
 8002e88:	682b      	ldr	r3, [r5, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0c5      	beq.n	8002e1a <__sflush_r+0x36>
 8002e8e:	2b1d      	cmp	r3, #29
 8002e90:	d001      	beq.n	8002e96 <__sflush_r+0xb2>
 8002e92:	2b16      	cmp	r3, #22
 8002e94:	d101      	bne.n	8002e9a <__sflush_r+0xb6>
 8002e96:	602f      	str	r7, [r5, #0]
 8002e98:	e7b1      	b.n	8002dfe <__sflush_r+0x1a>
 8002e9a:	89a3      	ldrh	r3, [r4, #12]
 8002e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ea0:	81a3      	strh	r3, [r4, #12]
 8002ea2:	e7ad      	b.n	8002e00 <__sflush_r+0x1c>
 8002ea4:	690f      	ldr	r7, [r1, #16]
 8002ea6:	2f00      	cmp	r7, #0
 8002ea8:	d0a9      	beq.n	8002dfe <__sflush_r+0x1a>
 8002eaa:	0793      	lsls	r3, r2, #30
 8002eac:	680e      	ldr	r6, [r1, #0]
 8002eae:	bf08      	it	eq
 8002eb0:	694b      	ldreq	r3, [r1, #20]
 8002eb2:	600f      	str	r7, [r1, #0]
 8002eb4:	bf18      	it	ne
 8002eb6:	2300      	movne	r3, #0
 8002eb8:	eba6 0807 	sub.w	r8, r6, r7
 8002ebc:	608b      	str	r3, [r1, #8]
 8002ebe:	f1b8 0f00 	cmp.w	r8, #0
 8002ec2:	dd9c      	ble.n	8002dfe <__sflush_r+0x1a>
 8002ec4:	6a21      	ldr	r1, [r4, #32]
 8002ec6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002ec8:	4643      	mov	r3, r8
 8002eca:	463a      	mov	r2, r7
 8002ecc:	4628      	mov	r0, r5
 8002ece:	47b0      	blx	r6
 8002ed0:	2800      	cmp	r0, #0
 8002ed2:	dc06      	bgt.n	8002ee2 <__sflush_r+0xfe>
 8002ed4:	89a3      	ldrh	r3, [r4, #12]
 8002ed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eda:	81a3      	strh	r3, [r4, #12]
 8002edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ee0:	e78e      	b.n	8002e00 <__sflush_r+0x1c>
 8002ee2:	4407      	add	r7, r0
 8002ee4:	eba8 0800 	sub.w	r8, r8, r0
 8002ee8:	e7e9      	b.n	8002ebe <__sflush_r+0xda>
 8002eea:	bf00      	nop
 8002eec:	dfbffffe 	.word	0xdfbffffe

08002ef0 <_fflush_r>:
 8002ef0:	b538      	push	{r3, r4, r5, lr}
 8002ef2:	690b      	ldr	r3, [r1, #16]
 8002ef4:	4605      	mov	r5, r0
 8002ef6:	460c      	mov	r4, r1
 8002ef8:	b913      	cbnz	r3, 8002f00 <_fflush_r+0x10>
 8002efa:	2500      	movs	r5, #0
 8002efc:	4628      	mov	r0, r5
 8002efe:	bd38      	pop	{r3, r4, r5, pc}
 8002f00:	b118      	cbz	r0, 8002f0a <_fflush_r+0x1a>
 8002f02:	6a03      	ldr	r3, [r0, #32]
 8002f04:	b90b      	cbnz	r3, 8002f0a <_fflush_r+0x1a>
 8002f06:	f7ff fa99 	bl	800243c <__sinit>
 8002f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f3      	beq.n	8002efa <_fflush_r+0xa>
 8002f12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002f14:	07d0      	lsls	r0, r2, #31
 8002f16:	d404      	bmi.n	8002f22 <_fflush_r+0x32>
 8002f18:	0599      	lsls	r1, r3, #22
 8002f1a:	d402      	bmi.n	8002f22 <_fflush_r+0x32>
 8002f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f1e:	f7ff fb92 	bl	8002646 <__retarget_lock_acquire_recursive>
 8002f22:	4628      	mov	r0, r5
 8002f24:	4621      	mov	r1, r4
 8002f26:	f7ff ff5d 	bl	8002de4 <__sflush_r>
 8002f2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f2c:	07da      	lsls	r2, r3, #31
 8002f2e:	4605      	mov	r5, r0
 8002f30:	d4e4      	bmi.n	8002efc <_fflush_r+0xc>
 8002f32:	89a3      	ldrh	r3, [r4, #12]
 8002f34:	059b      	lsls	r3, r3, #22
 8002f36:	d4e1      	bmi.n	8002efc <_fflush_r+0xc>
 8002f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f3a:	f7ff fb85 	bl	8002648 <__retarget_lock_release_recursive>
 8002f3e:	e7dd      	b.n	8002efc <_fflush_r+0xc>

08002f40 <__swbuf_r>:
 8002f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f42:	460e      	mov	r6, r1
 8002f44:	4614      	mov	r4, r2
 8002f46:	4605      	mov	r5, r0
 8002f48:	b118      	cbz	r0, 8002f52 <__swbuf_r+0x12>
 8002f4a:	6a03      	ldr	r3, [r0, #32]
 8002f4c:	b90b      	cbnz	r3, 8002f52 <__swbuf_r+0x12>
 8002f4e:	f7ff fa75 	bl	800243c <__sinit>
 8002f52:	69a3      	ldr	r3, [r4, #24]
 8002f54:	60a3      	str	r3, [r4, #8]
 8002f56:	89a3      	ldrh	r3, [r4, #12]
 8002f58:	071a      	lsls	r2, r3, #28
 8002f5a:	d525      	bpl.n	8002fa8 <__swbuf_r+0x68>
 8002f5c:	6923      	ldr	r3, [r4, #16]
 8002f5e:	b31b      	cbz	r3, 8002fa8 <__swbuf_r+0x68>
 8002f60:	6823      	ldr	r3, [r4, #0]
 8002f62:	6922      	ldr	r2, [r4, #16]
 8002f64:	1a98      	subs	r0, r3, r2
 8002f66:	6963      	ldr	r3, [r4, #20]
 8002f68:	b2f6      	uxtb	r6, r6
 8002f6a:	4283      	cmp	r3, r0
 8002f6c:	4637      	mov	r7, r6
 8002f6e:	dc04      	bgt.n	8002f7a <__swbuf_r+0x3a>
 8002f70:	4621      	mov	r1, r4
 8002f72:	4628      	mov	r0, r5
 8002f74:	f7ff ffbc 	bl	8002ef0 <_fflush_r>
 8002f78:	b9e0      	cbnz	r0, 8002fb4 <__swbuf_r+0x74>
 8002f7a:	68a3      	ldr	r3, [r4, #8]
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	60a3      	str	r3, [r4, #8]
 8002f80:	6823      	ldr	r3, [r4, #0]
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	6022      	str	r2, [r4, #0]
 8002f86:	701e      	strb	r6, [r3, #0]
 8002f88:	6962      	ldr	r2, [r4, #20]
 8002f8a:	1c43      	adds	r3, r0, #1
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d004      	beq.n	8002f9a <__swbuf_r+0x5a>
 8002f90:	89a3      	ldrh	r3, [r4, #12]
 8002f92:	07db      	lsls	r3, r3, #31
 8002f94:	d506      	bpl.n	8002fa4 <__swbuf_r+0x64>
 8002f96:	2e0a      	cmp	r6, #10
 8002f98:	d104      	bne.n	8002fa4 <__swbuf_r+0x64>
 8002f9a:	4621      	mov	r1, r4
 8002f9c:	4628      	mov	r0, r5
 8002f9e:	f7ff ffa7 	bl	8002ef0 <_fflush_r>
 8002fa2:	b938      	cbnz	r0, 8002fb4 <__swbuf_r+0x74>
 8002fa4:	4638      	mov	r0, r7
 8002fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fa8:	4621      	mov	r1, r4
 8002faa:	4628      	mov	r0, r5
 8002fac:	f000 f806 	bl	8002fbc <__swsetup_r>
 8002fb0:	2800      	cmp	r0, #0
 8002fb2:	d0d5      	beq.n	8002f60 <__swbuf_r+0x20>
 8002fb4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002fb8:	e7f4      	b.n	8002fa4 <__swbuf_r+0x64>
	...

08002fbc <__swsetup_r>:
 8002fbc:	b538      	push	{r3, r4, r5, lr}
 8002fbe:	4b2a      	ldr	r3, [pc, #168]	; (8003068 <__swsetup_r+0xac>)
 8002fc0:	4605      	mov	r5, r0
 8002fc2:	6818      	ldr	r0, [r3, #0]
 8002fc4:	460c      	mov	r4, r1
 8002fc6:	b118      	cbz	r0, 8002fd0 <__swsetup_r+0x14>
 8002fc8:	6a03      	ldr	r3, [r0, #32]
 8002fca:	b90b      	cbnz	r3, 8002fd0 <__swsetup_r+0x14>
 8002fcc:	f7ff fa36 	bl	800243c <__sinit>
 8002fd0:	89a3      	ldrh	r3, [r4, #12]
 8002fd2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002fd6:	0718      	lsls	r0, r3, #28
 8002fd8:	d422      	bmi.n	8003020 <__swsetup_r+0x64>
 8002fda:	06d9      	lsls	r1, r3, #27
 8002fdc:	d407      	bmi.n	8002fee <__swsetup_r+0x32>
 8002fde:	2309      	movs	r3, #9
 8002fe0:	602b      	str	r3, [r5, #0]
 8002fe2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002fe6:	81a3      	strh	r3, [r4, #12]
 8002fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fec:	e034      	b.n	8003058 <__swsetup_r+0x9c>
 8002fee:	0758      	lsls	r0, r3, #29
 8002ff0:	d512      	bpl.n	8003018 <__swsetup_r+0x5c>
 8002ff2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ff4:	b141      	cbz	r1, 8003008 <__swsetup_r+0x4c>
 8002ff6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ffa:	4299      	cmp	r1, r3
 8002ffc:	d002      	beq.n	8003004 <__swsetup_r+0x48>
 8002ffe:	4628      	mov	r0, r5
 8003000:	f7ff fb24 	bl	800264c <_free_r>
 8003004:	2300      	movs	r3, #0
 8003006:	6363      	str	r3, [r4, #52]	; 0x34
 8003008:	89a3      	ldrh	r3, [r4, #12]
 800300a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800300e:	81a3      	strh	r3, [r4, #12]
 8003010:	2300      	movs	r3, #0
 8003012:	6063      	str	r3, [r4, #4]
 8003014:	6923      	ldr	r3, [r4, #16]
 8003016:	6023      	str	r3, [r4, #0]
 8003018:	89a3      	ldrh	r3, [r4, #12]
 800301a:	f043 0308 	orr.w	r3, r3, #8
 800301e:	81a3      	strh	r3, [r4, #12]
 8003020:	6923      	ldr	r3, [r4, #16]
 8003022:	b94b      	cbnz	r3, 8003038 <__swsetup_r+0x7c>
 8003024:	89a3      	ldrh	r3, [r4, #12]
 8003026:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800302a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800302e:	d003      	beq.n	8003038 <__swsetup_r+0x7c>
 8003030:	4621      	mov	r1, r4
 8003032:	4628      	mov	r0, r5
 8003034:	f000 f850 	bl	80030d8 <__smakebuf_r>
 8003038:	89a0      	ldrh	r0, [r4, #12]
 800303a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800303e:	f010 0301 	ands.w	r3, r0, #1
 8003042:	d00a      	beq.n	800305a <__swsetup_r+0x9e>
 8003044:	2300      	movs	r3, #0
 8003046:	60a3      	str	r3, [r4, #8]
 8003048:	6963      	ldr	r3, [r4, #20]
 800304a:	425b      	negs	r3, r3
 800304c:	61a3      	str	r3, [r4, #24]
 800304e:	6923      	ldr	r3, [r4, #16]
 8003050:	b943      	cbnz	r3, 8003064 <__swsetup_r+0xa8>
 8003052:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003056:	d1c4      	bne.n	8002fe2 <__swsetup_r+0x26>
 8003058:	bd38      	pop	{r3, r4, r5, pc}
 800305a:	0781      	lsls	r1, r0, #30
 800305c:	bf58      	it	pl
 800305e:	6963      	ldrpl	r3, [r4, #20]
 8003060:	60a3      	str	r3, [r4, #8]
 8003062:	e7f4      	b.n	800304e <__swsetup_r+0x92>
 8003064:	2000      	movs	r0, #0
 8003066:	e7f7      	b.n	8003058 <__swsetup_r+0x9c>
 8003068:	20000070 	.word	0x20000070

0800306c <_sbrk_r>:
 800306c:	b538      	push	{r3, r4, r5, lr}
 800306e:	4d06      	ldr	r5, [pc, #24]	; (8003088 <_sbrk_r+0x1c>)
 8003070:	2300      	movs	r3, #0
 8003072:	4604      	mov	r4, r0
 8003074:	4608      	mov	r0, r1
 8003076:	602b      	str	r3, [r5, #0]
 8003078:	f7fd fbde 	bl	8000838 <_sbrk>
 800307c:	1c43      	adds	r3, r0, #1
 800307e:	d102      	bne.n	8003086 <_sbrk_r+0x1a>
 8003080:	682b      	ldr	r3, [r5, #0]
 8003082:	b103      	cbz	r3, 8003086 <_sbrk_r+0x1a>
 8003084:	6023      	str	r3, [r4, #0]
 8003086:	bd38      	pop	{r3, r4, r5, pc}
 8003088:	20000218 	.word	0x20000218

0800308c <__swhatbuf_r>:
 800308c:	b570      	push	{r4, r5, r6, lr}
 800308e:	460c      	mov	r4, r1
 8003090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003094:	2900      	cmp	r1, #0
 8003096:	b096      	sub	sp, #88	; 0x58
 8003098:	4615      	mov	r5, r2
 800309a:	461e      	mov	r6, r3
 800309c:	da0d      	bge.n	80030ba <__swhatbuf_r+0x2e>
 800309e:	89a3      	ldrh	r3, [r4, #12]
 80030a0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80030a4:	f04f 0100 	mov.w	r1, #0
 80030a8:	bf0c      	ite	eq
 80030aa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80030ae:	2340      	movne	r3, #64	; 0x40
 80030b0:	2000      	movs	r0, #0
 80030b2:	6031      	str	r1, [r6, #0]
 80030b4:	602b      	str	r3, [r5, #0]
 80030b6:	b016      	add	sp, #88	; 0x58
 80030b8:	bd70      	pop	{r4, r5, r6, pc}
 80030ba:	466a      	mov	r2, sp
 80030bc:	f000 f848 	bl	8003150 <_fstat_r>
 80030c0:	2800      	cmp	r0, #0
 80030c2:	dbec      	blt.n	800309e <__swhatbuf_r+0x12>
 80030c4:	9901      	ldr	r1, [sp, #4]
 80030c6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80030ca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80030ce:	4259      	negs	r1, r3
 80030d0:	4159      	adcs	r1, r3
 80030d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030d6:	e7eb      	b.n	80030b0 <__swhatbuf_r+0x24>

080030d8 <__smakebuf_r>:
 80030d8:	898b      	ldrh	r3, [r1, #12]
 80030da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80030dc:	079d      	lsls	r5, r3, #30
 80030de:	4606      	mov	r6, r0
 80030e0:	460c      	mov	r4, r1
 80030e2:	d507      	bpl.n	80030f4 <__smakebuf_r+0x1c>
 80030e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80030e8:	6023      	str	r3, [r4, #0]
 80030ea:	6123      	str	r3, [r4, #16]
 80030ec:	2301      	movs	r3, #1
 80030ee:	6163      	str	r3, [r4, #20]
 80030f0:	b002      	add	sp, #8
 80030f2:	bd70      	pop	{r4, r5, r6, pc}
 80030f4:	ab01      	add	r3, sp, #4
 80030f6:	466a      	mov	r2, sp
 80030f8:	f7ff ffc8 	bl	800308c <__swhatbuf_r>
 80030fc:	9900      	ldr	r1, [sp, #0]
 80030fe:	4605      	mov	r5, r0
 8003100:	4630      	mov	r0, r6
 8003102:	f7ff fb0f 	bl	8002724 <_malloc_r>
 8003106:	b948      	cbnz	r0, 800311c <__smakebuf_r+0x44>
 8003108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800310c:	059a      	lsls	r2, r3, #22
 800310e:	d4ef      	bmi.n	80030f0 <__smakebuf_r+0x18>
 8003110:	f023 0303 	bic.w	r3, r3, #3
 8003114:	f043 0302 	orr.w	r3, r3, #2
 8003118:	81a3      	strh	r3, [r4, #12]
 800311a:	e7e3      	b.n	80030e4 <__smakebuf_r+0xc>
 800311c:	89a3      	ldrh	r3, [r4, #12]
 800311e:	6020      	str	r0, [r4, #0]
 8003120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003124:	81a3      	strh	r3, [r4, #12]
 8003126:	9b00      	ldr	r3, [sp, #0]
 8003128:	6163      	str	r3, [r4, #20]
 800312a:	9b01      	ldr	r3, [sp, #4]
 800312c:	6120      	str	r0, [r4, #16]
 800312e:	b15b      	cbz	r3, 8003148 <__smakebuf_r+0x70>
 8003130:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003134:	4630      	mov	r0, r6
 8003136:	f000 f81d 	bl	8003174 <_isatty_r>
 800313a:	b128      	cbz	r0, 8003148 <__smakebuf_r+0x70>
 800313c:	89a3      	ldrh	r3, [r4, #12]
 800313e:	f023 0303 	bic.w	r3, r3, #3
 8003142:	f043 0301 	orr.w	r3, r3, #1
 8003146:	81a3      	strh	r3, [r4, #12]
 8003148:	89a3      	ldrh	r3, [r4, #12]
 800314a:	431d      	orrs	r5, r3
 800314c:	81a5      	strh	r5, [r4, #12]
 800314e:	e7cf      	b.n	80030f0 <__smakebuf_r+0x18>

08003150 <_fstat_r>:
 8003150:	b538      	push	{r3, r4, r5, lr}
 8003152:	4d07      	ldr	r5, [pc, #28]	; (8003170 <_fstat_r+0x20>)
 8003154:	2300      	movs	r3, #0
 8003156:	4604      	mov	r4, r0
 8003158:	4608      	mov	r0, r1
 800315a:	4611      	mov	r1, r2
 800315c:	602b      	str	r3, [r5, #0]
 800315e:	f7fd fb42 	bl	80007e6 <_fstat>
 8003162:	1c43      	adds	r3, r0, #1
 8003164:	d102      	bne.n	800316c <_fstat_r+0x1c>
 8003166:	682b      	ldr	r3, [r5, #0]
 8003168:	b103      	cbz	r3, 800316c <_fstat_r+0x1c>
 800316a:	6023      	str	r3, [r4, #0]
 800316c:	bd38      	pop	{r3, r4, r5, pc}
 800316e:	bf00      	nop
 8003170:	20000218 	.word	0x20000218

08003174 <_isatty_r>:
 8003174:	b538      	push	{r3, r4, r5, lr}
 8003176:	4d06      	ldr	r5, [pc, #24]	; (8003190 <_isatty_r+0x1c>)
 8003178:	2300      	movs	r3, #0
 800317a:	4604      	mov	r4, r0
 800317c:	4608      	mov	r0, r1
 800317e:	602b      	str	r3, [r5, #0]
 8003180:	f7fd fb41 	bl	8000806 <_isatty>
 8003184:	1c43      	adds	r3, r0, #1
 8003186:	d102      	bne.n	800318e <_isatty_r+0x1a>
 8003188:	682b      	ldr	r3, [r5, #0]
 800318a:	b103      	cbz	r3, 800318e <_isatty_r+0x1a>
 800318c:	6023      	str	r3, [r4, #0]
 800318e:	bd38      	pop	{r3, r4, r5, pc}
 8003190:	20000218 	.word	0x20000218

08003194 <_init>:
 8003194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003196:	bf00      	nop
 8003198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800319a:	bc08      	pop	{r3}
 800319c:	469e      	mov	lr, r3
 800319e:	4770      	bx	lr

080031a0 <_fini>:
 80031a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a2:	bf00      	nop
 80031a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031a6:	bc08      	pop	{r3}
 80031a8:	469e      	mov	lr, r3
 80031aa:	4770      	bx	lr
