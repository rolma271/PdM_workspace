
spinflow.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060a0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  0800624c  0800624c  0001624c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063d0  080063d0  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080063d0  080063d0  000163d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063d8  080063d8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063d8  080063d8  000163d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063dc  080063dc  000163dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080063e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          000005d0  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005e8  200005e8  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012812  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002dd2  00000000  00000000  0003289d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011d0  00000000  00000000  00035670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000dec  00000000  00000000  00036840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002627c  00000000  00000000  0003762c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001842f  00000000  00000000  0005d8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dfa18  00000000  00000000  00075cd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004980  00000000  00000000  001556f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0015a070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006234 	.word	0x08006234

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	08006234 	.word	0x08006234

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
 * Application
 *
 */

int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	/* System initialization */
	HAL_Init();
 80004fc:	f000 fd06 	bl	8000f0c <HAL_Init>
	SystemClock_Config();
 8000500:	f000 f928 	bl	8000754 <SystemClock_Config>
	GPIO_Init();
 8000504:	f000 f992 	bl	800082c <GPIO_Init>

	/*BSP LEDs init*/
	led_init();
 8000508:	f000 fa90 	bl	8000a2c <led_init>

	/* Initialize App */
	app_Init();
 800050c:	f000 f804 	bl	8000518 <app_Init>

	/* Infinite loop */
	while (1)
	{
		app_Tasks();
 8000510:	f000 f81e 	bl	8000550 <app_Tasks>
 8000514:	e7fc      	b.n	8000510 <main+0x18>
	...

08000518 <app_Init>:
	}
}

static void app_Init()
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	// init peripherals
	npx_Init();
 800051c:	f005 fc2a 	bl	8005d74 <npx_Init>
	imu_Init();
 8000520:	f004 ff49 	bl	80053b6 <imu_Init>
	log_Init();
 8000524:	f005 fbb2 	bl	8005c8c <log_Init>

	// start app
	appState = APP_START;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <app_Init+0x2c>)
 800052a:	2200      	movs	r2, #0
 800052c:	701a      	strb	r2, [r3, #0]
	log_SendString(LOG_APP_INFO, "App start");
 800052e:	4906      	ldr	r1, [pc, #24]	; (8000548 <app_Init+0x30>)
 8000530:	2000      	movs	r0, #0
 8000532:	f005 fbb9 	bl	8005ca8 <log_SendString>
	delayInit(&appTimer, APP_START_DELAY_MS);
 8000536:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800053a:	4804      	ldr	r0, [pc, #16]	; (800054c <app_Init+0x34>)
 800053c:	f004 fede 	bl	80052fc <delayInit>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000040 	.word	0x20000040
 8000548:	0800624c 	.word	0x0800624c
 800054c:	20000034 	.word	0x20000034

08000550 <app_Tasks>:

static void app_Tasks()
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	switch (appState)
 8000554:	4b62      	ldr	r3, [pc, #392]	; (80006e0 <app_Tasks+0x190>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b06      	cmp	r3, #6
 800055a:	f200 80b2 	bhi.w	80006c2 <app_Tasks+0x172>
 800055e:	a201      	add	r2, pc, #4	; (adr r2, 8000564 <app_Tasks+0x14>)
 8000560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000564:	08000581 	.word	0x08000581
 8000568:	080005bf 	.word	0x080005bf
 800056c:	080005d5 	.word	0x080005d5
 8000570:	08000623 	.word	0x08000623
 8000574:	08000683 	.word	0x08000683
 8000578:	08000697 	.word	0x08000697
 800057c:	080006ab 	.word	0x080006ab
	{
	case APP_START:
		if (imu_Check())
 8000580:	f004 ff27 	bl	80053d2 <imu_Check>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d00e      	beq.n	80005a8 <app_Tasks+0x58>
		{
			log_SendString(LOG_APP_INFO, "IMU ok");
 800058a:	4956      	ldr	r1, [pc, #344]	; (80006e4 <app_Tasks+0x194>)
 800058c:	2000      	movs	r0, #0
 800058e:	f005 fb8b 	bl	8005ca8 <log_SendString>
			BSP_LED_Off(LED_IMU); // reset LED to indicate success
 8000592:	2001      	movs	r0, #1
 8000594:	f000 fc86 	bl	8000ea4 <BSP_LED_Off>

			appState = APP_IDLE;
 8000598:	4b51      	ldr	r3, [pc, #324]	; (80006e0 <app_Tasks+0x190>)
 800059a:	2202      	movs	r2, #2
 800059c:	701a      	strb	r2, [r3, #0]
			delayWrite(&appTimer, APP_IDLE_DELAY_MS);
 800059e:	2132      	movs	r1, #50	; 0x32
 80005a0:	4851      	ldr	r0, [pc, #324]	; (80006e8 <app_Tasks+0x198>)
 80005a2:	f004 fef6 	bl	8005392 <delayWrite>
			log_SendString(LOG_APP_INFO, "IMU error");
			BSP_LED_On(LED_IMU); // set LED to indicate error

			appState = APP_START_DELAY;
		}
		break;
 80005a6:	e098      	b.n	80006da <app_Tasks+0x18a>
			log_SendString(LOG_APP_INFO, "IMU error");
 80005a8:	4950      	ldr	r1, [pc, #320]	; (80006ec <app_Tasks+0x19c>)
 80005aa:	2000      	movs	r0, #0
 80005ac:	f005 fb7c 	bl	8005ca8 <log_SendString>
			BSP_LED_On(LED_IMU); // set LED to indicate error
 80005b0:	2001      	movs	r0, #1
 80005b2:	f000 fc5d 	bl	8000e70 <BSP_LED_On>
			appState = APP_START_DELAY;
 80005b6:	4b4a      	ldr	r3, [pc, #296]	; (80006e0 <app_Tasks+0x190>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	701a      	strb	r2, [r3, #0]
		break;
 80005bc:	e08d      	b.n	80006da <app_Tasks+0x18a>

	case APP_START_DELAY:
		if (delayRead(&appTimer))
 80005be:	484a      	ldr	r0, [pc, #296]	; (80006e8 <app_Tasks+0x198>)
 80005c0:	f004 feb4 	bl	800532c <delayRead>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	f000 8082 	beq.w	80006d0 <app_Tasks+0x180>
		{
			appState = APP_START;
 80005cc:	4b44      	ldr	r3, [pc, #272]	; (80006e0 <app_Tasks+0x190>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80005d2:	e07d      	b.n	80006d0 <app_Tasks+0x180>

	case APP_IDLE:
		if (delayRead(&appTimer))
 80005d4:	4844      	ldr	r0, [pc, #272]	; (80006e8 <app_Tasks+0x198>)
 80005d6:	f004 fea9 	bl	800532c <delayRead>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d079      	beq.n	80006d4 <app_Tasks+0x184>
		{
			imu_GetData();
 80005e0:	f004 fefe 	bl	80053e0 <imu_GetData>
			switch (imu_State())
 80005e4:	f004 ff1c 	bl	8005420 <imu_State>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d002      	beq.n	80005f4 <app_Tasks+0xa4>
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d007      	beq.n	8000602 <app_Tasks+0xb2>
 80005f2:	e00e      	b.n	8000612 <app_Tasks+0xc2>
			{
			case IMU_IDLE:
				log_SendString(LOG_APP_INFO, "Idle");
 80005f4:	493e      	ldr	r1, [pc, #248]	; (80006f0 <app_Tasks+0x1a0>)
 80005f6:	2000      	movs	r0, #0
 80005f8:	f005 fb56 	bl	8005ca8 <log_SendString>
				//appState = APP_IDLE;
				app_noSpinDetected();
 80005fc:	f000 f888 	bl	8000710 <app_noSpinDetected>
				break;
 8000600:	e00e      	b.n	8000620 <app_Tasks+0xd0>

			case IMU_ACTIVE:
				log_SendString(LOG_APP_INFO, "Active");
 8000602:	493c      	ldr	r1, [pc, #240]	; (80006f4 <app_Tasks+0x1a4>)
 8000604:	2000      	movs	r0, #0
 8000606:	f005 fb4f 	bl	8005ca8 <log_SendString>
				appState = APP_ACTIVE;
 800060a:	4b35      	ldr	r3, [pc, #212]	; (80006e0 <app_Tasks+0x190>)
 800060c:	2203      	movs	r2, #3
 800060e:	701a      	strb	r2, [r3, #0]
				break;
 8000610:	e006      	b.n	8000620 <app_Tasks+0xd0>

			default:
				log_SendString(LOG_APP_ERROR, "IMU state error");
 8000612:	4939      	ldr	r1, [pc, #228]	; (80006f8 <app_Tasks+0x1a8>)
 8000614:	2001      	movs	r0, #1
 8000616:	f005 fb47 	bl	8005ca8 <log_SendString>
				Error_Handler();
 800061a:	f000 f894 	bl	8000746 <Error_Handler>
				break;
 800061e:	bf00      	nop
			}
		}
		break;
 8000620:	e058      	b.n	80006d4 <app_Tasks+0x184>

	case APP_ACTIVE:
		switch (imu_SpinDirection())
 8000622:	f004 ff09 	bl	8005438 <imu_SpinDirection>
 8000626:	4603      	mov	r3, r0
 8000628:	2b02      	cmp	r3, #2
 800062a:	d01a      	beq.n	8000662 <app_Tasks+0x112>
 800062c:	2b02      	cmp	r3, #2
 800062e:	dc20      	bgt.n	8000672 <app_Tasks+0x122>
 8000630:	2b00      	cmp	r3, #0
 8000632:	d002      	beq.n	800063a <app_Tasks+0xea>
 8000634:	2b01      	cmp	r3, #1
 8000636:	d00c      	beq.n	8000652 <app_Tasks+0x102>
 8000638:	e01b      	b.n	8000672 <app_Tasks+0x122>
		{
		case IMU_NO_SPIN:
			log_SendString(LOG_APP_INFO, "No spin detected");
 800063a:	4930      	ldr	r1, [pc, #192]	; (80006fc <app_Tasks+0x1ac>)
 800063c:	2000      	movs	r0, #0
 800063e:	f005 fb33 	bl	8005ca8 <log_SendString>
			appState = APP_IDLE;
 8000642:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <app_Tasks+0x190>)
 8000644:	2202      	movs	r2, #2
 8000646:	701a      	strb	r2, [r3, #0]
			delayWrite(&appTimer, APP_IDLE_DELAY_MS);
 8000648:	2132      	movs	r1, #50	; 0x32
 800064a:	4827      	ldr	r0, [pc, #156]	; (80006e8 <app_Tasks+0x198>)
 800064c:	f004 fea1 	bl	8005392 <delayWrite>
			break;
 8000650:	e016      	b.n	8000680 <app_Tasks+0x130>

		case IMU_POS_SPIN:
			log_SendString(LOG_APP_INFO, "Positive spin detected");
 8000652:	492b      	ldr	r1, [pc, #172]	; (8000700 <app_Tasks+0x1b0>)
 8000654:	2000      	movs	r0, #0
 8000656:	f005 fb27 	bl	8005ca8 <log_SendString>
			appState = APP_POS_SPIN;
 800065a:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <app_Tasks+0x190>)
 800065c:	2204      	movs	r2, #4
 800065e:	701a      	strb	r2, [r3, #0]
			break;
 8000660:	e00e      	b.n	8000680 <app_Tasks+0x130>

		case IMU_NEG_SPIN:
			log_SendString(LOG_APP_INFO, "Negative spin detected");
 8000662:	4928      	ldr	r1, [pc, #160]	; (8000704 <app_Tasks+0x1b4>)
 8000664:	2000      	movs	r0, #0
 8000666:	f005 fb1f 	bl	8005ca8 <log_SendString>
			appState = APP_NEG_SPIN;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <app_Tasks+0x190>)
 800066c:	2205      	movs	r2, #5
 800066e:	701a      	strb	r2, [r3, #0]
			break;
 8000670:	e006      	b.n	8000680 <app_Tasks+0x130>

		default:
			log_SendString(LOG_APP_ERROR, "IMU spin error");
 8000672:	4925      	ldr	r1, [pc, #148]	; (8000708 <app_Tasks+0x1b8>)
 8000674:	2001      	movs	r0, #1
 8000676:	f005 fb17 	bl	8005ca8 <log_SendString>
			Error_Handler();
 800067a:	f000 f864 	bl	8000746 <Error_Handler>
			break;
 800067e:	bf00      	nop
		}
		break;
 8000680:	e02b      	b.n	80006da <app_Tasks+0x18a>

	case APP_POS_SPIN:
		app_positiveSpinDetected();
 8000682:	f000 f84e 	bl	8000722 <app_positiveSpinDetected>
		appState = APP_DELAY;
 8000686:	4b16      	ldr	r3, [pc, #88]	; (80006e0 <app_Tasks+0x190>)
 8000688:	2206      	movs	r2, #6
 800068a:	701a      	strb	r2, [r3, #0]
		delayWrite(&appTimer, APP_CONFIG_DELAY_MS);
 800068c:	2164      	movs	r1, #100	; 0x64
 800068e:	4816      	ldr	r0, [pc, #88]	; (80006e8 <app_Tasks+0x198>)
 8000690:	f004 fe7f 	bl	8005392 <delayWrite>
		break;
 8000694:	e021      	b.n	80006da <app_Tasks+0x18a>

	case APP_NEG_SPIN:
		app_negativeSpinDetected();
 8000696:	f000 f84d 	bl	8000734 <app_negativeSpinDetected>
		appState = APP_DELAY;
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <app_Tasks+0x190>)
 800069c:	2206      	movs	r2, #6
 800069e:	701a      	strb	r2, [r3, #0]
		delayWrite(&appTimer, APP_CONFIG_DELAY_MS);
 80006a0:	2164      	movs	r1, #100	; 0x64
 80006a2:	4811      	ldr	r0, [pc, #68]	; (80006e8 <app_Tasks+0x198>)
 80006a4:	f004 fe75 	bl	8005392 <delayWrite>
		break;
 80006a8:	e017      	b.n	80006da <app_Tasks+0x18a>

	case APP_DELAY:
		if (delayRead(&appTimer))
 80006aa:	480f      	ldr	r0, [pc, #60]	; (80006e8 <app_Tasks+0x198>)
 80006ac:	f004 fe3e 	bl	800532c <delayRead>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d010      	beq.n	80006d8 <app_Tasks+0x188>
		{
			appState = APP_ACTIVE;
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <app_Tasks+0x190>)
 80006b8:	2203      	movs	r2, #3
 80006ba:	701a      	strb	r2, [r3, #0]
			imu_GetData();
 80006bc:	f004 fe90 	bl	80053e0 <imu_GetData>
		}
		break;
 80006c0:	e00a      	b.n	80006d8 <app_Tasks+0x188>

	default:
		log_SendString(LOG_APP_ERROR, "App unknown state!");
 80006c2:	4912      	ldr	r1, [pc, #72]	; (800070c <app_Tasks+0x1bc>)
 80006c4:	2001      	movs	r0, #1
 80006c6:	f005 faef 	bl	8005ca8 <log_SendString>
		Error_Handler();
 80006ca:	f000 f83c 	bl	8000746 <Error_Handler>
		break;
 80006ce:	e004      	b.n	80006da <app_Tasks+0x18a>
		break;
 80006d0:	bf00      	nop
 80006d2:	e002      	b.n	80006da <app_Tasks+0x18a>
		break;
 80006d4:	bf00      	nop
 80006d6:	e000      	b.n	80006da <app_Tasks+0x18a>
		break;
 80006d8:	bf00      	nop
	}
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000040 	.word	0x20000040
 80006e4:	08006258 	.word	0x08006258
 80006e8:	20000034 	.word	0x20000034
 80006ec:	08006260 	.word	0x08006260
 80006f0:	0800626c 	.word	0x0800626c
 80006f4:	08006274 	.word	0x08006274
 80006f8:	0800627c 	.word	0x0800627c
 80006fc:	0800628c 	.word	0x0800628c
 8000700:	080062a0 	.word	0x080062a0
 8000704:	080062b8 	.word	0x080062b8
 8000708:	080062d0 	.word	0x080062d0
 800070c:	080062e0 	.word	0x080062e0

08000710 <app_noSpinDetected>:

static void app_noSpinDetected()
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	npx_SetIdle();
 8000714:	f005 fb34 	bl	8005d80 <npx_SetIdle>
	BSP_LED_Off(LED_NPX);  // reset LED to indicate inactivity
 8000718:	2002      	movs	r0, #2
 800071a:	f000 fbc3 	bl	8000ea4 <BSP_LED_Off>
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}

08000722 <app_positiveSpinDetected>:

static void app_positiveSpinDetected()
{
 8000722:	b580      	push	{r7, lr}
 8000724:	af00      	add	r7, sp, #0
	npx_SetPositive();
 8000726:	f005 fb32 	bl	8005d8e <npx_SetPositive>
	BSP_LED_Toggle(LED_NPX); // toggle LED to indicate activity
 800072a:	2002      	movs	r0, #2
 800072c:	f000 fbd4 	bl	8000ed8 <BSP_LED_Toggle>
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}

08000734 <app_negativeSpinDetected>:

static void app_negativeSpinDetected()
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	npx_SetNegative();
 8000738:	f005 fb30 	bl	8005d9c <npx_SetNegative>
	BSP_LED_Toggle(LED_NPX); // toggle LED to indicate activity
 800073c:	2002      	movs	r0, #2
 800073e:	f000 fbcb 	bl	8000ed8 <BSP_LED_Toggle>
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}

08000746 <Error_Handler>:
/**
 * System
 */

static void Error_Handler(void)
{
 8000746:	b580      	push	{r7, lr}
 8000748:	af00      	add	r7, sp, #0
	/* Turn LED_APP on */
	BSP_LED_On(LED_APP);
 800074a:	2000      	movs	r0, #0
 800074c:	f000 fb90 	bl	8000e70 <BSP_LED_On>
	while (1)
 8000750:	e7fe      	b.n	8000750 <Error_Handler+0xa>
	...

08000754 <SystemClock_Config>:
	{
	}
}

void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b094      	sub	sp, #80	; 0x50
 8000758:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	2230      	movs	r2, #48	; 0x30
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f005 fd3a 	bl	80061dc <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	4b29      	ldr	r3, [pc, #164]	; (8000824 <SystemClock_Config+0xd0>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000780:	4a28      	ldr	r2, [pc, #160]	; (8000824 <SystemClock_Config+0xd0>)
 8000782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000786:	6413      	str	r3, [r2, #64]	; 0x40
 8000788:	4b26      	ldr	r3, [pc, #152]	; (8000824 <SystemClock_Config+0xd0>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000794:	2300      	movs	r3, #0
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	4b23      	ldr	r3, [pc, #140]	; (8000828 <SystemClock_Config+0xd4>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007a0:	4a21      	ldr	r2, [pc, #132]	; (8000828 <SystemClock_Config+0xd4>)
 80007a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a6:	6013      	str	r3, [r2, #0]
 80007a8:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <SystemClock_Config+0xd4>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b4:	2301      	movs	r3, #1
 80007b6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007be:	2302      	movs	r3, #2
 80007c0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80007c8:	2304      	movs	r3, #4
 80007ca:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 80007cc:	2348      	movs	r3, #72	; 0x48
 80007ce:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d0:	2302      	movs	r3, #2
 80007d2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 80007d4:	2303      	movs	r3, #3
 80007d6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d8:	f107 0320 	add.w	r3, r7, #32
 80007dc:	4618      	mov	r0, r3
 80007de:	f002 fb4f 	bl	8002e80 <HAL_RCC_OscConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0x98>
	{
		Error_Handler();
 80007e8:	f7ff ffad 	bl	8000746 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007ec:	230f      	movs	r3, #15
 80007ee:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f0:	2302      	movs	r3, #2
 80007f2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000802:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	2102      	movs	r1, #2
 800080a:	4618      	mov	r0, r3
 800080c:	f002 fdb0 	bl	8003370 <HAL_RCC_ClockConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8000816:	f7ff ff96 	bl	8000746 <Error_Handler>
	}
}
 800081a:	bf00      	nop
 800081c:	3750      	adds	r7, #80	; 0x50
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800
 8000828:	40007000 	.word	0x40007000

0800082c <GPIO_Init>:

static void GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	; 0x30
 8000830:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	61bb      	str	r3, [r7, #24]
 8000846:	4b74      	ldr	r3, [pc, #464]	; (8000a18 <GPIO_Init+0x1ec>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a73      	ldr	r2, [pc, #460]	; (8000a18 <GPIO_Init+0x1ec>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b71      	ldr	r3, [pc, #452]	; (8000a18 <GPIO_Init+0x1ec>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	61bb      	str	r3, [r7, #24]
 800085c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
 8000862:	4b6d      	ldr	r3, [pc, #436]	; (8000a18 <GPIO_Init+0x1ec>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a6c      	ldr	r2, [pc, #432]	; (8000a18 <GPIO_Init+0x1ec>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b6a      	ldr	r3, [pc, #424]	; (8000a18 <GPIO_Init+0x1ec>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	4b66      	ldr	r3, [pc, #408]	; (8000a18 <GPIO_Init+0x1ec>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a65      	ldr	r2, [pc, #404]	; (8000a18 <GPIO_Init+0x1ec>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b63      	ldr	r3, [pc, #396]	; (8000a18 <GPIO_Init+0x1ec>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	4b5f      	ldr	r3, [pc, #380]	; (8000a18 <GPIO_Init+0x1ec>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a5e      	ldr	r2, [pc, #376]	; (8000a18 <GPIO_Init+0x1ec>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b5c      	ldr	r3, [pc, #368]	; (8000a18 <GPIO_Init+0x1ec>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	4b58      	ldr	r3, [pc, #352]	; (8000a18 <GPIO_Init+0x1ec>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a57      	ldr	r2, [pc, #348]	; (8000a18 <GPIO_Init+0x1ec>)
 80008bc:	f043 0310 	orr.w	r3, r3, #16
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b55      	ldr	r3, [pc, #340]	; (8000a18 <GPIO_Init+0x1ec>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0310 	and.w	r3, r3, #16
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b51      	ldr	r3, [pc, #324]	; (8000a18 <GPIO_Init+0x1ec>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a50      	ldr	r2, [pc, #320]	; (8000a18 <GPIO_Init+0x1ec>)
 80008d8:	f043 0308 	orr.w	r3, r3, #8
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b4e      	ldr	r3, [pc, #312]	; (8000a18 <GPIO_Init+0x1ec>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0308 	and.w	r3, r3, #8
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	4b4a      	ldr	r3, [pc, #296]	; (8000a18 <GPIO_Init+0x1ec>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a49      	ldr	r2, [pc, #292]	; (8000a18 <GPIO_Init+0x1ec>)
 80008f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b47      	ldr	r3, [pc, #284]	; (8000a18 <GPIO_Init+0x1ec>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	f244 0181 	movw	r1, #16513	; 0x4081
 800090c:	4843      	ldr	r0, [pc, #268]	; (8000a1c <GPIO_Init+0x1f0>)
 800090e:	f001 f9e3 	bl	8001cd8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8000912:	2200      	movs	r2, #0
 8000914:	2140      	movs	r1, #64	; 0x40
 8000916:	4842      	ldr	r0, [pc, #264]	; (8000a20 <GPIO_Init+0x1f4>)
 8000918:	f001 f9de 	bl	8001cd8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 800091c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000920:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000922:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000926:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	483c      	ldr	r0, [pc, #240]	; (8000a24 <GPIO_Init+0x1f8>)
 8000934:	f001 f824 	bl	8001980 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8000938:	2332      	movs	r3, #50	; 0x32
 800093a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000944:	2303      	movs	r3, #3
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000948:	230b      	movs	r3, #11
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	4834      	ldr	r0, [pc, #208]	; (8000a24 <GPIO_Init+0x1f8>)
 8000954:	f001 f814 	bl	8001980 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 8000958:	2386      	movs	r3, #134	; 0x86
 800095a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000964:	2303      	movs	r3, #3
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000968:	230b      	movs	r3, #11
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	482d      	ldr	r0, [pc, #180]	; (8000a28 <GPIO_Init+0x1fc>)
 8000974:	f001 f804 	bl	8001980 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8000978:	f244 0381 	movw	r3, #16513	; 0x4081
 800097c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4822      	ldr	r0, [pc, #136]	; (8000a1c <GPIO_Init+0x1f0>)
 8000992:	f000 fff5 	bl	8001980 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000996:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800099a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099c:	2302      	movs	r3, #2
 800099e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a4:	2303      	movs	r3, #3
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009a8:	230b      	movs	r3, #11
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	481a      	ldr	r0, [pc, #104]	; (8000a1c <GPIO_Init+0x1f0>)
 80009b4:	f000 ffe4 	bl	8001980 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009b8:	2340      	movs	r3, #64	; 0x40
 80009ba:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	4814      	ldr	r0, [pc, #80]	; (8000a20 <GPIO_Init+0x1f4>)
 80009d0:	f000 ffd6 	bl	8001980 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009d4:	2380      	movs	r3, #128	; 0x80
 80009d6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	480e      	ldr	r0, [pc, #56]	; (8000a20 <GPIO_Init+0x1f4>)
 80009e8:	f000 ffca 	bl	8001980 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 80009ec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009f0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009fe:	230b      	movs	r3, #11
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <GPIO_Init+0x1f4>)
 8000a0a:	f000 ffb9 	bl	8001980 <HAL_GPIO_Init>
}
 8000a0e:	bf00      	nop
 8000a10:	3730      	adds	r7, #48	; 0x30
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40020400 	.word	0x40020400
 8000a20:	40021800 	.word	0x40021800
 8000a24:	40020800 	.word	0x40020800
 8000a28:	40020000 	.word	0x40020000

08000a2c <led_init>:

static void led_init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	BSP_LED_Init(LED_APP);
 8000a30:	2000      	movs	r0, #0
 8000a32:	f000 f9cd 	bl	8000dd0 <BSP_LED_Init>
	BSP_LED_Init(LED_IMU);
 8000a36:	2001      	movs	r0, #1
 8000a38:	f000 f9ca 	bl	8000dd0 <BSP_LED_Init>
	BSP_LED_Init(LED_NPX);
 8000a3c:	2002      	movs	r0, #2
 8000a3e:	f000 f9c7 	bl	8000dd0 <BSP_LED_Init>

	BSP_LED_Off(LED_APP);
 8000a42:	2000      	movs	r0, #0
 8000a44:	f000 fa2e 	bl	8000ea4 <BSP_LED_Off>
	BSP_LED_Off(LED_IMU);
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f000 fa2b 	bl	8000ea4 <BSP_LED_Off>
	BSP_LED_Off(LED_NPX);
 8000a4e:	2002      	movs	r0, #2
 8000a50:	f000 fa28 	bl	8000ea4 <BSP_LED_Off>
}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
static void Error_Handler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f000 fa07 	bl	8000e70 <BSP_LED_On>
	while (1)
 8000a62:	e7fe      	b.n	8000a62 <Error_Handler+0xa>

08000a64 <HAL_MspInit>:
//void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	4a0f      	ldr	r2, [pc, #60]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a78:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	4a08      	ldr	r2, [pc, #32]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a94:	6413      	str	r3, [r2, #64]	; 0x40
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800

08000ab4 <HAL_I2C_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	; 0x28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
	{ 0 };
	if (hi2c->Instance == I2C1)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a19      	ldr	r2, [pc, #100]	; (8000b38 <HAL_I2C_MspInit+0x84>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d12c      	bne.n	8000b30 <HAL_I2C_MspInit+0x7c>
	{
		/* USER CODE BEGIN I2C1_MspInit 0 */

		/* USER CODE END I2C1_MspInit 0 */

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <HAL_I2C_MspInit+0x88>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a17      	ldr	r2, [pc, #92]	; (8000b3c <HAL_I2C_MspInit+0x88>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <HAL_I2C_MspInit+0x88>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]
		/**I2C1 GPIO Configuration
		 PB6     ------> I2C1_SCL
		 PB9     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_9;
 8000af2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000af6:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af8:	2312      	movs	r3, #18
 8000afa:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b00:	2303      	movs	r3, #3
 8000b02:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b04:	2304      	movs	r3, #4
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	480c      	ldr	r0, [pc, #48]	; (8000b40 <HAL_I2C_MspInit+0x8c>)
 8000b10:	f000 ff36 	bl	8001980 <HAL_GPIO_Init>

		/* Peripheral clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <HAL_I2C_MspInit+0x88>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1c:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <HAL_I2C_MspInit+0x88>)
 8000b1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b22:	6413      	str	r3, [r2, #64]	; 0x40
 8000b24:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <HAL_I2C_MspInit+0x88>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
		/* USER CODE BEGIN I2C1_MspInit 1 */

		/* USER CODE END I2C1_MspInit 1 */
	}

}
 8000b30:	bf00      	nop
 8000b32:	3728      	adds	r7, #40	; 0x28
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40005400 	.word	0x40005400
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020400 	.word	0x40020400

08000b44 <HAL_TIM_Base_MspInit>:
 * This function configures the hardware resources used in this example
 * @param htim_base: TIM_Base handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim_base)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	if (htim_base->Instance == TIM1)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a22      	ldr	r2, [pc, #136]	; (8000bdc <HAL_TIM_Base_MspInit+0x98>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d13d      	bne.n	8000bd2 <HAL_TIM_Base_MspInit+0x8e>
	{
		/* USER CODE BEGIN TIM1_MspInit 0 */

		/* USER CODE END TIM1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <HAL_TIM_Base_MspInit+0x9c>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	4a20      	ldr	r2, [pc, #128]	; (8000be0 <HAL_TIM_Base_MspInit+0x9c>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6453      	str	r3, [r2, #68]	; 0x44
 8000b66:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <HAL_TIM_Base_MspInit+0x9c>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]

		/* TIM1 DMA Init */
		/* TIM1_CH1 Init */
		hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000b72:	4b1c      	ldr	r3, [pc, #112]	; (8000be4 <HAL_TIM_Base_MspInit+0xa0>)
 8000b74:	4a1c      	ldr	r2, [pc, #112]	; (8000be8 <HAL_TIM_Base_MspInit+0xa4>)
 8000b76:	601a      	str	r2, [r3, #0]
		hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000b78:	4b1a      	ldr	r3, [pc, #104]	; (8000be4 <HAL_TIM_Base_MspInit+0xa0>)
 8000b7a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000b7e:	605a      	str	r2, [r3, #4]
		hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b80:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <HAL_TIM_Base_MspInit+0xa0>)
 8000b82:	2240      	movs	r2, #64	; 0x40
 8000b84:	609a      	str	r2, [r3, #8]
		hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b86:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <HAL_TIM_Base_MspInit+0xa0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	60da      	str	r2, [r3, #12]
		hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b8c:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <HAL_TIM_Base_MspInit+0xa0>)
 8000b8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b92:	611a      	str	r2, [r3, #16]
		hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <HAL_TIM_Base_MspInit+0xa0>)
 8000b96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b9a:	615a      	str	r2, [r3, #20]
		hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <HAL_TIM_Base_MspInit+0xa0>)
 8000b9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ba2:	619a      	str	r2, [r3, #24]
		hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <HAL_TIM_Base_MspInit+0xa0>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
		hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <HAL_TIM_Base_MspInit+0xa0>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
		hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <HAL_TIM_Base_MspInit+0xa0>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000bb6:	480b      	ldr	r0, [pc, #44]	; (8000be4 <HAL_TIM_Base_MspInit+0xa0>)
 8000bb8:	f000 fb50 	bl	800125c <HAL_DMA_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <HAL_TIM_Base_MspInit+0x82>
		{
			Error_Handler();
 8000bc2:	f7ff ff49 	bl	8000a58 <Error_Handler>
		}

		__HAL_LINKDMA(htim_base, hdma[TIM_DMA_ID_CC1], hdma_tim1_ch1);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a06      	ldr	r2, [pc, #24]	; (8000be4 <HAL_TIM_Base_MspInit+0xa0>)
 8000bca:	625a      	str	r2, [r3, #36]	; 0x24
 8000bcc:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <HAL_TIM_Base_MspInit+0xa0>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6393      	str	r3, [r2, #56]	; 0x38
		/* USER CODE BEGIN TIM1_MspInit 1 */

		/* USER CODE END TIM1_MspInit 1 */
	}

}
 8000bd2:	bf00      	nop
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40010000 	.word	0x40010000
 8000be0:	40023800 	.word	0x40023800
 8000be4:	20000178 	.word	0x20000178
 8000be8:	40026428 	.word	0x40026428

08000bec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b088      	sub	sp, #32
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
	{ 0 };
	if (htim->Instance == TIM1)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a12      	ldr	r2, [pc, #72]	; (8000c54 <HAL_TIM_MspPostInit+0x68>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d11e      	bne.n	8000c4c <HAL_TIM_MspPostInit+0x60>
	{
		/* USER CODE BEGIN TIM1_MspPostInit 0 */

		/* USER CODE END TIM1_MspPostInit 0 */

		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <HAL_TIM_MspPostInit+0x6c>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a10      	ldr	r2, [pc, #64]	; (8000c58 <HAL_TIM_MspPostInit+0x6c>)
 8000c18:	f043 0310 	orr.w	r3, r3, #16
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <HAL_TIM_MspPostInit+0x6c>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0310 	and.w	r3, r3, #16
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68bb      	ldr	r3, [r7, #8]
		/**TIM1 GPIO Configuration
		 PE9     ------> TIM1_CH1
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c2e:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c30:	2302      	movs	r3, #2
 8000c32:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	4619      	mov	r1, r3
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <HAL_TIM_MspPostInit+0x70>)
 8000c48:	f000 fe9a 	bl	8001980 <HAL_GPIO_Init>
		/* USER CODE BEGIN TIM1_MspPostInit 1 */

		/* USER CODE END TIM1_MspPostInit 1 */
	}

}
 8000c4c:	bf00      	nop
 8000c4e:	3720      	adds	r7, #32
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40010000 	.word	0x40010000
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40021000 	.word	0x40021000

08000c60 <HAL_UART_MspInit>:
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	; 0x28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
	{ 0 };
	if (huart->Instance == USART3)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a19      	ldr	r2, [pc, #100]	; (8000ce4 <HAL_UART_MspInit+0x84>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d12c      	bne.n	8000cdc <HAL_UART_MspInit+0x7c>
	{
		/* USER CODE BEGIN USART3_MspInit 0 */

		/* USER CODE END USART3_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_USART3_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <HAL_UART_MspInit+0x88>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	4a17      	ldr	r2, [pc, #92]	; (8000ce8 <HAL_UART_MspInit+0x88>)
 8000c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c90:	6413      	str	r3, [r2, #64]	; 0x40
 8000c92:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <HAL_UART_MspInit+0x88>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <HAL_UART_MspInit+0x88>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a10      	ldr	r2, [pc, #64]	; (8000ce8 <HAL_UART_MspInit+0x88>)
 8000ca8:	f043 0308 	orr.w	r3, r3, #8
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <HAL_UART_MspInit+0x88>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0308 	and.w	r3, r3, #8
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
		/**USART3 GPIO Configuration
		 PD8     ------> USART3_TX
		 PD9     ------> USART3_RX
		 */
		GPIO_InitStruct.Pin = STLK_RX_Pin | STLK_TX_Pin;
 8000cba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cbe:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ccc:	2307      	movs	r3, #7
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <HAL_UART_MspInit+0x8c>)
 8000cd8:	f000 fe52 	bl	8001980 <HAL_GPIO_Init>
		/* USER CODE BEGIN USART3_MspInit 1 */

		/* USER CODE END USART3_MspInit 1 */
	}

}
 8000cdc:	bf00      	nop
 8000cde:	3728      	adds	r7, #40	; 0x28
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40004800 	.word	0x40004800
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020c00 	.word	0x40020c00

08000cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <NMI_Handler+0x4>

08000cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <HardFault_Handler+0x4>

08000cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <MemManage_Handler+0x4>

08000d02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d06:	e7fe      	b.n	8000d06 <BusFault_Handler+0x4>

08000d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <UsageFault_Handler+0x4>

08000d0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d3c:	f000 f938 	bl	8000fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000d48:	4802      	ldr	r0, [pc, #8]	; (8000d54 <DMA2_Stream1_IRQHandler+0x10>)
 8000d4a:	f000 fbaf 	bl	80014ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000178 	.word	0x20000178

08000d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <SystemInit+0x20>)
 8000d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d62:	4a05      	ldr	r2, [pc, #20]	; (8000d78 <SystemInit+0x20>)
 8000d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d80:	f7ff ffea 	bl	8000d58 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d84:	480c      	ldr	r0, [pc, #48]	; (8000db8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d86:	490d      	ldr	r1, [pc, #52]	; (8000dbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d88:	4a0d      	ldr	r2, [pc, #52]	; (8000dc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d8c:	e002      	b.n	8000d94 <LoopCopyDataInit>

08000d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d92:	3304      	adds	r3, #4

08000d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d98:	d3f9      	bcc.n	8000d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d9c:	4c0a      	ldr	r4, [pc, #40]	; (8000dc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da0:	e001      	b.n	8000da6 <LoopFillZerobss>

08000da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da4:	3204      	adds	r2, #4

08000da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da8:	d3fb      	bcc.n	8000da2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000daa:	f005 fa1f 	bl	80061ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dae:	f7ff fba3 	bl	80004f8 <main>
  bx  lr    
 8000db2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000db4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dbc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000dc0:	080063e0 	.word	0x080063e0
  ldr r2, =_sbss
 8000dc4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000dc8:	200005e8 	.word	0x200005e8

08000dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC_IRQHandler>
	...

08000dd0 <BSP_LED_Init>:
 *     @arg  LED1
 *     @arg  LED2
 *     @arg  LED3
 */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	; 0x28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Enable the GPIO_LED Clock */
	LEDx_GPIO_CLK_ENABLE(Led);
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d10e      	bne.n	8000dfe <BSP_LED_Init+0x2e>
 8000de0:	2300      	movs	r3, #0
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <BSP_LED_Init+0x94>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de8:	4a1e      	ldr	r2, [pc, #120]	; (8000e64 <BSP_LED_Init+0x94>)
 8000dea:	f043 0302 	orr.w	r3, r3, #2
 8000dee:	6313      	str	r3, [r2, #48]	; 0x30
 8000df0:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <BSP_LED_Init+0x94>)
 8000df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	e00d      	b.n	8000e1a <BSP_LED_Init+0x4a>
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <BSP_LED_Init+0x94>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a17      	ldr	r2, [pc, #92]	; (8000e64 <BSP_LED_Init+0x94>)
 8000e08:	f043 0302 	orr.w	r3, r3, #2
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <BSP_LED_Init+0x94>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]

	/* Configure the GPIO_LED pin */
	GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <BSP_LED_Init+0x98>)
 8000e1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e22:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e24:	2301      	movs	r3, #1
 8000e26:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	623b      	str	r3, [r7, #32]

	HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4a0e      	ldr	r2, [pc, #56]	; (8000e6c <BSP_LED_Init+0x9c>)
 8000e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e38:	f107 0214 	add.w	r2, r7, #20
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 fd9e 	bl	8001980 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	4a09      	ldr	r2, [pc, #36]	; (8000e6c <BSP_LED_Init+0x9c>)
 8000e48:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	4a06      	ldr	r2, [pc, #24]	; (8000e68 <BSP_LED_Init+0x98>)
 8000e50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e54:	2200      	movs	r2, #0
 8000e56:	4619      	mov	r1, r3
 8000e58:	f000 ff3e 	bl	8001cd8 <HAL_GPIO_WritePin>
}
 8000e5c:	bf00      	nop
 8000e5e:	3728      	adds	r7, #40	; 0x28
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40023800 	.word	0x40023800
 8000e68:	080063c0 	.word	0x080063c0
 8000e6c:	20000004 	.word	0x20000004

08000e70 <BSP_LED_On>:
 * @param  Led: Specifies the Led to be set on. 
 *   This parameter can be one of following parameters:
 *     @arg LED2
 */
void BSP_LED_On(Led_TypeDef Led)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	4a07      	ldr	r2, [pc, #28]	; (8000e9c <BSP_LED_On+0x2c>)
 8000e7e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	4a06      	ldr	r2, [pc, #24]	; (8000ea0 <BSP_LED_On+0x30>)
 8000e86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f000 ff23 	bl	8001cd8 <HAL_GPIO_WritePin>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000004 	.word	0x20000004
 8000ea0:	080063c0 	.word	0x080063c0

08000ea4 <BSP_LED_Off>:
 *     @arg  LED1
 *     @arg  LED2
 *     @arg  LED3
 */
void BSP_LED_Off(Led_TypeDef Led)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <BSP_LED_Off+0x2c>)
 8000eb2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <BSP_LED_Off+0x30>)
 8000eba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f000 ff09 	bl	8001cd8 <HAL_GPIO_WritePin>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000004 	.word	0x20000004
 8000ed4:	080063c0 	.word	0x080063c0

08000ed8 <BSP_LED_Toggle>:
 *     @arg  LED1
 *     @arg  LED2
 *     @arg  LED3 
 */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <BSP_LED_Toggle+0x2c>)
 8000ee6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	4906      	ldr	r1, [pc, #24]	; (8000f08 <BSP_LED_Toggle+0x30>)
 8000eee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4610      	mov	r0, r2
 8000ef6:	f000 ff08 	bl	8001d0a <HAL_GPIO_TogglePin>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000004 	.word	0x20000004
 8000f08:	080063c0 	.word	0x080063c0

08000f0c <HAL_Init>:
 *         need to ensure that the SysTick time base is always set to 1 millisecond
 *         to have correct HAL operation.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	/* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
	__HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <HAL_Init+0x40>)
 8000f16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
	__HAL_FLASH_DATA_CACHE_ENABLE();
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <HAL_Init+0x40>)
 8000f22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <HAL_Init+0x40>)
 8000f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

	/* Set Interrupt Group Priority */
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f34:	2003      	movs	r0, #3
 8000f36:	f000 f94f 	bl	80011d8 <HAL_NVIC_SetPriorityGrouping>

	/* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
	HAL_InitTick(TICK_INT_PRIORITY);
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f000 f808 	bl	8000f50 <HAL_InitTick>

	/* Init the low level hardware */
	HAL_MspInit();
 8000f40:	f7ff fd90 	bl	8000a64 <HAL_MspInit>

	/* Return function status */
	return HAL_OK;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40023c00 	.word	0x40023c00

08000f50 <HAL_InitTick>:
 *       implementation  in user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	/* Configure the SysTick to have interrupt in 1ms time basis*/
	if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <HAL_InitTick+0x54>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_InitTick+0x58>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4619      	mov	r1, r3
 8000f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 f967 	bl	8001242 <HAL_SYSTICK_Config>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_InitTick+0x2e>
	{
		return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e00e      	b.n	8000f9c <HAL_InitTick+0x4c>
	}

	/* Configure the SysTick IRQ priority */
	if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b0f      	cmp	r3, #15
 8000f82:	d80a      	bhi.n	8000f9a <HAL_InitTick+0x4a>
	{
		HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f84:	2200      	movs	r2, #0
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	f000 f92f 	bl	80011ee <HAL_NVIC_SetPriority>
		uwTickPrio = TickPriority;
 8000f90:	4a06      	ldr	r2, [pc, #24]	; (8000fac <HAL_InitTick+0x5c>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
	{
		return HAL_ERROR;
	}

	/* Return function status */
	return HAL_OK;
 8000f96:	2300      	movs	r3, #0
 8000f98:	e000      	b.n	8000f9c <HAL_InitTick+0x4c>
		return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	20000014 	.word	0x20000014
 8000fac:	20000010 	.word	0x20000010

08000fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
	uwTick += uwTickFreq;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_IncTick+0x20>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_IncTick+0x24>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <HAL_IncTick+0x24>)
 8000fc2:	6013      	str	r3, [r2, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000014 	.word	0x20000014
 8000fd4:	20000044 	.word	0x20000044

08000fd8 <HAL_GetTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
	return uwTick;
 8000fdc:	4b03      	ldr	r3, [pc, #12]	; (8000fec <HAL_GetTick+0x14>)
 8000fde:	681b      	ldr	r3, [r3, #0]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000044 	.word	0x20000044

08000ff0 <HAL_Delay>:
 *       implementations in user file.
 * @param Delay specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 8000ff8:	f7ff ffee 	bl	8000fd8 <HAL_GetTick>
 8000ffc:	60b8      	str	r0, [r7, #8]
	uint32_t wait = Delay;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	60fb      	str	r3, [r7, #12]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001008:	d005      	beq.n	8001016 <HAL_Delay+0x26>
	{
		wait += (uint32_t) (uwTickFreq);
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <HAL_Delay+0x44>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4413      	add	r3, r2
 8001014:	60fb      	str	r3, [r7, #12]
	}

	while ((HAL_GetTick() - tickstart) < wait)
 8001016:	bf00      	nop
 8001018:	f7ff ffde 	bl	8000fd8 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	429a      	cmp	r2, r3
 8001026:	d8f7      	bhi.n	8001018 <HAL_Delay+0x28>
	{
	}
}
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000014 	.word	0x20000014

08001038 <__NVIC_SetPriorityGrouping>:
	 In case of a conflict between priority grouping and available
	 priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
	 \param [in]      PriorityGroup  Priority grouping field.
	 */
	__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
	{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
		uint32_t reg_value;
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	60fb      	str	r3, [r7, #12]

		reg_value = SCB->AIRCR; /* read old register configuration    */
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <__NVIC_SetPriorityGrouping+0x44>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	60bb      	str	r3, [r7, #8]
		reg_value &= ~((uint32_t) (SCB_AIRCR_VECTKEY_Msk
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001054:	4013      	ands	r3, r2
 8001056:	60bb      	str	r3, [r7, #8]
				| SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
		reg_value = (reg_value | ((uint32_t) 0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
				| (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)); /* Insert write key and priority group */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	021a      	lsls	r2, r3, #8
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	4313      	orrs	r3, r2
		reg_value = (reg_value | ((uint32_t) 0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
 8001060:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001068:	60bb      	str	r3, [r7, #8]
		SCB->AIRCR = reg_value;
 800106a:	4a04      	ldr	r2, [pc, #16]	; (800107c <__NVIC_SetPriorityGrouping+0x44>)
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	60d3      	str	r3, [r2, #12]
	}
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_GetPriorityGrouping>:
	 \brief   Get Priority Grouping
	 \details Reads the priority grouping field from the NVIC Interrupt Controller.
	 \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
	 */
	__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
	{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
		return ((uint32_t) ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk)
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <__NVIC_GetPriorityGrouping+0x18>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	0a1b      	lsrs	r3, r3, #8
 800108a:	f003 0307 	and.w	r3, r3, #7
				>> SCB_AIRCR_PRIGROUP_Pos));
	}
 800108e:	4618      	mov	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <__NVIC_EnableIRQ>:
	 \details Enables a device specific interrupt in the NVIC interrupt controller.
	 \param [in]      IRQn  Device specific interrupt number.
	 \note    IRQn must not be negative.
	 */
	__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
	{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	db0b      	blt.n	80010c6 <__NVIC_EnableIRQ+0x2a>
		{
			__COMPILER_BARRIER();
			NVIC->ISER[(((uint32_t) IRQn) >> 5UL)] = (uint32_t) (1UL
					<< (((uint32_t) IRQn) & 0x1FUL));
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	f003 021f 	and.w	r2, r3, #31
			NVIC->ISER[(((uint32_t) IRQn) >> 5UL)] = (uint32_t) (1UL
 80010b4:	4907      	ldr	r1, [pc, #28]	; (80010d4 <__NVIC_EnableIRQ+0x38>)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	095b      	lsrs	r3, r3, #5
 80010bc:	2001      	movs	r0, #1
 80010be:	fa00 f202 	lsl.w	r2, r0, r2
 80010c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			__COMPILER_BARRIER();
		}
	}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000e100 	.word	0xe000e100

080010d8 <__NVIC_SetPriority>:
	 \param [in]      IRQn  Interrupt number.
	 \param [in]  priority  Priority to set.
	 \note    The priority cannot be set for every processor exception.
	 */
	__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
	{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	6039      	str	r1, [r7, #0]
 80010e2:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0)
 80010e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	db0a      	blt.n	8001102 <__NVIC_SetPriority+0x2a>
		{
			NVIC->IP[((uint32_t) IRQn)] = (uint8_t) ((priority
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	490c      	ldr	r1, [pc, #48]	; (8001124 <__NVIC_SetPriority+0x4c>)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	0112      	lsls	r2, r2, #4
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	440b      	add	r3, r1
 80010fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
		else
		{
			SCB->SHP[(((uint32_t) IRQn) & 0xFUL) - 4UL] = (uint8_t) ((priority
					<< (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL);
		}
	}
 8001100:	e00a      	b.n	8001118 <__NVIC_SetPriority+0x40>
			SCB->SHP[(((uint32_t) IRQn) & 0xFUL) - 4UL] = (uint8_t) ((priority
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4908      	ldr	r1, [pc, #32]	; (8001128 <__NVIC_SetPriority+0x50>)
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	f003 030f 	and.w	r3, r3, #15
 800110e:	3b04      	subs	r3, #4
 8001110:	0112      	lsls	r2, r2, #4
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	440b      	add	r3, r1
 8001116:	761a      	strb	r2, [r3, #24]
	}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000e100 	.word	0xe000e100
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <NVIC_EncodePriority>:
	 \param [in]       SubPriority  Subpriority value (starting from 0).
	 \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
	 */
	__STATIC_INLINE uint32_t NVIC_EncodePriority(uint32_t PriorityGroup,
			uint32_t PreemptPriority, uint32_t SubPriority)
	{
 800112c:	b480      	push	{r7}
 800112e:	b089      	sub	sp, #36	; 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	61fb      	str	r3, [r7, #28]
		uint32_t PreemptPriorityBits;
		uint32_t SubPriorityBits;

		PreemptPriorityBits =
				((7UL - PriorityGroupTmp) > (uint32_t) (__NVIC_PRIO_BITS)) ?
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	f1c3 0307 	rsb	r3, r3, #7
		PreemptPriorityBits =
 8001146:	2b04      	cmp	r3, #4
 8001148:	bf28      	it	cs
 800114a:	2304      	movcs	r3, #4
 800114c:	61bb      	str	r3, [r7, #24]
						(uint32_t) (__NVIC_PRIO_BITS) :
						(uint32_t) (7UL - PriorityGroupTmp);
		SubPriorityBits =
				((PriorityGroupTmp + (uint32_t) (__NVIC_PRIO_BITS))
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3304      	adds	r3, #4
						< (uint32_t) 7UL) ?
						(uint32_t) 0UL :
 8001152:	2b06      	cmp	r3, #6
 8001154:	d902      	bls.n	800115c <NVIC_EncodePriority+0x30>
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3b03      	subs	r3, #3
 800115a:	e000      	b.n	800115e <NVIC_EncodePriority+0x32>
 800115c:	2300      	movs	r3, #0
		SubPriorityBits =
 800115e:	617b      	str	r3, [r7, #20]
						(uint32_t) ((PriorityGroupTmp - 7UL)
								+ (uint32_t) (__NVIC_PRIO_BITS));

		return (((PreemptPriority
				& (uint32_t) ((1UL << (PreemptPriorityBits)) - 1UL))
 8001160:	f04f 32ff 	mov.w	r2, #4294967295
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43da      	mvns	r2, r3
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	401a      	ands	r2, r3
				<< SubPriorityBits)
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	409a      	lsls	r2, r3
				| ((SubPriority & (uint32_t) ((1UL << (SubPriorityBits)) - 1UL))));
 8001174:	f04f 31ff 	mov.w	r1, #4294967295
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	fa01 f303 	lsl.w	r3, r1, r3
 800117e:	43d9      	mvns	r1, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	400b      	ands	r3, r1
 8001184:	4313      	orrs	r3, r2
	}
 8001186:	4618      	mov	r0, r3
 8001188:	3724      	adds	r7, #36	; 0x24
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011a4:	d301      	bcc.n	80011aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00f      	b.n	80011ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011aa:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <SysTick_Config+0x40>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011b2:	210f      	movs	r1, #15
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	f7ff ff8e 	bl	80010d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <SysTick_Config+0x40>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c2:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <SysTick_Config+0x40>)
 80011c4:	2207      	movs	r2, #7
 80011c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	e000e010 	.word	0xe000e010

080011d8 <HAL_NVIC_SetPriorityGrouping>:
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
 *         The pending IRQ priority will be managed only by the subpriority. 
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ff29 	bl	8001038 <__NVIC_SetPriorityGrouping>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_NVIC_SetPriority>:
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b086      	sub	sp, #24
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	4603      	mov	r3, r0
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
 80011fa:	73fb      	strb	r3, [r7, #15]
	uint32_t prioritygroup = 0x00U;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]

	/* Check the parameters */
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

	prioritygroup = NVIC_GetPriorityGrouping();
 8001200:	f7ff ff3e 	bl	8001080 <__NVIC_GetPriorityGrouping>
 8001204:	6178      	str	r0, [r7, #20]

	NVIC_SetPriority(IRQn,
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	68b9      	ldr	r1, [r7, #8]
 800120a:	6978      	ldr	r0, [r7, #20]
 800120c:	f7ff ff8e 	bl	800112c <NVIC_EncodePriority>
 8001210:	4602      	mov	r2, r0
 8001212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff5d 	bl	80010d8 <__NVIC_SetPriority>
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800121e:	bf00      	nop
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_NVIC_EnableIRQ>:
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
 * @retval None
 */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	71fb      	strb	r3, [r7, #7]
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Enable interrupt */
	NVIC_EnableIRQ(IRQn);
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff31 	bl	800109c <__NVIC_EnableIRQ>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_SYSTICK_Config>:
 * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
	return SysTick_Config(TicksNumb);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ffa2 	bl	8001194 <SysTick_Config>
 8001250:	4603      	mov	r3, r0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <HAL_DMA_Init>:
 * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA Stream.  
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	uint32_t tmp = 0U;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
	uint32_t tickstart = HAL_GetTick();
 8001268:	f7ff feb6 	bl	8000fd8 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]
	DMA_Base_Registers *regs;

	/* Check the DMA peripheral state */
	if (hdma == NULL)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d101      	bne.n	8001278 <HAL_DMA_Init+0x1c>
	{
		return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e099      	b.n	80013ac <HAL_DMA_Init+0x150>
		assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
		assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
	}

	/* Change DMA peripheral state */
	hdma->State = HAL_DMA_STATE_BUSY;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2202      	movs	r2, #2
 800127c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	/* Allocate lock resource */
	__HAL_UNLOCK(hdma);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	/* Disable the peripheral */
	__HAL_DMA_DISABLE(hdma);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0201 	bic.w	r2, r2, #1
 8001296:	601a      	str	r2, [r3, #0]

	/* Check if the DMA Stream is effectively disabled */
	while ((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001298:	e00f      	b.n	80012ba <HAL_DMA_Init+0x5e>
	{
		/* Check for the Timeout */
		if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800129a:	f7ff fe9d 	bl	8000fd8 <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b05      	cmp	r3, #5
 80012a6:	d908      	bls.n	80012ba <HAL_DMA_Init+0x5e>
		{
			/* Update error code */
			hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2220      	movs	r2, #32
 80012ac:	655a      	str	r2, [r3, #84]	; 0x54

			/* Change the DMA state */
			hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2203      	movs	r2, #3
 80012b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

			return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e078      	b.n	80013ac <HAL_DMA_Init+0x150>
	while ((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1e8      	bne.n	800129a <HAL_DMA_Init+0x3e>
		}
	}

	/* Get the CR register value */
	tmp = hdma->Instance->CR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	617b      	str	r3, [r7, #20]

	/* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
	tmp &= ((uint32_t) ~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST |
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	4b38      	ldr	r3, [pc, #224]	; (80013b4 <HAL_DMA_Init+0x158>)
 80012d4:	4013      	ands	r3, r2
 80012d6:	617b      	str	r3, [r7, #20]
	DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE |
	DMA_SxCR_MINC | DMA_SxCR_PINC | DMA_SxCR_CIRC |
	DMA_SxCR_DIR | DMA_SxCR_CT | DMA_SxCR_DBM));

	/* Prepare the DMA Stream configuration */
	tmp |= hdma->Init.Channel | hdma->Init.Direction | hdma->Init.PeriphInc
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	431a      	orrs	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	431a      	orrs	r2, r3
			| hdma->Init.MemInc | hdma->Init.PeriphDataAlignment
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	431a      	orrs	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	431a      	orrs	r2, r3
			| hdma->Init.MemDataAlignment | hdma->Init.Mode
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	431a      	orrs	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	431a      	orrs	r2, r3
			| hdma->Init.Priority;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	4313      	orrs	r3, r2
	tmp |= hdma->Init.Channel | hdma->Init.Direction | hdma->Init.PeriphInc
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	4313      	orrs	r3, r2
 800130a:	617b      	str	r3, [r7, #20]

	/* the Memory burst and peripheral burst are not used when the FIFO is disabled */
	if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001310:	2b04      	cmp	r3, #4
 8001312:	d107      	bne.n	8001324 <HAL_DMA_Init+0xc8>
	{
		/* Get memory burst and peripheral burst */
		tmp |= hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	4313      	orrs	r3, r2
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	4313      	orrs	r3, r2
 8001322:	617b      	str	r3, [r7, #20]
	}

	/* Write to DMA Stream CR register */
	hdma->Instance->CR = tmp;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	601a      	str	r2, [r3, #0]

	/* Get the FCR register value */
	tmp = hdma->Instance->FCR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	617b      	str	r3, [r7, #20]

	/* Clear Direct mode and FIFO threshold bits */
	tmp &= (uint32_t) ~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	f023 0307 	bic.w	r3, r3, #7
 800133a:	617b      	str	r3, [r7, #20]

	/* Prepare the DMA Stream FIFO configuration */
	tmp |= hdma->Init.FIFOMode;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001340:	697a      	ldr	r2, [r7, #20]
 8001342:	4313      	orrs	r3, r2
 8001344:	617b      	str	r3, [r7, #20]

	/* The FIFO threshold is not used when the FIFO mode is disabled */
	if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134a:	2b04      	cmp	r3, #4
 800134c:	d117      	bne.n	800137e <HAL_DMA_Init+0x122>
	{
		/* Get the FIFO threshold */
		tmp |= hdma->Init.FIFOThreshold;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	4313      	orrs	r3, r2
 8001356:	617b      	str	r3, [r7, #20]

		/* Check compatibility between FIFO threshold level and size of the memory burst */
		/* for INCR4, INCR8, INCR16 bursts */
		if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135c:	2b00      	cmp	r3, #0
 800135e:	d00e      	beq.n	800137e <HAL_DMA_Init+0x122>
		{
			if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 fa91 	bl	8001888 <DMA_CheckFifoParam>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d008      	beq.n	800137e <HAL_DMA_Init+0x122>
			{
				/* Update error code */
				hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2240      	movs	r2, #64	; 0x40
 8001370:	655a      	str	r2, [r3, #84]	; 0x54

				/* Change the DMA state */
				hdma->State = HAL_DMA_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

				return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e016      	b.n	80013ac <HAL_DMA_Init+0x150>
			}
		}
	}

	/* Write to DMA Stream FCR */
	hdma->Instance->FCR = tmp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	615a      	str	r2, [r3, #20]

	/* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
	 DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
	regs = (DMA_Base_Registers*) DMA_CalcBaseAndBitshift(hdma);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f000 fa48 	bl	800181c <DMA_CalcBaseAndBitshift>
 800138c:	4603      	mov	r3, r0
 800138e:	60fb      	str	r3, [r7, #12]

	/* Clear all interrupt flags */
	regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001394:	223f      	movs	r2, #63	; 0x3f
 8001396:	409a      	lsls	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	609a      	str	r2, [r3, #8]

	/* Initialize the error code */
	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	655a      	str	r2, [r3, #84]	; 0x54

	/* Initialize the DMA state */
	hdma->State = HAL_DMA_STATE_READY;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	return HAL_OK;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	f010803f 	.word	0xf010803f

080013b8 <HAL_DMA_Start_IT>:
 * @param  DataLength The length of data to be transferred from source to destination
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress,
		uint32_t DstAddress, uint32_t DataLength)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
 80013c4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80013c6:	2300      	movs	r3, #0
 80013c8:	75fb      	strb	r3, [r7, #23]

	/* calculate DMA base and stream number */
	DMA_Base_Registers *regs = (DMA_Base_Registers*) hdma->StreamBaseAddress;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ce:	613b      	str	r3, [r7, #16]

	/* Check the parameters */
	assert_param(IS_DMA_BUFFER_SIZE(DataLength));

	/* Process locked */
	__HAL_LOCK(hdma);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d101      	bne.n	80013de <HAL_DMA_Start_IT+0x26>
 80013da:	2302      	movs	r3, #2
 80013dc:	e040      	b.n	8001460 <HAL_DMA_Start_IT+0xa8>
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2201      	movs	r2, #1
 80013e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	if (HAL_DMA_STATE_READY == hdma->State)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d12f      	bne.n	8001452 <HAL_DMA_Start_IT+0x9a>
	{
		/* Change DMA peripheral state */
		hdma->State = HAL_DMA_STATE_BUSY;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2202      	movs	r2, #2
 80013f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

		/* Initialize the error code */
		hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2200      	movs	r2, #0
 80013fe:	655a      	str	r2, [r3, #84]	; 0x54

		/* Configure the source, destination address and the data length */
		DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	68b9      	ldr	r1, [r7, #8]
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f000 f9da 	bl	80017c0 <DMA_SetConfig>

		/* Clear all interrupt flags at correct offset within the register */
		regs->IFCR = 0x3FU << hdma->StreamIndex;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001410:	223f      	movs	r2, #63	; 0x3f
 8001412:	409a      	lsls	r2, r3
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	609a      	str	r2, [r3, #8]

		/* Enable Common interrupts*/
		hdma->Instance->CR |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f042 0216 	orr.w	r2, r2, #22
 8001426:	601a      	str	r2, [r3, #0]

		if (hdma->XferHalfCpltCallback != NULL)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	2b00      	cmp	r3, #0
 800142e:	d007      	beq.n	8001440 <HAL_DMA_Start_IT+0x88>
		{
			hdma->Instance->CR |= DMA_IT_HT;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f042 0208 	orr.w	r2, r2, #8
 800143e:	601a      	str	r2, [r3, #0]
		}

		/* Enable the Peripheral */
		__HAL_DMA_ENABLE(hdma);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f042 0201 	orr.w	r2, r2, #1
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	e005      	b.n	800145e <HAL_DMA_Start_IT+0xa6>
	}
	else
	{
		/* Process unlocked */
		__HAL_UNLOCK(hdma);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		/* Return error status */
		status = HAL_BUSY;
 800145a:	2302      	movs	r3, #2
 800145c:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 800145e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <HAL_DMA_Abort_IT>:
 * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
 *                 the configuration information for the specified DMA Stream.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	if (hdma->State != HAL_DMA_STATE_BUSY)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d004      	beq.n	8001486 <HAL_DMA_Abort_IT+0x1e>
	{
		hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2280      	movs	r2, #128	; 0x80
 8001480:	655a      	str	r2, [r3, #84]	; 0x54
		return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e00c      	b.n	80014a0 <HAL_DMA_Abort_IT+0x38>
	}
	else
	{
		/* Set Abort State  */
		hdma->State = HAL_DMA_STATE_ABORT;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2205      	movs	r2, #5
 800148a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

		/* Disable the stream */
		__HAL_DMA_DISABLE(hdma);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 0201 	bic.w	r2, r2, #1
 800149c:	601a      	str	r2, [r3, #0]
	}

	return HAL_OK;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <HAL_DMA_IRQHandler>:
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA Stream.  
 * @retval None
 */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	uint32_t tmpisr;
	__IO uint32_t count = 0U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60bb      	str	r3, [r7, #8]
	uint32_t timeout = SystemCoreClock / 9600U;
 80014b8:	4b8e      	ldr	r3, [pc, #568]	; (80016f4 <HAL_DMA_IRQHandler+0x248>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a8e      	ldr	r2, [pc, #568]	; (80016f8 <HAL_DMA_IRQHandler+0x24c>)
 80014be:	fba2 2303 	umull	r2, r3, r2, r3
 80014c2:	0a9b      	lsrs	r3, r3, #10
 80014c4:	617b      	str	r3, [r7, #20]

	/* calculate DMA base and stream number */
	DMA_Base_Registers *regs = (DMA_Base_Registers*) hdma->StreamBaseAddress;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ca:	613b      	str	r3, [r7, #16]

	tmpisr = regs->ISR;
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	60fb      	str	r3, [r7, #12]

	/* Transfer Error Interrupt management ***************************************/
	if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d6:	2208      	movs	r2, #8
 80014d8:	409a      	lsls	r2, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4013      	ands	r3, r2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d01a      	beq.n	8001518 <HAL_DMA_IRQHandler+0x6c>
	{
		if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d013      	beq.n	8001518 <HAL_DMA_IRQHandler+0x6c>
		{
			/* Disable the transfer error interrupt */
			hdma->Instance->CR &= ~(DMA_IT_TE);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 0204 	bic.w	r2, r2, #4
 80014fe:	601a      	str	r2, [r3, #0]

			/* Clear the transfer error flag */
			regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001504:	2208      	movs	r2, #8
 8001506:	409a      	lsls	r2, r3
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	609a      	str	r2, [r3, #8]

			/* Update error code */
			hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001510:	f043 0201 	orr.w	r2, r3, #1
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	655a      	str	r2, [r3, #84]	; 0x54
		}
	}
	/* FIFO Error Interrupt management ******************************************/
	if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800151c:	2201      	movs	r2, #1
 800151e:	409a      	lsls	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4013      	ands	r3, r2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d012      	beq.n	800154e <HAL_DMA_IRQHandler+0xa2>
	{
		if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00b      	beq.n	800154e <HAL_DMA_IRQHandler+0xa2>
		{
			/* Clear the FIFO error flag */
			regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800153a:	2201      	movs	r2, #1
 800153c:	409a      	lsls	r2, r3
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	609a      	str	r2, [r3, #8]

			/* Update error code */
			hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001546:	f043 0202 	orr.w	r2, r3, #2
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	655a      	str	r2, [r3, #84]	; 0x54
		}
	}
	/* Direct Mode Error Interrupt management ***********************************/
	if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001552:	2204      	movs	r2, #4
 8001554:	409a      	lsls	r2, r3
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	4013      	ands	r3, r2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d012      	beq.n	8001584 <HAL_DMA_IRQHandler+0xd8>
	{
		if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00b      	beq.n	8001584 <HAL_DMA_IRQHandler+0xd8>
		{
			/* Clear the direct mode error flag */
			regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001570:	2204      	movs	r2, #4
 8001572:	409a      	lsls	r2, r3
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	609a      	str	r2, [r3, #8]

			/* Update error code */
			hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800157c:	f043 0204 	orr.w	r2, r3, #4
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	655a      	str	r2, [r3, #84]	; 0x54
		}
	}
	/* Half Transfer Complete Interrupt management ******************************/
	if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001588:	2210      	movs	r2, #16
 800158a:	409a      	lsls	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4013      	ands	r3, r2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d043      	beq.n	800161c <HAL_DMA_IRQHandler+0x170>
	{
		if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d03c      	beq.n	800161c <HAL_DMA_IRQHandler+0x170>
		{
			/* Clear the half transfer complete flag */
			regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a6:	2210      	movs	r2, #16
 80015a8:	409a      	lsls	r2, r3
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	609a      	str	r2, [r3, #8]

			/* Multi_Buffering mode enabled */
			if (((hdma->Instance->CR) & (uint32_t) (DMA_SxCR_DBM)) != RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d018      	beq.n	80015ee <HAL_DMA_IRQHandler+0x142>
			{
				/* Current memory buffer used is Memory 0 */
				if ((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d108      	bne.n	80015dc <HAL_DMA_IRQHandler+0x130>
				{
					if (hdma->XferHalfCpltCallback != NULL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d024      	beq.n	800161c <HAL_DMA_IRQHandler+0x170>
					{
						/* Half transfer callback */
						hdma->XferHalfCpltCallback(hdma);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	4798      	blx	r3
 80015da:	e01f      	b.n	800161c <HAL_DMA_IRQHandler+0x170>
					}
				}
				/* Current memory buffer used is Memory 1 */
				else
				{
					if (hdma->XferM1HalfCpltCallback != NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d01b      	beq.n	800161c <HAL_DMA_IRQHandler+0x170>
					{
						/* Half transfer callback */
						hdma->XferM1HalfCpltCallback(hdma);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	4798      	blx	r3
 80015ec:	e016      	b.n	800161c <HAL_DMA_IRQHandler+0x170>
				}
			}
			else
			{
				/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
				if ((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d107      	bne.n	800160c <HAL_DMA_IRQHandler+0x160>
				{
					/* Disable the half transfer interrupt */
					hdma->Instance->CR &= ~(DMA_IT_HT);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 0208 	bic.w	r2, r2, #8
 800160a:	601a      	str	r2, [r3, #0]
				}

				if (hdma->XferHalfCpltCallback != NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_DMA_IRQHandler+0x170>
				{
					/* Half transfer callback */
					hdma->XferHalfCpltCallback(hdma);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	4798      	blx	r3
				}
			}
		}
	}
	/* Transfer Complete Interrupt management ***********************************/
	if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001620:	2220      	movs	r2, #32
 8001622:	409a      	lsls	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4013      	ands	r3, r2
 8001628:	2b00      	cmp	r3, #0
 800162a:	f000 808f 	beq.w	800174c <HAL_DMA_IRQHandler+0x2a0>
	{
		if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0310 	and.w	r3, r3, #16
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 8087 	beq.w	800174c <HAL_DMA_IRQHandler+0x2a0>
		{
			/* Clear the transfer complete flag */
			regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001642:	2220      	movs	r2, #32
 8001644:	409a      	lsls	r2, r3
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	609a      	str	r2, [r3, #8]

			if (HAL_DMA_STATE_ABORT == hdma->State)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b05      	cmp	r3, #5
 8001654:	d136      	bne.n	80016c4 <HAL_DMA_IRQHandler+0x218>
			{
				/* Disable all the transfer interrupts */
				hdma->Instance->CR &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 0216 	bic.w	r2, r2, #22
 8001664:	601a      	str	r2, [r3, #0]
				hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	695a      	ldr	r2, [r3, #20]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001674:	615a      	str	r2, [r3, #20]

				if ((hdma->XferHalfCpltCallback != NULL)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	2b00      	cmp	r3, #0
 800167c:	d103      	bne.n	8001686 <HAL_DMA_IRQHandler+0x1da>
						|| (hdma->XferM1HalfCpltCallback != NULL))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001682:	2b00      	cmp	r3, #0
 8001684:	d007      	beq.n	8001696 <HAL_DMA_IRQHandler+0x1ea>
				{
					hdma->Instance->CR &= ~(DMA_IT_HT);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 0208 	bic.w	r2, r2, #8
 8001694:	601a      	str	r2, [r3, #0]
				}

				/* Clear all interrupt flags at correct offset within the register */
				regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169a:	223f      	movs	r2, #63	; 0x3f
 800169c:	409a      	lsls	r2, r3
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	609a      	str	r2, [r3, #8]

				/* Change the DMA state */
				hdma->State = HAL_DMA_STATE_READY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

				/* Process Unlocked */
				__HAL_UNLOCK(hdma);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

				if (hdma->XferAbortCallback != NULL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d07e      	beq.n	80017b8 <HAL_DMA_IRQHandler+0x30c>
				{
					hdma->XferAbortCallback(hdma);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	4798      	blx	r3
				}
				return;
 80016c2:	e079      	b.n	80017b8 <HAL_DMA_IRQHandler+0x30c>
			}

			if (((hdma->Instance->CR) & (uint32_t) (DMA_SxCR_DBM)) != RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d01d      	beq.n	800170e <HAL_DMA_IRQHandler+0x262>
			{
				/* Current memory buffer used is Memory 0 */
				if ((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10d      	bne.n	80016fc <HAL_DMA_IRQHandler+0x250>
				{
					if (hdma->XferM1CpltCallback != NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d031      	beq.n	800174c <HAL_DMA_IRQHandler+0x2a0>
					{
						/* Transfer complete Callback for memory1 */
						hdma->XferM1CpltCallback(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	4798      	blx	r3
 80016f0:	e02c      	b.n	800174c <HAL_DMA_IRQHandler+0x2a0>
 80016f2:	bf00      	nop
 80016f4:	20000000 	.word	0x20000000
 80016f8:	1b4e81b5 	.word	0x1b4e81b5
					}
				}
				/* Current memory buffer used is Memory 1 */
				else
				{
					if (hdma->XferCpltCallback != NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001700:	2b00      	cmp	r3, #0
 8001702:	d023      	beq.n	800174c <HAL_DMA_IRQHandler+0x2a0>
					{
						/* Transfer complete Callback for memory0 */
						hdma->XferCpltCallback(hdma);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	4798      	blx	r3
 800170c:	e01e      	b.n	800174c <HAL_DMA_IRQHandler+0x2a0>
				}
			}
			/* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
			else
			{
				if ((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001718:	2b00      	cmp	r3, #0
 800171a:	d10f      	bne.n	800173c <HAL_DMA_IRQHandler+0x290>
				{
					/* Disable the transfer complete interrupt */
					hdma->Instance->CR &= ~(DMA_IT_TC);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 0210 	bic.w	r2, r2, #16
 800172a:	601a      	str	r2, [r3, #0]

					/* Change the DMA state */
					hdma->State = HAL_DMA_STATE_READY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

					/* Process Unlocked */
					__HAL_UNLOCK(hdma);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				}

				if (hdma->XferCpltCallback != NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <HAL_DMA_IRQHandler+0x2a0>
				{
					/* Transfer complete callback */
					hdma->XferCpltCallback(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	4798      	blx	r3
			}
		}
	}

	/* manage error case */
	if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001750:	2b00      	cmp	r3, #0
 8001752:	d032      	beq.n	80017ba <HAL_DMA_IRQHandler+0x30e>
	{
		if ((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b00      	cmp	r3, #0
 800175e:	d022      	beq.n	80017a6 <HAL_DMA_IRQHandler+0x2fa>
		{
			hdma->State = HAL_DMA_STATE_ABORT;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2205      	movs	r2, #5
 8001764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

			/* Disable the stream */
			__HAL_DMA_DISABLE(hdma);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0201 	bic.w	r2, r2, #1
 8001776:	601a      	str	r2, [r3, #0]

			do
			{
				if (++count > timeout)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	3301      	adds	r3, #1
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	429a      	cmp	r2, r3
 8001782:	d307      	bcc.n	8001794 <HAL_DMA_IRQHandler+0x2e8>
				{
					break;
				}
			} while ((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f2      	bne.n	8001778 <HAL_DMA_IRQHandler+0x2cc>
 8001792:	e000      	b.n	8001796 <HAL_DMA_IRQHandler+0x2ea>
					break;
 8001794:	bf00      	nop

			/* Change the DMA state */
			hdma->State = HAL_DMA_STATE_READY;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

			/* Process Unlocked */
			__HAL_UNLOCK(hdma);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		}

		if (hdma->XferErrorCallback != NULL)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d005      	beq.n	80017ba <HAL_DMA_IRQHandler+0x30e>
		{
			/* Transfer error callback */
			hdma->XferErrorCallback(hdma);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	4798      	blx	r3
 80017b6:	e000      	b.n	80017ba <HAL_DMA_IRQHandler+0x30e>
				return;
 80017b8:	bf00      	nop
		}
	}
}
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <DMA_SetConfig>:
 * @param  DataLength The length of data to be transferred from source to destination
 * @retval HAL status
 */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress,
		uint32_t DstAddress, uint32_t DataLength)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
 80017cc:	603b      	str	r3, [r7, #0]
	/* Clear DBM bit */
	hdma->Instance->CR &= (uint32_t) (~DMA_SxCR_DBM);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017dc:	601a      	str	r2, [r3, #0]

	/* Configure DMA Stream data length */
	hdma->Instance->NDTR = DataLength;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	605a      	str	r2, [r3, #4]

	/* Memory to Peripheral */
	if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2b40      	cmp	r3, #64	; 0x40
 80017ec:	d108      	bne.n	8001800 <DMA_SetConfig+0x40>
	{
		/* Configure DMA Stream destination address */
		hdma->Instance->PAR = DstAddress;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	609a      	str	r2, [r3, #8]

		/* Configure DMA Stream source address */
		hdma->Instance->M0AR = SrcAddress;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	60da      	str	r2, [r3, #12]
		hdma->Instance->PAR = SrcAddress;

		/* Configure DMA Stream destination address */
		hdma->Instance->M0AR = DstAddress;
	}
}
 80017fe:	e007      	b.n	8001810 <DMA_SetConfig+0x50>
		hdma->Instance->PAR = SrcAddress;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	609a      	str	r2, [r3, #8]
		hdma->Instance->M0AR = DstAddress;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	60da      	str	r2, [r3, #12]
}
 8001810:	bf00      	nop
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <DMA_CalcBaseAndBitshift>:
 * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
 *                     the configuration information for the specified DMA Stream. 
 * @retval Stream base address
 */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	uint32_t stream_number = (((uint32_t) hdma->Instance & 0xFFU) - 16U) / 24U;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	3b10      	subs	r3, #16
 800182c:	4a14      	ldr	r2, [pc, #80]	; (8001880 <DMA_CalcBaseAndBitshift+0x64>)
 800182e:	fba2 2303 	umull	r2, r3, r2, r3
 8001832:	091b      	lsrs	r3, r3, #4
 8001834:	60fb      	str	r3, [r7, #12]

	/* lookup table for necessary bitshift of flags within status registers */
	static const uint8_t flagBitshiftOffset[8U] =
	{ 0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U };
	hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001836:	4a13      	ldr	r2, [pc, #76]	; (8001884 <DMA_CalcBaseAndBitshift+0x68>)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4413      	add	r3, r2
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	65da      	str	r2, [r3, #92]	; 0x5c

	if (stream_number > 3U)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2b03      	cmp	r3, #3
 8001848:	d909      	bls.n	800185e <DMA_CalcBaseAndBitshift+0x42>
	{
		/* return pointer to HISR and HIFCR */
		hdma->StreamBaseAddress = (((uint32_t) hdma->Instance
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
				& (uint32_t) (~0x3FFU)) + 4U);
 800184e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001852:	f023 0303 	bic.w	r3, r3, #3
 8001856:	1d1a      	adds	r2, r3, #4
		hdma->StreamBaseAddress = (((uint32_t) hdma->Instance
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	659a      	str	r2, [r3, #88]	; 0x58
 800185c:	e007      	b.n	800186e <DMA_CalcBaseAndBitshift+0x52>
	}
	else
	{
		/* return pointer to LISR and LIFCR */
		hdma->StreamBaseAddress = ((uint32_t) hdma->Instance
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
				& (uint32_t) (~0x3FFU));
 8001862:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001866:	f023 0303 	bic.w	r3, r3, #3
		hdma->StreamBaseAddress = ((uint32_t) hdma->Instance
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6593      	str	r3, [r2, #88]	; 0x58
	}

	return hdma->StreamBaseAddress;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001872:	4618      	mov	r0, r3
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	aaaaaaab 	.word	0xaaaaaaab
 8001884:	080063c8 	.word	0x080063c8

08001888 <DMA_CheckFifoParam>:
 * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
 *                     the configuration information for the specified DMA Stream. 
 * @retval HAL status
 */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8001890:	2300      	movs	r3, #0
 8001892:	73fb      	strb	r3, [r7, #15]
	uint32_t tmp = hdma->Init.FIFOThreshold;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001898:	60bb      	str	r3, [r7, #8]

	/* Memory Data size equal to Byte */
	if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d11f      	bne.n	80018e2 <DMA_CheckFifoParam+0x5a>
	{
		switch (tmp)
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d856      	bhi.n	8001956 <DMA_CheckFifoParam+0xce>
 80018a8:	a201      	add	r2, pc, #4	; (adr r2, 80018b0 <DMA_CheckFifoParam+0x28>)
 80018aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ae:	bf00      	nop
 80018b0:	080018c1 	.word	0x080018c1
 80018b4:	080018d3 	.word	0x080018d3
 80018b8:	080018c1 	.word	0x080018c1
 80018bc:	08001957 	.word	0x08001957
		{
		case DMA_FIFO_THRESHOLD_1QUARTERFULL:
		case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
			if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d046      	beq.n	800195a <DMA_CheckFifoParam+0xd2>
			{
				status = HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
			}
			break;
 80018d0:	e043      	b.n	800195a <DMA_CheckFifoParam+0xd2>
		case DMA_FIFO_THRESHOLD_HALFFULL:
			if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018da:	d140      	bne.n	800195e <DMA_CheckFifoParam+0xd6>
			{
				status = HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	73fb      	strb	r3, [r7, #15]
			}
			break;
 80018e0:	e03d      	b.n	800195e <DMA_CheckFifoParam+0xd6>
			break;
		}
	}

	/* Memory Data size equal to Half-Word */
	else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018ea:	d121      	bne.n	8001930 <DMA_CheckFifoParam+0xa8>
	{
		switch (tmp)
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	d837      	bhi.n	8001962 <DMA_CheckFifoParam+0xda>
 80018f2:	a201      	add	r2, pc, #4	; (adr r2, 80018f8 <DMA_CheckFifoParam+0x70>)
 80018f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f8:	08001909 	.word	0x08001909
 80018fc:	0800190f 	.word	0x0800190f
 8001900:	08001909 	.word	0x08001909
 8001904:	08001921 	.word	0x08001921
		{
		case DMA_FIFO_THRESHOLD_1QUARTERFULL:
		case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
			status = HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	73fb      	strb	r3, [r7, #15]
			break;
 800190c:	e030      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
		case DMA_FIFO_THRESHOLD_HALFFULL:
			if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001912:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d025      	beq.n	8001966 <DMA_CheckFifoParam+0xde>
			{
				status = HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	73fb      	strb	r3, [r7, #15]
			}
			break;
 800191e:	e022      	b.n	8001966 <DMA_CheckFifoParam+0xde>
		case DMA_FIFO_THRESHOLD_FULL:
			if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001924:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001928:	d11f      	bne.n	800196a <DMA_CheckFifoParam+0xe2>
			{
				status = HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	73fb      	strb	r3, [r7, #15]
			}
			break;
 800192e:	e01c      	b.n	800196a <DMA_CheckFifoParam+0xe2>
	}

	/* Memory Data size equal to Word */
	else
	{
		switch (tmp)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d903      	bls.n	800193e <DMA_CheckFifoParam+0xb6>
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	2b03      	cmp	r3, #3
 800193a:	d003      	beq.n	8001944 <DMA_CheckFifoParam+0xbc>
			{
				status = HAL_ERROR;
			}
			break;
		default:
			break;
 800193c:	e018      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
			status = HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	73fb      	strb	r3, [r7, #15]
			break;
 8001942:	e015      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
			if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001948:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d00e      	beq.n	800196e <DMA_CheckFifoParam+0xe6>
				status = HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	73fb      	strb	r3, [r7, #15]
			break;
 8001954:	e00b      	b.n	800196e <DMA_CheckFifoParam+0xe6>
			break;
 8001956:	bf00      	nop
 8001958:	e00a      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
			break;
 800195a:	bf00      	nop
 800195c:	e008      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
			break;
 800195e:	bf00      	nop
 8001960:	e006      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
			break;
 8001962:	bf00      	nop
 8001964:	e004      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
			break;
 8001966:	bf00      	nop
 8001968:	e002      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
			break;
 800196a:	bf00      	nop
 800196c:	e000      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
			break;
 800196e:	bf00      	nop
		}
	}

	return status;
 8001970:	7bfb      	ldrb	r3, [r7, #15]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop

08001980 <HAL_GPIO_Init>:
 * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001980:	b480      	push	{r7}
 8001982:	b089      	sub	sp, #36	; 0x24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
	uint32_t position;
	uint32_t ioposition = 0x00U;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
	uint32_t iocurrent = 0x00U;
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
	uint32_t temp = 0x00U;
 8001992:	2300      	movs	r3, #0
 8001994:	61bb      	str	r3, [r7, #24]
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

	/* Configure the port pins */
	for (position = 0U; position < GPIO_NUMBER; position++)
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
 800199a:	e177      	b.n	8001c8c <HAL_GPIO_Init+0x30c>
	{
		/* Get the IO position */
		ioposition = 0x01U << position;
 800199c:	2201      	movs	r2, #1
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	617b      	str	r3, [r7, #20]
		/* Get the current IO position */
		iocurrent = (uint32_t) (GPIO_Init->Pin) & ioposition;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]

		if (iocurrent == ioposition)
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	f040 8166 	bne.w	8001c86 <HAL_GPIO_Init+0x306>
		{
			/*--------------------- GPIO Mode Configuration ------------------------*/
			/* In case of Output or Alternate function mode selection */
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d005      	beq.n	80019d2 <HAL_GPIO_Init+0x52>
					|| (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d130      	bne.n	8001a34 <HAL_GPIO_Init+0xb4>
			{
				/* Check the Speed parameter */
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
				/* Configure the IO Speed */
				temp = GPIOx->OSPEEDR;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	2203      	movs	r2, #3
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4013      	ands	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
				temp |= (GPIO_Init->Speed << (position * 2U));
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	68da      	ldr	r2, [r3, #12]
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
				GPIOx->OSPEEDR = temp;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	609a      	str	r2, [r3, #8]

				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_OTYPER_OT_0 << position);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	091b      	lsrs	r3, r3, #4
 8001a1e:	f003 0201 	and.w	r2, r3, #1
						<< position);
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
				GPIOx->OTYPER = temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	605a      	str	r2, [r3, #4]
			}

			if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 0303 	and.w	r3, r3, #3
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d017      	beq.n	8001a70 <HAL_GPIO_Init+0xf0>
			{
				/* Check the parameters */
				assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

				/* Activate the Pull-up or Pull down resistor for the current IO */
				temp = GPIOx->PUPDR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
				temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
				GPIOx->PUPDR = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	60da      	str	r2, [r3, #12]
			}

			/* In case of Alternate function mode selection */
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d123      	bne.n	8001ac4 <HAL_GPIO_Init+0x144>
			{
				/* Check the Alternate function parameter */
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3U];
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	08da      	lsrs	r2, r3, #3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3208      	adds	r2, #8
 8001a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a88:	61bb      	str	r3, [r7, #24]
				temp &= ~(0xFU << ((uint32_t) (position & 0x07U) * 4U));
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	220f      	movs	r2, #15
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	691a      	ldr	r2, [r3, #16]
						<< (((uint32_t) position & 0x07U) * 4U));
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
				GPIOx->AFR[position >> 3U] = temp;
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	08da      	lsrs	r2, r3, #3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3208      	adds	r2, #8
 8001abe:	69b9      	ldr	r1, [r7, #24]
 8001ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}

			/* Configure IO Direction mode (Input, Output, Alternate or Analog) */
			temp = GPIOx->MODER;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	61bb      	str	r3, [r7, #24]
			temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	2203      	movs	r2, #3
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0203 	and.w	r2, r3, #3
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
			GPIOx->MODER = temp;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	601a      	str	r2, [r3, #0]

			/*--------------------- EXTI Mode Configuration ------------------------*/
			/* Configure the External Interrupt or event for the current IO */
			if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 80c0 	beq.w	8001c86 <HAL_GPIO_Init+0x306>
			{
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	4b66      	ldr	r3, [pc, #408]	; (8001ca4 <HAL_GPIO_Init+0x324>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0e:	4a65      	ldr	r2, [pc, #404]	; (8001ca4 <HAL_GPIO_Init+0x324>)
 8001b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b14:	6453      	str	r3, [r2, #68]	; 0x44
 8001b16:	4b63      	ldr	r3, [pc, #396]	; (8001ca4 <HAL_GPIO_Init+0x324>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]

				temp = SYSCFG->EXTICR[position >> 2U];
 8001b22:	4a61      	ldr	r2, [pc, #388]	; (8001ca8 <HAL_GPIO_Init+0x328>)
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	089b      	lsrs	r3, r3, #2
 8001b28:	3302      	adds	r3, #2
 8001b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2e:	61bb      	str	r3, [r7, #24]
				temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	220f      	movs	r2, #15
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a58      	ldr	r2, [pc, #352]	; (8001cac <HAL_GPIO_Init+0x32c>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d037      	beq.n	8001bbe <HAL_GPIO_Init+0x23e>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a57      	ldr	r2, [pc, #348]	; (8001cb0 <HAL_GPIO_Init+0x330>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d031      	beq.n	8001bba <HAL_GPIO_Init+0x23a>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a56      	ldr	r2, [pc, #344]	; (8001cb4 <HAL_GPIO_Init+0x334>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d02b      	beq.n	8001bb6 <HAL_GPIO_Init+0x236>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a55      	ldr	r2, [pc, #340]	; (8001cb8 <HAL_GPIO_Init+0x338>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d025      	beq.n	8001bb2 <HAL_GPIO_Init+0x232>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a54      	ldr	r2, [pc, #336]	; (8001cbc <HAL_GPIO_Init+0x33c>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d01f      	beq.n	8001bae <HAL_GPIO_Init+0x22e>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a53      	ldr	r2, [pc, #332]	; (8001cc0 <HAL_GPIO_Init+0x340>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d019      	beq.n	8001baa <HAL_GPIO_Init+0x22a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a52      	ldr	r2, [pc, #328]	; (8001cc4 <HAL_GPIO_Init+0x344>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d013      	beq.n	8001ba6 <HAL_GPIO_Init+0x226>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a51      	ldr	r2, [pc, #324]	; (8001cc8 <HAL_GPIO_Init+0x348>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d00d      	beq.n	8001ba2 <HAL_GPIO_Init+0x222>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a50      	ldr	r2, [pc, #320]	; (8001ccc <HAL_GPIO_Init+0x34c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d007      	beq.n	8001b9e <HAL_GPIO_Init+0x21e>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a4f      	ldr	r2, [pc, #316]	; (8001cd0 <HAL_GPIO_Init+0x350>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d101      	bne.n	8001b9a <HAL_GPIO_Init+0x21a>
 8001b96:	2309      	movs	r3, #9
 8001b98:	e012      	b.n	8001bc0 <HAL_GPIO_Init+0x240>
 8001b9a:	230a      	movs	r3, #10
 8001b9c:	e010      	b.n	8001bc0 <HAL_GPIO_Init+0x240>
 8001b9e:	2308      	movs	r3, #8
 8001ba0:	e00e      	b.n	8001bc0 <HAL_GPIO_Init+0x240>
 8001ba2:	2307      	movs	r3, #7
 8001ba4:	e00c      	b.n	8001bc0 <HAL_GPIO_Init+0x240>
 8001ba6:	2306      	movs	r3, #6
 8001ba8:	e00a      	b.n	8001bc0 <HAL_GPIO_Init+0x240>
 8001baa:	2305      	movs	r3, #5
 8001bac:	e008      	b.n	8001bc0 <HAL_GPIO_Init+0x240>
 8001bae:	2304      	movs	r3, #4
 8001bb0:	e006      	b.n	8001bc0 <HAL_GPIO_Init+0x240>
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e004      	b.n	8001bc0 <HAL_GPIO_Init+0x240>
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	e002      	b.n	8001bc0 <HAL_GPIO_Init+0x240>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <HAL_GPIO_Init+0x240>
 8001bbe:	2300      	movs	r3, #0
						<< (4U * (position & 0x03U)));
 8001bc0:	69fa      	ldr	r2, [r7, #28]
 8001bc2:	f002 0203 	and.w	r2, r2, #3
 8001bc6:	0092      	lsls	r2, r2, #2
 8001bc8:	4093      	lsls	r3, r2
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
				SYSCFG->EXTICR[position >> 2U] = temp;
 8001bd0:	4935      	ldr	r1, [pc, #212]	; (8001ca8 <HAL_GPIO_Init+0x328>)
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	089b      	lsrs	r3, r3, #2
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR;
 8001bde:	4b3d      	ldr	r3, [pc, #244]	; (8001cd4 <HAL_GPIO_Init+0x354>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	43db      	mvns	r3, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4013      	ands	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_Init+0x282>
				{
					temp |= iocurrent;
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
				}
				EXTI->RTSR = temp;
 8001c02:	4a34      	ldr	r2, [pc, #208]	; (8001cd4 <HAL_GPIO_Init+0x354>)
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	6093      	str	r3, [r2, #8]

				temp = EXTI->FTSR;
 8001c08:	4b32      	ldr	r3, [pc, #200]	; (8001cd4 <HAL_GPIO_Init+0x354>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <HAL_GPIO_Init+0x2ac>
				{
					temp |= iocurrent;
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
				}
				EXTI->FTSR = temp;
 8001c2c:	4a29      	ldr	r2, [pc, #164]	; (8001cd4 <HAL_GPIO_Init+0x354>)
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	60d3      	str	r3, [r2, #12]

				temp = EXTI->EMR;
 8001c32:	4b28      	ldr	r3, [pc, #160]	; (8001cd4 <HAL_GPIO_Init+0x354>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_GPIO_Init+0x2d6>
				{
					temp |= iocurrent;
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
				}
				EXTI->EMR = temp;
 8001c56:	4a1f      	ldr	r2, [pc, #124]	; (8001cd4 <HAL_GPIO_Init+0x354>)
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	6053      	str	r3, [r2, #4]

				/* Clear EXTI line configuration */
				temp = EXTI->IMR;
 8001c5c:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <HAL_GPIO_Init+0x354>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_GPIO_Init+0x300>
				{
					temp |= iocurrent;
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
				}
				EXTI->IMR = temp;
 8001c80:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <HAL_GPIO_Init+0x354>)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	6013      	str	r3, [r2, #0]
	for (position = 0U; position < GPIO_NUMBER; position++)
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	61fb      	str	r3, [r7, #28]
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	2b0f      	cmp	r3, #15
 8001c90:	f67f ae84 	bls.w	800199c <HAL_GPIO_Init+0x1c>
			}
		}
	}
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	3724      	adds	r7, #36	; 0x24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40013800 	.word	0x40013800
 8001cac:	40020000 	.word	0x40020000
 8001cb0:	40020400 	.word	0x40020400
 8001cb4:	40020800 	.word	0x40020800
 8001cb8:	40020c00 	.word	0x40020c00
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40021400 	.word	0x40021400
 8001cc4:	40021800 	.word	0x40021800
 8001cc8:	40021c00 	.word	0x40021c00
 8001ccc:	40022000 	.word	0x40022000
 8001cd0:	40022400 	.word	0x40022400
 8001cd4:	40013c00 	.word	0x40013c00

08001cd8 <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		GPIO_PinState PinState)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	807b      	strh	r3, [r7, #2]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	707b      	strb	r3, [r7, #1]
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET)
 8001ce8:	787b      	ldrb	r3, [r7, #1]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_WritePin+0x1e>
	{
		GPIOx->BSRR = GPIO_Pin;
 8001cee:	887a      	ldrh	r2, [r7, #2]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	619a      	str	r2, [r3, #24]
	}
	else
	{
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16U;
	}
}
 8001cf4:	e003      	b.n	8001cfe <HAL_GPIO_WritePin+0x26>
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16U;
 8001cf6:	887b      	ldrh	r3, [r7, #2]
 8001cf8:	041a      	lsls	r2, r3, #16
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	619a      	str	r2, [r3, #24]
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <HAL_GPIO_TogglePin>:
 *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
 * @param  GPIO_Pin Specifies the pins to be toggled.
 * @retval None
 */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b085      	sub	sp, #20
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	460b      	mov	r3, r1
 8001d14:	807b      	strh	r3, [r7, #2]

	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));

	/* get current Output Data Register value */
	odr = GPIOx->ODR;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	60fb      	str	r3, [r7, #12]

	/* Set selected pins that were at low level, and reset ones that were high */
	GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d1c:	887a      	ldrh	r2, [r7, #2]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4013      	ands	r3, r2
 8001d22:	041a      	lsls	r2, r3, #16
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	43d9      	mvns	r1, r3
 8001d28:	887b      	ldrh	r3, [r7, #2]
 8001d2a:	400b      	ands	r3, r1
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	619a      	str	r2, [r3, #24]
}
 8001d32:	bf00      	nop
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <HAL_I2C_Init>:
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	uint32_t freqrange;
	uint32_t pclk1;

	/* Check the I2C handle allocation */
	if (hi2c == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_I2C_Init+0x12>
	{
		return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e12b      	b.n	8001faa <HAL_I2C_Init+0x26a>
	assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
	assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
	assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
	assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

	if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d106      	bne.n	8001d6c <HAL_I2C_Init+0x2c>
	{
		/* Allocate lock resource and initialize it */
		hi2c->Lock = HAL_UNLOCKED;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC */
		HAL_I2C_MspInit(hi2c);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7fe fea4 	bl	8000ab4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
	}

	hi2c->State = HAL_I2C_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2224      	movs	r2, #36	; 0x24
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Disable the selected I2C peripheral */
	__HAL_I2C_DISABLE(hi2c);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0201 	bic.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]

	/*Reset I2C*/
	hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d92:	601a      	str	r2, [r3, #0]
	hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001da2:	601a      	str	r2, [r3, #0]

	/* Get PCLK1 frequency */
	pclk1 = HAL_RCC_GetPCLK1Freq();
 8001da4:	f001 fcdc 	bl	8003760 <HAL_RCC_GetPCLK1Freq>
 8001da8:	60f8      	str	r0, [r7, #12]

	/* Check the minimum allowed PCLK1 frequency */
	if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	4a81      	ldr	r2, [pc, #516]	; (8001fb4 <HAL_I2C_Init+0x274>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d807      	bhi.n	8001dc4 <HAL_I2C_Init+0x84>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4a80      	ldr	r2, [pc, #512]	; (8001fb8 <HAL_I2C_Init+0x278>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	bf94      	ite	ls
 8001dbc:	2301      	movls	r3, #1
 8001dbe:	2300      	movhi	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	e006      	b.n	8001dd2 <HAL_I2C_Init+0x92>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4a7d      	ldr	r2, [pc, #500]	; (8001fbc <HAL_I2C_Init+0x27c>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	bf94      	ite	ls
 8001dcc:	2301      	movls	r3, #1
 8001dce:	2300      	movhi	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_I2C_Init+0x9a>
	{
		return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e0e7      	b.n	8001faa <HAL_I2C_Init+0x26a>
	}

	/* Calculate frequency range */
	freqrange = I2C_FREQRANGE(pclk1);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4a78      	ldr	r2, [pc, #480]	; (8001fc0 <HAL_I2C_Init+0x280>)
 8001dde:	fba2 2303 	umull	r2, r3, r2, r3
 8001de2:	0c9b      	lsrs	r3, r3, #18
 8001de4:	60bb      	str	r3, [r7, #8]

	/*---------------------------- I2Cx CR2 Configuration ----------------------*/
	/* Configure I2Cx: Frequency range */
	MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68ba      	ldr	r2, [r7, #8]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	605a      	str	r2, [r3, #4]

	/*---------------------------- I2Cx TRISE Configuration --------------------*/
	/* Configure I2Cx: Rise Time */
	MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE,
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	4a6a      	ldr	r2, [pc, #424]	; (8001fb4 <HAL_I2C_Init+0x274>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d802      	bhi.n	8001e14 <HAL_I2C_Init+0xd4>
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	3301      	adds	r3, #1
 8001e12:	e009      	b.n	8001e28 <HAL_I2C_Init+0xe8>
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e1a:	fb02 f303 	mul.w	r3, r2, r3
 8001e1e:	4a69      	ldr	r2, [pc, #420]	; (8001fc4 <HAL_I2C_Init+0x284>)
 8001e20:	fba2 2303 	umull	r2, r3, r2, r3
 8001e24:	099b      	lsrs	r3, r3, #6
 8001e26:	3301      	adds	r3, #1
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	430b      	orrs	r3, r1
 8001e2e:	6213      	str	r3, [r2, #32]
			I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

	/*---------------------------- I2Cx CCR Configuration ----------------------*/
	/* Configure I2Cx: Speed */
	MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR),
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	495c      	ldr	r1, [pc, #368]	; (8001fb4 <HAL_I2C_Init+0x274>)
 8001e44:	428b      	cmp	r3, r1
 8001e46:	d819      	bhi.n	8001e7c <HAL_I2C_Init+0x13c>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	1e59      	subs	r1, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e56:	1c59      	adds	r1, r3, #1
 8001e58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e5c:	400b      	ands	r3, r1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00a      	beq.n	8001e78 <HAL_I2C_Init+0x138>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1e59      	subs	r1, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e70:	3301      	adds	r3, #1
 8001e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e76:	e051      	b.n	8001f1c <HAL_I2C_Init+0x1dc>
 8001e78:	2304      	movs	r3, #4
 8001e7a:	e04f      	b.n	8001f1c <HAL_I2C_Init+0x1dc>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d111      	bne.n	8001ea8 <HAL_I2C_Init+0x168>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	1e58      	subs	r0, r3, #1
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6859      	ldr	r1, [r3, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	440b      	add	r3, r1
 8001e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e96:	3301      	adds	r3, #1
 8001e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	bf0c      	ite	eq
 8001ea0:	2301      	moveq	r3, #1
 8001ea2:	2300      	movne	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	e012      	b.n	8001ece <HAL_I2C_Init+0x18e>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	1e58      	subs	r0, r3, #1
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6859      	ldr	r1, [r3, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	0099      	lsls	r1, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	bf0c      	ite	eq
 8001ec8:	2301      	moveq	r3, #1
 8001eca:	2300      	movne	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_I2C_Init+0x196>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e022      	b.n	8001f1c <HAL_I2C_Init+0x1dc>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10e      	bne.n	8001efc <HAL_I2C_Init+0x1bc>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	1e58      	subs	r0, r3, #1
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6859      	ldr	r1, [r3, #4]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	440b      	add	r3, r1
 8001eec:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001efa:	e00f      	b.n	8001f1c <HAL_I2C_Init+0x1dc>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	1e58      	subs	r0, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6859      	ldr	r1, [r3, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	440b      	add	r3, r1
 8001f0a:	0099      	lsls	r1, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f12:	3301      	adds	r3, #1
 8001f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	6809      	ldr	r1, [r1, #0]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61cb      	str	r3, [r1, #28]
			I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));

	/*---------------------------- I2Cx CR1 Configuration ----------------------*/
	/* Configure I2Cx: Generalcall and NoStretch mode */
	MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH),
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69da      	ldr	r2, [r3, #28]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]
			(hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));

	/*---------------------------- I2Cx OAR1 Configuration ---------------------*/
	/* Configure I2Cx: Own Address1 and addressing mode */
	MODIFY_REG(hi2c->Instance->OAR1,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6911      	ldr	r1, [r2, #16]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	68d2      	ldr	r2, [r2, #12]
 8001f56:	4311      	orrs	r1, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	430b      	orrs	r3, r1
 8001f5e:	6093      	str	r3, [r2, #8]
			(I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0),
			(hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));

	/*---------------------------- I2Cx OAR2 Configuration ---------------------*/
	/* Configure I2Cx: Dual mode and Own Address2 */
	MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2),
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695a      	ldr	r2, [r3, #20]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	60da      	str	r2, [r3, #12]
			(hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));

	/* Enable the selected I2C peripheral */
	__HAL_I2C_ENABLE(hi2c);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0201 	orr.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

	hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	641a      	str	r2, [r3, #64]	; 0x40
	hi2c->State = HAL_I2C_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2220      	movs	r2, #32
 8001f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	hi2c->PreviousState = I2C_STATE_NONE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	631a      	str	r2, [r3, #48]	; 0x30
	hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

	return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	000186a0 	.word	0x000186a0
 8001fb8:	001e847f 	.word	0x001e847f
 8001fbc:	003d08ff 	.word	0x003d08ff
 8001fc0:	431bde83 	.word	0x431bde83
 8001fc4:	10624dd3 	.word	0x10624dd3

08001fc8 <HAL_I2C_Mem_Write>:
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c,
		uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize,
		uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af02      	add	r7, sp, #8
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	4608      	mov	r0, r1
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	817b      	strh	r3, [r7, #10]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	813b      	strh	r3, [r7, #8]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	80fb      	strh	r3, [r7, #6]
	/* Init tickstart for timeout management*/
	uint32_t tickstart = HAL_GetTick();
 8001fe2:	f7fe fff9 	bl	8000fd8 <HAL_GetTick>
 8001fe6:	6178      	str	r0, [r7, #20]

	/* Check the parameters */
	assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

	if (hi2c->State == HAL_I2C_STATE_READY)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b20      	cmp	r3, #32
 8001ff2:	f040 80d9 	bne.w	80021a8 <HAL_I2C_Mem_Write+0x1e0>
	{
		/* Wait until BUSY flag is reset */
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET,
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	2319      	movs	r3, #25
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	496d      	ldr	r1, [pc, #436]	; (80021b4 <HAL_I2C_Mem_Write+0x1ec>)
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 fc8b 	bl	800291c <I2C_WaitOnFlagUntilTimeout>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <HAL_I2C_Mem_Write+0x48>
				I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
		{
			return HAL_BUSY;
 800200c:	2302      	movs	r3, #2
 800200e:	e0cc      	b.n	80021aa <HAL_I2C_Mem_Write+0x1e2>
		}

		/* Process Locked */
		__HAL_LOCK(hi2c);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <HAL_I2C_Mem_Write+0x56>
 800201a:	2302      	movs	r3, #2
 800201c:	e0c5      	b.n	80021aa <HAL_I2C_Mem_Write+0x1e2>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		/* Check if the I2C is already enabled */
		if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b01      	cmp	r3, #1
 8002032:	d007      	beq.n	8002044 <HAL_I2C_Mem_Write+0x7c>
		{
			/* Enable I2C peripheral */
			__HAL_I2C_ENABLE(hi2c);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0201 	orr.w	r2, r2, #1
 8002042:	601a      	str	r2, [r3, #0]
		}

		/* Disable Pos */
		CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002052:	601a      	str	r2, [r3, #0]

		hi2c->State = HAL_I2C_STATE_BUSY_TX;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2221      	movs	r2, #33	; 0x21
 8002058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_MEM;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2240      	movs	r2, #64	; 0x40
 8002060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	641a      	str	r2, [r3, #64]	; 0x40

		/* Prepare transfer parameters */
		hi2c->pBuffPtr = pData;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6a3a      	ldr	r2, [r7, #32]
 800206e:	625a      	str	r2, [r3, #36]	; 0x24
		hi2c->XferCount = Size;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002074:	855a      	strh	r2, [r3, #42]	; 0x2a
		hi2c->XferSize = hi2c->XferCount;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207a:	b29a      	uxth	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	851a      	strh	r2, [r3, #40]	; 0x28
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4a4d      	ldr	r2, [pc, #308]	; (80021b8 <HAL_I2C_Mem_Write+0x1f0>)
 8002084:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Send Slave Address and Memory Address */
		if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize,
 8002086:	88f8      	ldrh	r0, [r7, #6]
 8002088:	893a      	ldrh	r2, [r7, #8]
 800208a:	8979      	ldrh	r1, [r7, #10]
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	9301      	str	r3, [sp, #4]
 8002090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	4603      	mov	r3, r0
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 fac2 	bl	8002620 <I2C_RequestMemoryWrite>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d052      	beq.n	8002148 <HAL_I2C_Mem_Write+0x180>
				Timeout, tickstart) != HAL_OK)
		{
			return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e081      	b.n	80021aa <HAL_I2C_Mem_Write+0x1e2>
		}

		while (hi2c->XferSize > 0U)
		{
			/* Wait until TXE flag is set */
			if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart)
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 fd50 	bl	8002b50 <I2C_WaitOnTXEFlagUntilTimeout>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00d      	beq.n	80020d2 <HAL_I2C_Mem_Write+0x10a>
					!= HAL_OK)
			{
				if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d107      	bne.n	80020ce <HAL_I2C_Mem_Write+0x106>
				{
					/* Generate Stop */
					SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020cc:	601a      	str	r2, [r3, #0]
				}
				return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e06b      	b.n	80021aa <HAL_I2C_Mem_Write+0x1e2>
			}

			/* Write data to DR */
			hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	781a      	ldrb	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	611a      	str	r2, [r3, #16]

			/* Increment Buffer pointer */
			hi2c->pBuffPtr++;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	625a      	str	r2, [r3, #36]	; 0x24

			/* Update counter */
			hi2c->XferSize--;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ec:	3b01      	subs	r3, #1
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	851a      	strh	r2, [r3, #40]	; 0x28
			hi2c->XferCount--;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	3b01      	subs	r3, #1
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	855a      	strh	r2, [r3, #42]	; 0x2a

			if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b04      	cmp	r3, #4
 800210e:	d11b      	bne.n	8002148 <HAL_I2C_Mem_Write+0x180>
					&& (hi2c->XferSize != 0U))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002114:	2b00      	cmp	r3, #0
 8002116:	d017      	beq.n	8002148 <HAL_I2C_Mem_Write+0x180>
			{
				/* Write data to DR */
				hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211c:	781a      	ldrb	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	611a      	str	r2, [r3, #16]

				/* Increment Buffer pointer */
				hi2c->pBuffPtr++;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	625a      	str	r2, [r3, #36]	; 0x24

				/* Update counter */
				hi2c->XferSize--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002132:	3b01      	subs	r3, #1
 8002134:	b29a      	uxth	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	851a      	strh	r2, [r3, #40]	; 0x28
				hi2c->XferCount--;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213e:	b29b      	uxth	r3, r3
 8002140:	3b01      	subs	r3, #1
 8002142:	b29a      	uxth	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	855a      	strh	r2, [r3, #42]	; 0x2a
		while (hi2c->XferSize > 0U)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1aa      	bne.n	80020a6 <HAL_I2C_Mem_Write+0xde>
			}
		}

		/* Wait until BTF flag is set */
		if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f000 fd43 	bl	8002be0 <I2C_WaitOnBTFFlagUntilTimeout>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00d      	beq.n	800217c <HAL_I2C_Mem_Write+0x1b4>
		{
			if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	2b04      	cmp	r3, #4
 8002166:	d107      	bne.n	8002178 <HAL_I2C_Mem_Write+0x1b0>
			{
				/* Generate Stop */
				SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002176:	601a      	str	r2, [r3, #0]
			}
			return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e016      	b.n	80021aa <HAL_I2C_Mem_Write+0x1e2>
		}

		/* Generate Stop */
		SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800218a:	601a      	str	r2, [r3, #0]

		hi2c->State = HAL_I2C_STATE_READY;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2220      	movs	r2, #32
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

		/* Process Unlocked */
		__HAL_UNLOCK(hi2c);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		return HAL_OK;
 80021a4:	2300      	movs	r3, #0
 80021a6:	e000      	b.n	80021aa <HAL_I2C_Mem_Write+0x1e2>
	}
	else
	{
		return HAL_BUSY;
 80021a8:	2302      	movs	r3, #2
	}
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	00100002 	.word	0x00100002
 80021b8:	ffff0000 	.word	0xffff0000

080021bc <HAL_I2C_Mem_Read>:
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
		uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size,
		uint32_t Timeout)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08c      	sub	sp, #48	; 0x30
 80021c0:	af02      	add	r7, sp, #8
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	4608      	mov	r0, r1
 80021c6:	4611      	mov	r1, r2
 80021c8:	461a      	mov	r2, r3
 80021ca:	4603      	mov	r3, r0
 80021cc:	817b      	strh	r3, [r7, #10]
 80021ce:	460b      	mov	r3, r1
 80021d0:	813b      	strh	r3, [r7, #8]
 80021d2:	4613      	mov	r3, r2
 80021d4:	80fb      	strh	r3, [r7, #6]
	/* Init tickstart for timeout management*/
	uint32_t tickstart = HAL_GetTick();
 80021d6:	f7fe feff 	bl	8000fd8 <HAL_GetTick>
 80021da:	6278      	str	r0, [r7, #36]	; 0x24

	/* Check the parameters */
	assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

	if (hi2c->State == HAL_I2C_STATE_READY)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b20      	cmp	r3, #32
 80021e6:	f040 8214 	bne.w	8002612 <HAL_I2C_Mem_Read+0x456>
	{
		/* Wait until BUSY flag is reset */
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET,
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	2319      	movs	r3, #25
 80021f0:	2201      	movs	r2, #1
 80021f2:	497b      	ldr	r1, [pc, #492]	; (80023e0 <HAL_I2C_Mem_Read+0x224>)
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f000 fb91 	bl	800291c <I2C_WaitOnFlagUntilTimeout>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <HAL_I2C_Mem_Read+0x48>
				I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
		{
			return HAL_BUSY;
 8002200:	2302      	movs	r3, #2
 8002202:	e207      	b.n	8002614 <HAL_I2C_Mem_Read+0x458>
		}

		/* Process Locked */
		__HAL_LOCK(hi2c);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_I2C_Mem_Read+0x56>
 800220e:	2302      	movs	r3, #2
 8002210:	e200      	b.n	8002614 <HAL_I2C_Mem_Read+0x458>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		/* Check if the I2C is already enabled */
		if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b01      	cmp	r3, #1
 8002226:	d007      	beq.n	8002238 <HAL_I2C_Mem_Read+0x7c>
		{
			/* Enable I2C peripheral */
			__HAL_I2C_ENABLE(hi2c);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0201 	orr.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]
		}

		/* Disable Pos */
		CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002246:	601a      	str	r2, [r3, #0]

		hi2c->State = HAL_I2C_STATE_BUSY_RX;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2222      	movs	r2, #34	; 0x22
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_MEM;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2240      	movs	r2, #64	; 0x40
 8002254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	641a      	str	r2, [r3, #64]	; 0x40

		/* Prepare transfer parameters */
		hi2c->pBuffPtr = pData;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002262:	625a      	str	r2, [r3, #36]	; 0x24
		hi2c->XferCount = Size;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002268:	855a      	strh	r2, [r3, #42]	; 0x2a
		hi2c->XferSize = hi2c->XferCount;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226e:	b29a      	uxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	851a      	strh	r2, [r3, #40]	; 0x28
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4a5b      	ldr	r2, [pc, #364]	; (80023e4 <HAL_I2C_Mem_Read+0x228>)
 8002278:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Send Slave Address and Memory Address */
		if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize,
 800227a:	88f8      	ldrh	r0, [r7, #6]
 800227c:	893a      	ldrh	r2, [r7, #8]
 800227e:	8979      	ldrh	r1, [r7, #10]
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	9301      	str	r3, [sp, #4]
 8002284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	4603      	mov	r3, r0
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 fa5e 	bl	800274c <I2C_RequestMemoryRead>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_I2C_Mem_Read+0xde>
				Timeout, tickstart) != HAL_OK)
		{
			return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e1bc      	b.n	8002614 <HAL_I2C_Mem_Read+0x458>
		}

		if (hi2c->XferSize == 0U)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d113      	bne.n	80022ca <HAL_I2C_Mem_Read+0x10e>
		{
			/* Clear ADDR flag */
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022a2:	2300      	movs	r3, #0
 80022a4:	623b      	str	r3, [r7, #32]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	623b      	str	r3, [r7, #32]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	623b      	str	r3, [r7, #32]
 80022b6:	6a3b      	ldr	r3, [r7, #32]

			/* Generate Stop */
			SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	e190      	b.n	80025ec <HAL_I2C_Mem_Read+0x430>
		}
		else if (hi2c->XferSize == 1U)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d11b      	bne.n	800230a <HAL_I2C_Mem_Read+0x14e>
		{
			/* Disable Acknowledge */
			CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022e0:	601a      	str	r2, [r3, #0]

			/* Clear ADDR flag */
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	61fb      	str	r3, [r7, #28]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	61fb      	str	r3, [r7, #28]
 80022f6:	69fb      	ldr	r3, [r7, #28]

			/* Generate Stop */
			SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	e170      	b.n	80025ec <HAL_I2C_Mem_Read+0x430>
		}
		else if (hi2c->XferSize == 2U)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230e:	2b02      	cmp	r3, #2
 8002310:	d11b      	bne.n	800234a <HAL_I2C_Mem_Read+0x18e>
		{
			/* Disable Acknowledge */
			CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002320:	601a      	str	r2, [r3, #0]

			/* Enable Pos */
			SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002330:	601a      	str	r2, [r3, #0]

			/* Clear ADDR flag */
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002332:	2300      	movs	r3, #0
 8002334:	61bb      	str	r3, [r7, #24]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	61bb      	str	r3, [r7, #24]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	61bb      	str	r3, [r7, #24]
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	e150      	b.n	80025ec <HAL_I2C_Mem_Read+0x430>
		}
		else
		{
			/* Clear ADDR flag */
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	697b      	ldr	r3, [r7, #20]
		}

		while (hi2c->XferSize > 0U)
 8002360:	e144      	b.n	80025ec <HAL_I2C_Mem_Read+0x430>
		{
			if (hi2c->XferSize <= 3U)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002366:	2b03      	cmp	r3, #3
 8002368:	f200 80f1 	bhi.w	800254e <HAL_I2C_Mem_Read+0x392>
			{
				/* One byte */
				if (hi2c->XferSize == 1U)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002370:	2b01      	cmp	r3, #1
 8002372:	d123      	bne.n	80023bc <HAL_I2C_Mem_Read+0x200>
				{
					/* Wait until RXNE flag is set */
					if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart)
 8002374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002376:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f000 fc79 	bl	8002c70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <HAL_I2C_Mem_Read+0x1cc>
							!= HAL_OK)
					{
						return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e145      	b.n	8002614 <HAL_I2C_Mem_Read+0x458>
					}

					/* Read data from DR */
					*hi2c->pBuffPtr = (uint8_t) hi2c->Instance->DR;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691a      	ldr	r2, [r3, #16]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	701a      	strb	r2, [r3, #0]

					/* Increment Buffer pointer */
					hi2c->pBuffPtr++;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	625a      	str	r2, [r3, #36]	; 0x24

					/* Update counter */
					hi2c->XferSize--;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	851a      	strh	r2, [r3, #40]	; 0x28
					hi2c->XferCount--;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	3b01      	subs	r3, #1
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023ba:	e117      	b.n	80025ec <HAL_I2C_Mem_Read+0x430>
				}
				/* Two bytes */
				else if (hi2c->XferSize == 2U)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d14e      	bne.n	8002462 <HAL_I2C_Mem_Read+0x2a6>
				{
					/* Wait until BTF flag is set */
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET,
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ca:	2200      	movs	r2, #0
 80023cc:	4906      	ldr	r1, [pc, #24]	; (80023e8 <HAL_I2C_Mem_Read+0x22c>)
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 faa4 	bl	800291c <I2C_WaitOnFlagUntilTimeout>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d008      	beq.n	80023ec <HAL_I2C_Mem_Read+0x230>
							Timeout, tickstart) != HAL_OK)
					{
						return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e11a      	b.n	8002614 <HAL_I2C_Mem_Read+0x458>
 80023de:	bf00      	nop
 80023e0:	00100002 	.word	0x00100002
 80023e4:	ffff0000 	.word	0xffff0000
 80023e8:	00010004 	.word	0x00010004
					}

					/* Generate Stop */
					SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023fa:	601a      	str	r2, [r3, #0]

					/* Read data from DR */
					*hi2c->pBuffPtr = (uint8_t) hi2c->Instance->DR;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691a      	ldr	r2, [r3, #16]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	701a      	strb	r2, [r3, #0]

					/* Increment Buffer pointer */
					hi2c->pBuffPtr++;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	625a      	str	r2, [r3, #36]	; 0x24

					/* Update counter */
					hi2c->XferSize--;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002418:	3b01      	subs	r3, #1
 800241a:	b29a      	uxth	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	851a      	strh	r2, [r3, #40]	; 0x28
					hi2c->XferCount--;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002424:	b29b      	uxth	r3, r3
 8002426:	3b01      	subs	r3, #1
 8002428:	b29a      	uxth	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	855a      	strh	r2, [r3, #42]	; 0x2a

					/* Read data from DR */
					*hi2c->pBuffPtr = (uint8_t) hi2c->Instance->DR;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	701a      	strb	r2, [r3, #0]

					/* Increment Buffer pointer */
					hi2c->pBuffPtr++;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	625a      	str	r2, [r3, #36]	; 0x24

					/* Update counter */
					hi2c->XferSize--;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244a:	3b01      	subs	r3, #1
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	851a      	strh	r2, [r3, #40]	; 0x28
					hi2c->XferCount--;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002456:	b29b      	uxth	r3, r3
 8002458:	3b01      	subs	r3, #1
 800245a:	b29a      	uxth	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002460:	e0c4      	b.n	80025ec <HAL_I2C_Mem_Read+0x430>
				}
				/* 3 Last bytes */
				else
				{
					/* Wait until BTF flag is set */
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET,
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002468:	2200      	movs	r2, #0
 800246a:	496c      	ldr	r1, [pc, #432]	; (800261c <HAL_I2C_Mem_Read+0x460>)
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 fa55 	bl	800291c <I2C_WaitOnFlagUntilTimeout>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <HAL_I2C_Mem_Read+0x2c0>
							Timeout, tickstart) != HAL_OK)
					{
						return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0cb      	b.n	8002614 <HAL_I2C_Mem_Read+0x458>
					}

					/* Disable Acknowledge */
					CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800248a:	601a      	str	r2, [r3, #0]

					/* Read data from DR */
					*hi2c->pBuffPtr = (uint8_t) hi2c->Instance->DR;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	691a      	ldr	r2, [r3, #16]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	701a      	strb	r2, [r3, #0]

					/* Increment Buffer pointer */
					hi2c->pBuffPtr++;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	1c5a      	adds	r2, r3, #1
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	625a      	str	r2, [r3, #36]	; 0x24

					/* Update counter */
					hi2c->XferSize--;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a8:	3b01      	subs	r3, #1
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	851a      	strh	r2, [r3, #40]	; 0x28
					hi2c->XferCount--;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	855a      	strh	r2, [r3, #42]	; 0x2a

					/* Wait until BTF flag is set */
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET,
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c4:	2200      	movs	r2, #0
 80024c6:	4955      	ldr	r1, [pc, #340]	; (800261c <HAL_I2C_Mem_Read+0x460>)
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 fa27 	bl	800291c <I2C_WaitOnFlagUntilTimeout>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <HAL_I2C_Mem_Read+0x31c>
							Timeout, tickstart) != HAL_OK)
					{
						return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e09d      	b.n	8002614 <HAL_I2C_Mem_Read+0x458>
					}

					/* Generate Stop */
					SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e6:	601a      	str	r2, [r3, #0]

					/* Read data from DR */
					*hi2c->pBuffPtr = (uint8_t) hi2c->Instance->DR;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	691a      	ldr	r2, [r3, #16]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	701a      	strb	r2, [r3, #0]

					/* Increment Buffer pointer */
					hi2c->pBuffPtr++;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	625a      	str	r2, [r3, #36]	; 0x24

					/* Update counter */
					hi2c->XferSize--;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002504:	3b01      	subs	r3, #1
 8002506:	b29a      	uxth	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	851a      	strh	r2, [r3, #40]	; 0x28
					hi2c->XferCount--;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002510:	b29b      	uxth	r3, r3
 8002512:	3b01      	subs	r3, #1
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	855a      	strh	r2, [r3, #42]	; 0x2a

					/* Read data from DR */
					*hi2c->pBuffPtr = (uint8_t) hi2c->Instance->DR;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	701a      	strb	r2, [r3, #0]

					/* Increment Buffer pointer */
					hi2c->pBuffPtr++;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	625a      	str	r2, [r3, #36]	; 0x24

					/* Update counter */
					hi2c->XferSize--;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002536:	3b01      	subs	r3, #1
 8002538:	b29a      	uxth	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	851a      	strh	r2, [r3, #40]	; 0x28
					hi2c->XferCount--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002542:	b29b      	uxth	r3, r3
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800254c:	e04e      	b.n	80025ec <HAL_I2C_Mem_Read+0x430>
				}
			}
			else
			{
				/* Wait until RXNE flag is set */
				if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart)
 800254e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002550:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 fb8c 	bl	8002c70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_I2C_Mem_Read+0x3a6>
						!= HAL_OK)
				{
					return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e058      	b.n	8002614 <HAL_I2C_Mem_Read+0x458>
				}

				/* Read data from DR */
				*hi2c->pBuffPtr = (uint8_t) hi2c->Instance->DR;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	701a      	strb	r2, [r3, #0]

				/* Increment Buffer pointer */
				hi2c->pBuffPtr++;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	625a      	str	r2, [r3, #36]	; 0x24

				/* Update counter */
				hi2c->XferSize--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	851a      	strh	r2, [r3, #40]	; 0x28
				hi2c->XferCount--;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258a:	b29b      	uxth	r3, r3
 800258c:	3b01      	subs	r3, #1
 800258e:	b29a      	uxth	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	855a      	strh	r2, [r3, #42]	; 0x2a

				if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d124      	bne.n	80025ec <HAL_I2C_Mem_Read+0x430>
				{
					if (hi2c->XferSize == 3U)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	d107      	bne.n	80025ba <HAL_I2C_Mem_Read+0x3fe>
					{
						/* Disable Acknowledge */
						CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025b8:	601a      	str	r2, [r3, #0]
					}
					/* Read data from DR */
					*hi2c->pBuffPtr = (uint8_t) hi2c->Instance->DR;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	691a      	ldr	r2, [r3, #16]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	701a      	strb	r2, [r3, #0]

					/* Increment Buffer pointer */
					hi2c->pBuffPtr++;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	625a      	str	r2, [r3, #36]	; 0x24

					/* Update counter */
					hi2c->XferSize--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d6:	3b01      	subs	r3, #1
 80025d8:	b29a      	uxth	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	851a      	strh	r2, [r3, #40]	; 0x28
					hi2c->XferCount--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	855a      	strh	r2, [r3, #42]	; 0x2a
		while (hi2c->XferSize > 0U)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f47f aeb6 	bne.w	8002362 <HAL_I2C_Mem_Read+0x1a6>
				}
			}
		}

		hi2c->State = HAL_I2C_STATE_READY;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2220      	movs	r2, #32
 80025fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

		/* Process Unlocked */
		__HAL_UNLOCK(hi2c);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		return HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	e000      	b.n	8002614 <HAL_I2C_Mem_Read+0x458>
	}
	else
	{
		return HAL_BUSY;
 8002612:	2302      	movs	r3, #2
	}
}
 8002614:	4618      	mov	r0, r3
 8002616:	3728      	adds	r7, #40	; 0x28
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	00010004 	.word	0x00010004

08002620 <I2C_RequestMemoryWrite>:
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c,
		uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize,
		uint32_t Timeout, uint32_t Tickstart)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af02      	add	r7, sp, #8
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	4608      	mov	r0, r1
 800262a:	4611      	mov	r1, r2
 800262c:	461a      	mov	r2, r3
 800262e:	4603      	mov	r3, r0
 8002630:	817b      	strh	r3, [r7, #10]
 8002632:	460b      	mov	r3, r1
 8002634:	813b      	strh	r3, [r7, #8]
 8002636:	4613      	mov	r3, r2
 8002638:	80fb      	strh	r3, [r7, #6]
	/* Generate Start */
	SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002648:	601a      	str	r2, [r3, #0]

	/* Wait until SB flag is set */
	if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart)
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	2200      	movs	r2, #0
 8002652:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 f960 	bl	800291c <I2C_WaitOnFlagUntilTimeout>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00d      	beq.n	800267e <I2C_RequestMemoryWrite+0x5e>
			!= HAL_OK)
	{
		if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002670:	d103      	bne.n	800267a <I2C_RequestMemoryWrite+0x5a>
		{
			hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002678:	641a      	str	r2, [r3, #64]	; 0x40
		}
		return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e05f      	b.n	800273e <I2C_RequestMemoryWrite+0x11e>
	}

	/* Send slave address */
	hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800267e:	897b      	ldrh	r3, [r7, #10]
 8002680:	b2db      	uxtb	r3, r3
 8002682:	461a      	mov	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800268c:	611a      	str	r2, [r3, #16]

	/* Wait until ADDR flag is set */
	if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout,
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	6a3a      	ldr	r2, [r7, #32]
 8002692:	492d      	ldr	r1, [pc, #180]	; (8002748 <I2C_RequestMemoryWrite+0x128>)
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 f9bb 	bl	8002a10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <I2C_RequestMemoryWrite+0x84>
			Tickstart) != HAL_OK)
	{
		return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e04c      	b.n	800273e <I2C_RequestMemoryWrite+0x11e>
	}

	/* Clear ADDR flag */
	__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	617b      	str	r3, [r7, #20]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	697b      	ldr	r3, [r7, #20]

	/* Wait until TXE flag is set */
	if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026bc:	6a39      	ldr	r1, [r7, #32]
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 fa46 	bl	8002b50 <I2C_WaitOnTXEFlagUntilTimeout>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00d      	beq.n	80026e6 <I2C_RequestMemoryWrite+0xc6>
	{
		if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d107      	bne.n	80026e2 <I2C_RequestMemoryWrite+0xc2>
		{
			/* Generate Stop */
			SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e0:	601a      	str	r2, [r3, #0]
		}
		return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e02b      	b.n	800273e <I2C_RequestMemoryWrite+0x11e>
	}

	/* If Memory address size is 8Bit */
	if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d105      	bne.n	80026f8 <I2C_RequestMemoryWrite+0xd8>
	{
		/* Send Memory Address */
		hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026ec:	893b      	ldrh	r3, [r7, #8]
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	611a      	str	r2, [r3, #16]
 80026f6:	e021      	b.n	800273c <I2C_RequestMemoryWrite+0x11c>
	}
	/* If Memory address size is 16Bit */
	else
	{
		/* Send MSB of Memory Address */
		hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026f8:	893b      	ldrh	r3, [r7, #8]
 80026fa:	0a1b      	lsrs	r3, r3, #8
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	611a      	str	r2, [r3, #16]

		/* Wait until TXE flag is set */
		if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002708:	6a39      	ldr	r1, [r7, #32]
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 fa20 	bl	8002b50 <I2C_WaitOnTXEFlagUntilTimeout>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00d      	beq.n	8002732 <I2C_RequestMemoryWrite+0x112>
		{
			if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	2b04      	cmp	r3, #4
 800271c:	d107      	bne.n	800272e <I2C_RequestMemoryWrite+0x10e>
			{
				/* Generate Stop */
				SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800272c:	601a      	str	r2, [r3, #0]
			}
			return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e005      	b.n	800273e <I2C_RequestMemoryWrite+0x11e>
		}

		/* Send LSB of Memory Address */
		hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002732:	893b      	ldrh	r3, [r7, #8]
 8002734:	b2da      	uxtb	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	611a      	str	r2, [r3, #16]
	}

	return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	00010002 	.word	0x00010002

0800274c <I2C_RequestMemoryRead>:
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c,
		uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize,
		uint32_t Timeout, uint32_t Tickstart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af02      	add	r7, sp, #8
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	4608      	mov	r0, r1
 8002756:	4611      	mov	r1, r2
 8002758:	461a      	mov	r2, r3
 800275a:	4603      	mov	r3, r0
 800275c:	817b      	strh	r3, [r7, #10]
 800275e:	460b      	mov	r3, r1
 8002760:	813b      	strh	r3, [r7, #8]
 8002762:	4613      	mov	r3, r2
 8002764:	80fb      	strh	r3, [r7, #6]
	/* Enable Acknowledge */
	SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002774:	601a      	str	r2, [r3, #0]

	/* Generate Start */
	SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002784:	601a      	str	r2, [r3, #0]

	/* Wait until SB flag is set */
	if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart)
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	2200      	movs	r2, #0
 800278e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 f8c2 	bl	800291c <I2C_WaitOnFlagUntilTimeout>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00d      	beq.n	80027ba <I2C_RequestMemoryRead+0x6e>
			!= HAL_OK)
	{
		if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ac:	d103      	bne.n	80027b6 <I2C_RequestMemoryRead+0x6a>
		{
			hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027b4:	641a      	str	r2, [r3, #64]	; 0x40
		}
		return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e0aa      	b.n	8002910 <I2C_RequestMemoryRead+0x1c4>
	}

	/* Send slave address */
	hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027ba:	897b      	ldrh	r3, [r7, #10]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027c8:	611a      	str	r2, [r3, #16]

	/* Wait until ADDR flag is set */
	if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout,
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	6a3a      	ldr	r2, [r7, #32]
 80027ce:	4952      	ldr	r1, [pc, #328]	; (8002918 <I2C_RequestMemoryRead+0x1cc>)
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 f91d 	bl	8002a10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <I2C_RequestMemoryRead+0x94>
			Tickstart) != HAL_OK)
	{
		return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e097      	b.n	8002910 <I2C_RequestMemoryRead+0x1c4>
	}

	/* Clear ADDR flag */
	__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	617b      	str	r3, [r7, #20]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	697b      	ldr	r3, [r7, #20]

	/* Wait until TXE flag is set */
	if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f8:	6a39      	ldr	r1, [r7, #32]
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 f9a8 	bl	8002b50 <I2C_WaitOnTXEFlagUntilTimeout>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00d      	beq.n	8002822 <I2C_RequestMemoryRead+0xd6>
	{
		if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	2b04      	cmp	r3, #4
 800280c:	d107      	bne.n	800281e <I2C_RequestMemoryRead+0xd2>
		{
			/* Generate Stop */
			SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800281c:	601a      	str	r2, [r3, #0]
		}
		return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e076      	b.n	8002910 <I2C_RequestMemoryRead+0x1c4>
	}

	/* If Memory address size is 8Bit */
	if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002822:	88fb      	ldrh	r3, [r7, #6]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d105      	bne.n	8002834 <I2C_RequestMemoryRead+0xe8>
	{
		/* Send Memory Address */
		hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002828:	893b      	ldrh	r3, [r7, #8]
 800282a:	b2da      	uxtb	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	611a      	str	r2, [r3, #16]
 8002832:	e021      	b.n	8002878 <I2C_RequestMemoryRead+0x12c>
	}
	/* If Memory address size is 16Bit */
	else
	{
		/* Send MSB of Memory Address */
		hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002834:	893b      	ldrh	r3, [r7, #8]
 8002836:	0a1b      	lsrs	r3, r3, #8
 8002838:	b29b      	uxth	r3, r3
 800283a:	b2da      	uxtb	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	611a      	str	r2, [r3, #16]

		/* Wait until TXE flag is set */
		if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002844:	6a39      	ldr	r1, [r7, #32]
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 f982 	bl	8002b50 <I2C_WaitOnTXEFlagUntilTimeout>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00d      	beq.n	800286e <I2C_RequestMemoryRead+0x122>
		{
			if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	2b04      	cmp	r3, #4
 8002858:	d107      	bne.n	800286a <I2C_RequestMemoryRead+0x11e>
			{
				/* Generate Stop */
				SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002868:	601a      	str	r2, [r3, #0]
			}
			return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e050      	b.n	8002910 <I2C_RequestMemoryRead+0x1c4>
		}

		/* Send LSB of Memory Address */
		hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800286e:	893b      	ldrh	r3, [r7, #8]
 8002870:	b2da      	uxtb	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	611a      	str	r2, [r3, #16]
	}

	/* Wait until TXE flag is set */
	if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287a:	6a39      	ldr	r1, [r7, #32]
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 f967 	bl	8002b50 <I2C_WaitOnTXEFlagUntilTimeout>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00d      	beq.n	80028a4 <I2C_RequestMemoryRead+0x158>
	{
		if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	2b04      	cmp	r3, #4
 800288e:	d107      	bne.n	80028a0 <I2C_RequestMemoryRead+0x154>
		{
			/* Generate Stop */
			SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800289e:	601a      	str	r2, [r3, #0]
		}
		return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e035      	b.n	8002910 <I2C_RequestMemoryRead+0x1c4>
	}

	/* Generate Restart */
	SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028b2:	601a      	str	r2, [r3, #0]

	/* Wait until SB flag is set */
	if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart)
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 f82b 	bl	800291c <I2C_WaitOnFlagUntilTimeout>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00d      	beq.n	80028e8 <I2C_RequestMemoryRead+0x19c>
			!= HAL_OK)
	{
		if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028da:	d103      	bne.n	80028e4 <I2C_RequestMemoryRead+0x198>
		{
			hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028e2:	641a      	str	r2, [r3, #64]	; 0x40
		}
		return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e013      	b.n	8002910 <I2C_RequestMemoryRead+0x1c4>
	}

	/* Send slave address */
	hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80028e8:	897b      	ldrh	r3, [r7, #10]
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	611a      	str	r2, [r3, #16]

	/* Wait until ADDR flag is set */
	if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout,
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	6a3a      	ldr	r2, [r7, #32]
 80028fc:	4906      	ldr	r1, [pc, #24]	; (8002918 <I2C_RequestMemoryRead+0x1cc>)
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 f886 	bl	8002a10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <I2C_RequestMemoryRead+0x1c2>
			Tickstart) != HAL_OK)
	{
		return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <I2C_RequestMemoryRead+0x1c4>
	}

	return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	00010002 	.word	0x00010002

0800291c <I2C_WaitOnFlagUntilTimeout>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c,
		uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	603b      	str	r3, [r7, #0]
 8002928:	4613      	mov	r3, r2
 800292a:	71fb      	strb	r3, [r7, #7]
	/* Wait until flag is set */
	while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800292c:	e048      	b.n	80029c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
	{
		/* Check for the Timeout */
		if (Timeout != HAL_MAX_DELAY)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002934:	d044      	beq.n	80029c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
		{
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002936:	f7fe fb4f 	bl	8000fd8 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d302      	bcc.n	800294c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d139      	bne.n	80029c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
			{
				if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	0c1b      	lsrs	r3, r3, #16
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b01      	cmp	r3, #1
 8002954:	d10d      	bne.n	8002972 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	43da      	mvns	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	4013      	ands	r3, r2
 8002962:	b29b      	uxth	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	bf0c      	ite	eq
 8002968:	2301      	moveq	r3, #1
 800296a:	2300      	movne	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	461a      	mov	r2, r3
 8002970:	e00c      	b.n	800298c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	43da      	mvns	r2, r3
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	4013      	ands	r3, r2
 800297e:	b29b      	uxth	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	bf0c      	ite	eq
 8002984:	2301      	moveq	r3, #1
 8002986:	2300      	movne	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	461a      	mov	r2, r3
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	429a      	cmp	r2, r3
 8002990:	d116      	bne.n	80029c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
				{
					hi2c->PreviousState = I2C_STATE_NONE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	631a      	str	r2, [r3, #48]	; 0x30
					hi2c->State = HAL_I2C_STATE_READY;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2220      	movs	r2, #32
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
					hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	f043 0220 	orr.w	r2, r3, #32
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	641a      	str	r2, [r3, #64]	; 0x40

					/* Process Unlocked */
					__HAL_UNLOCK(hi2c);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

					return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e023      	b.n	8002a08 <I2C_WaitOnFlagUntilTimeout+0xec>
	while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	0c1b      	lsrs	r3, r3, #16
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d10d      	bne.n	80029e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	43da      	mvns	r2, r3
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	4013      	ands	r3, r2
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	bf0c      	ite	eq
 80029dc:	2301      	moveq	r3, #1
 80029de:	2300      	movne	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	e00c      	b.n	8002a00 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	43da      	mvns	r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	4013      	ands	r3, r2
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	bf0c      	ite	eq
 80029f8:	2301      	moveq	r3, #1
 80029fa:	2300      	movne	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	461a      	mov	r2, r3
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d093      	beq.n	800292e <I2C_WaitOnFlagUntilTimeout+0x12>
				}
			}
		}
	}
	return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(
		I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout,
		uint32_t Tickstart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
 8002a1c:	603b      	str	r3, [r7, #0]
	while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a1e:	e071      	b.n	8002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
	{
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a2e:	d123      	bne.n	8002a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
		{
			/* Generate Stop */
			SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a3e:	601a      	str	r2, [r3, #0]

			/* Clear AF Flag */
			__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a48:	615a      	str	r2, [r3, #20]

			hi2c->PreviousState = I2C_STATE_NONE;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	631a      	str	r2, [r3, #48]	; 0x30
			hi2c->State = HAL_I2C_STATE_READY;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2220      	movs	r2, #32
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
			hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
			hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a64:	f043 0204 	orr.w	r2, r3, #4
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	641a      	str	r2, [r3, #64]	; 0x40

			/* Process Unlocked */
			__HAL_UNLOCK(hi2c);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

			return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e067      	b.n	8002b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
		}

		/* Check for the Timeout */
		if (Timeout != HAL_MAX_DELAY)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7e:	d041      	beq.n	8002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
		{
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a80:	f7fe faaa 	bl	8000fd8 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d302      	bcc.n	8002a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d136      	bne.n	8002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
			{
				if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	0c1b      	lsrs	r3, r3, #16
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d10c      	bne.n	8002aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	43da      	mvns	r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	bf14      	ite	ne
 8002ab2:	2301      	movne	r3, #1
 8002ab4:	2300      	moveq	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	e00b      	b.n	8002ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	43da      	mvns	r2, r3
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	bf14      	ite	ne
 8002acc:	2301      	movne	r3, #1
 8002ace:	2300      	moveq	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d016      	beq.n	8002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
				{
					hi2c->PreviousState = I2C_STATE_NONE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	631a      	str	r2, [r3, #48]	; 0x30
					hi2c->State = HAL_I2C_STATE_READY;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
					hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	f043 0220 	orr.w	r2, r3, #32
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	641a      	str	r2, [r3, #64]	; 0x40

					/* Process Unlocked */
					__HAL_UNLOCK(hi2c);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

					return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e021      	b.n	8002b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
	while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	0c1b      	lsrs	r3, r3, #16
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d10c      	bne.n	8002b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	43da      	mvns	r2, r3
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	bf14      	ite	ne
 8002b20:	2301      	movne	r3, #1
 8002b22:	2300      	moveq	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	e00b      	b.n	8002b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	43da      	mvns	r2, r3
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4013      	ands	r3, r2
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	bf14      	ite	ne
 8002b3a:	2301      	movne	r3, #1
 8002b3c:	2300      	moveq	r3, #0
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f47f af6d 	bne.w	8002a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
				}
			}
		}
	}
	return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <I2C_WaitOnTXEFlagUntilTimeout>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c,
		uint32_t Timeout, uint32_t Tickstart)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b5c:	e034      	b.n	8002bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
	{
		/* Check if a NACK is detected */
		if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 f8e3 	bl	8002d2a <I2C_IsAcknowledgeFailed>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
		{
			return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e034      	b.n	8002bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
		}

		/* Check for the Timeout */
		if (Timeout != HAL_MAX_DELAY)
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b74:	d028      	beq.n	8002bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
		{
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b76:	f7fe fa2f 	bl	8000fd8 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d302      	bcc.n	8002b8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d11d      	bne.n	8002bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
			{
				if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b96:	2b80      	cmp	r3, #128	; 0x80
 8002b98:	d016      	beq.n	8002bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
				{
					hi2c->PreviousState = I2C_STATE_NONE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	631a      	str	r2, [r3, #48]	; 0x30
					hi2c->State = HAL_I2C_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
					hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	f043 0220 	orr.w	r2, r3, #32
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	641a      	str	r2, [r3, #64]	; 0x40

					/* Process Unlocked */
					__HAL_UNLOCK(hi2c);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

					return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e007      	b.n	8002bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd2:	2b80      	cmp	r3, #128	; 0x80
 8002bd4:	d1c3      	bne.n	8002b5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
				}
			}
		}
	}
	return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <I2C_WaitOnBTFFlagUntilTimeout>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c,
		uint32_t Timeout, uint32_t Tickstart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bec:	e034      	b.n	8002c58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
	{
		/* Check if a NACK is detected */
		if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 f89b 	bl	8002d2a <I2C_IsAcknowledgeFailed>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
		{
			return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e034      	b.n	8002c68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
		}

		/* Check for the Timeout */
		if (Timeout != HAL_MAX_DELAY)
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c04:	d028      	beq.n	8002c58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
		{
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c06:	f7fe f9e7 	bl	8000fd8 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d302      	bcc.n	8002c1c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d11d      	bne.n	8002c58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
			{
				if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d016      	beq.n	8002c58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
				{
					hi2c->PreviousState = I2C_STATE_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	631a      	str	r2, [r3, #48]	; 0x30
					hi2c->State = HAL_I2C_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
					hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	f043 0220 	orr.w	r2, r3, #32
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	641a      	str	r2, [r3, #64]	; 0x40

					/* Process Unlocked */
					__HAL_UNLOCK(hi2c);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

					return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e007      	b.n	8002c68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	f003 0304 	and.w	r3, r3, #4
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d1c3      	bne.n	8002bee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
				}
			}
		}
	}
	return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <I2C_WaitOnRXNEFlagUntilTimeout>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c,
		uint32_t Timeout, uint32_t Tickstart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]

	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c7c:	e049      	b.n	8002d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
	{
		/* Check if a STOPF is detected */
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	f003 0310 	and.w	r3, r3, #16
 8002c88:	2b10      	cmp	r3, #16
 8002c8a:	d119      	bne.n	8002cc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
		{
			/* Clear STOP Flag */
			__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f06f 0210 	mvn.w	r2, #16
 8002c94:	615a      	str	r2, [r3, #20]

			hi2c->PreviousState = I2C_STATE_NONE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	631a      	str	r2, [r3, #48]	; 0x30
			hi2c->State = HAL_I2C_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
			hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
			hi2c->ErrorCode |= HAL_I2C_ERROR_NONE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	641a      	str	r2, [r3, #64]	; 0x40

			/* Process Unlocked */
			__HAL_UNLOCK(hi2c);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

			return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e030      	b.n	8002d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
		}

		/* Check for the Timeout */
		if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc0:	f7fe f98a 	bl	8000fd8 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d302      	bcc.n	8002cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d11d      	bne.n	8002d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
		{
			if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce0:	2b40      	cmp	r3, #64	; 0x40
 8002ce2:	d016      	beq.n	8002d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
			{
				hi2c->PreviousState = I2C_STATE_NONE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	631a      	str	r2, [r3, #48]	; 0x30
				hi2c->State = HAL_I2C_STATE_READY;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2220      	movs	r2, #32
 8002cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
				hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
				hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	f043 0220 	orr.w	r2, r3, #32
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40

				/* Process Unlocked */
				__HAL_UNLOCK(hi2c);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

				return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e007      	b.n	8002d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1c:	2b40      	cmp	r3, #64	; 0x40
 8002d1e:	d1ae      	bne.n	8002c7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
			}
		}
	}
	return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <I2C_IsAcknowledgeFailed>:
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d40:	d11b      	bne.n	8002d7a <I2C_IsAcknowledgeFailed+0x50>
	{
		/* Clear NACKF Flag */
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d4a:	615a      	str	r2, [r3, #20]

		hi2c->PreviousState = I2C_STATE_NONE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	631a      	str	r2, [r3, #48]	; 0x30
		hi2c->State = HAL_I2C_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2220      	movs	r2, #32
 8002d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f043 0204 	orr.w	r2, r3, #4
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	641a      	str	r2, [r3, #64]	; 0x40

		/* Process Unlocked */
		__HAL_UNLOCK(hi2c);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <I2C_IsAcknowledgeFailed+0x52>
	}
	return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <HAL_I2CEx_ConfigAnalogFilter>:
 * @param  AnalogFilter new state of the Analog filter.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c,
		uint32_t AnalogFilter)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
	/* Check the parameters */
	assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
	assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

	if (hi2c->State == HAL_I2C_STATE_READY)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b20      	cmp	r3, #32
 8002d9c:	d129      	bne.n	8002df2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
	{
		hi2c->State = HAL_I2C_STATE_BUSY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2224      	movs	r2, #36	; 0x24
 8002da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

		/* Disable the selected I2C peripheral */
		__HAL_I2C_DISABLE(hi2c);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0201 	bic.w	r2, r2, #1
 8002db4:	601a      	str	r2, [r3, #0]

		/* Reset I2Cx ANOFF bit */
		hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0210 	bic.w	r2, r2, #16
 8002dc4:	625a      	str	r2, [r3, #36]	; 0x24

		/* Disable the analog filter */
		hi2c->Instance->FLTR |= AnalogFilter;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	625a      	str	r2, [r3, #36]	; 0x24

		__HAL_I2C_ENABLE(hi2c);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f042 0201 	orr.w	r2, r2, #1
 8002de4:	601a      	str	r2, [r3, #0]

		hi2c->State = HAL_I2C_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2220      	movs	r2, #32
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

		return HAL_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	e000      	b.n	8002df4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
	}
	else
	{
		return HAL_BUSY;
 8002df2:	2302      	movs	r3, #2
	}
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_I2CEx_ConfigDigitalFilter>:
 * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c,
		uint32_t DigitalFilter)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
	uint16_t tmpreg = 0;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	81fb      	strh	r3, [r7, #14]

	/* Check the parameters */
	assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
	assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

	if (hi2c->State == HAL_I2C_STATE_READY)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b20      	cmp	r3, #32
 8002e18:	d12a      	bne.n	8002e70 <HAL_I2CEx_ConfigDigitalFilter+0x70>
	{
		hi2c->State = HAL_I2C_STATE_BUSY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2224      	movs	r2, #36	; 0x24
 8002e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

		/* Disable the selected I2C peripheral */
		__HAL_I2C_DISABLE(hi2c);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0201 	bic.w	r2, r2, #1
 8002e30:	601a      	str	r2, [r3, #0]

		/* Get the old register value */
		tmpreg = hi2c->Instance->FLTR;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	81fb      	strh	r3, [r7, #14]

		/* Reset I2Cx DNF bit [3:0] */
		tmpreg &= ~(I2C_FLTR_DNF);
 8002e3a:	89fb      	ldrh	r3, [r7, #14]
 8002e3c:	f023 030f 	bic.w	r3, r3, #15
 8002e40:	81fb      	strh	r3, [r7, #14]

		/* Set I2Cx DNF coefficient */
		tmpreg |= DigitalFilter;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	89fb      	ldrh	r3, [r7, #14]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	81fb      	strh	r3, [r7, #14]

		/* Store the new register value */
		hi2c->Instance->FLTR = tmpreg;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	89fa      	ldrh	r2, [r7, #14]
 8002e52:	625a      	str	r2, [r3, #36]	; 0x24

		__HAL_I2C_ENABLE(hi2c);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0201 	orr.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]

		hi2c->State = HAL_I2C_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

		return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	e000      	b.n	8002e72 <HAL_I2CEx_ConfigDigitalFilter+0x72>
	}
	else
	{
		return HAL_BUSY;
 8002e70:	2302      	movs	r3, #2
	}
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3714      	adds	r7, #20
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
	...

08002e80 <HAL_RCC_OscConfig>:
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(
		RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
	uint32_t tickstart, pll_config;

	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_RCC_OscConfig+0x12>
	{
		return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e267      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
	}

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d075      	beq.n	8002f8a <HAL_RCC_OscConfig+0x10a>
			== RCC_OSCILLATORTYPE_HSE)
	{
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
		/* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002e9e:	4b88      	ldr	r3, [pc, #544]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 030c 	and.w	r3, r3, #12
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d00c      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x44>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002eaa:	4b85      	ldr	r3, [pc, #532]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 030c 	and.w	r3, r3, #12
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d112      	bne.n	8002edc <HAL_RCC_OscConfig+0x5c>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8002eb6:	4b82      	ldr	r3, [pc, #520]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ebe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ec2:	d10b      	bne.n	8002edc <HAL_RCC_OscConfig+0x5c>
								== RCC_PLLCFGR_PLLSRC_HSE)))
		{
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ec4:	4b7e      	ldr	r3, [pc, #504]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d05b      	beq.n	8002f88 <HAL_RCC_OscConfig+0x108>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d157      	bne.n	8002f88 <HAL_RCC_OscConfig+0x108>
			{
				return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e242      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
			}
		}
		else
		{
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee4:	d106      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x74>
 8002ee6:	4b76      	ldr	r3, [pc, #472]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a75      	ldr	r2, [pc, #468]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	e01d      	b.n	8002f30 <HAL_RCC_OscConfig+0xb0>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002efc:	d10c      	bne.n	8002f18 <HAL_RCC_OscConfig+0x98>
 8002efe:	4b70      	ldr	r3, [pc, #448]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a6f      	ldr	r2, [pc, #444]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	4b6d      	ldr	r3, [pc, #436]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a6c      	ldr	r2, [pc, #432]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	e00b      	b.n	8002f30 <HAL_RCC_OscConfig+0xb0>
 8002f18:	4b69      	ldr	r3, [pc, #420]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a68      	ldr	r2, [pc, #416]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f22:	6013      	str	r3, [r2, #0]
 8002f24:	4b66      	ldr	r3, [pc, #408]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a65      	ldr	r2, [pc, #404]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f2e:	6013      	str	r3, [r2, #0]

			/* Check the HSE State */
			if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d013      	beq.n	8002f60 <HAL_RCC_OscConfig+0xe0>
			{
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8002f38:	f7fe f84e 	bl	8000fd8 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0xd2>
				{
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f40:	f7fe f84a 	bl	8000fd8 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b64      	cmp	r3, #100	; 0x64
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0xd2>
					{
						return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e207      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f52:	4b5b      	ldr	r3, [pc, #364]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0f0      	beq.n	8002f40 <HAL_RCC_OscConfig+0xc0>
 8002f5e:	e014      	b.n	8002f8a <HAL_RCC_OscConfig+0x10a>
				}
			}
			else
			{
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8002f60:	f7fe f83a 	bl	8000fd8 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is bypassed or disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0xfa>
				{
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f68:	f7fe f836 	bl	8000fd8 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b64      	cmp	r3, #100	; 0x64
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0xfa>
					{
						return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e1f3      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7a:	4b51      	ldr	r3, [pc, #324]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0xe8>
 8002f86:	e000      	b.n	8002f8a <HAL_RCC_OscConfig+0x10a>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f88:	bf00      	nop
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d063      	beq.n	800305e <HAL_RCC_OscConfig+0x1de>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f96:	4b4a      	ldr	r3, [pc, #296]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 030c 	and.w	r3, r3, #12
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00b      	beq.n	8002fba <HAL_RCC_OscConfig+0x13a>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002fa2:	4b47      	ldr	r3, [pc, #284]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 030c 	and.w	r3, r3, #12
 8002faa:	2b08      	cmp	r3, #8
 8002fac:	d11c      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x168>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8002fae:	4b44      	ldr	r3, [pc, #272]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d116      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x168>
								== RCC_PLLCFGR_PLLSRC_HSI)))
		{
			/* When HSI is used as system clock it will not disabled */
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fba:	4b41      	ldr	r3, [pc, #260]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d005      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x152>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d001      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x152>
			{
				return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e1c7      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
			}
			/* Otherwise, just the calibration is allowed */
			else
			{
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8002fd2:	4b3b      	ldr	r3, [pc, #236]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	4937      	ldr	r1, [pc, #220]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe6:	e03a      	b.n	800305e <HAL_RCC_OscConfig+0x1de>
			}
		}
		else
		{
			/* Check the HSI State */
			if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d020      	beq.n	8003032 <HAL_RCC_OscConfig+0x1b2>
			{
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 8002ff0:	4b34      	ldr	r3, [pc, #208]	; (80030c4 <HAL_RCC_OscConfig+0x244>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8002ff6:	f7fd ffef 	bl	8000fd8 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x190>
				{
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ffe:	f7fd ffeb 	bl	8000fd8 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x190>
					{
						return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e1a8      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003010:	4b2b      	ldr	r3, [pc, #172]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f0      	beq.n	8002ffe <HAL_RCC_OscConfig+0x17e>
					}
				}

				/* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 800301c:	4b28      	ldr	r3, [pc, #160]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	4925      	ldr	r1, [pc, #148]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 800302c:	4313      	orrs	r3, r2
 800302e:	600b      	str	r3, [r1, #0]
 8003030:	e015      	b.n	800305e <HAL_RCC_OscConfig+0x1de>
						RCC_OscInitStruct->HSICalibrationValue);
			}
			else
			{
				/* Disable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_DISABLE();
 8003032:	4b24      	ldr	r3, [pc, #144]	; (80030c4 <HAL_RCC_OscConfig+0x244>)
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8003038:	f7fd ffce 	bl	8000fd8 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x1d2>
				{
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003040:	f7fd ffca 	bl	8000fd8 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x1d2>
					{
						return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e187      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003052:	4b1b      	ldr	r3, [pc, #108]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0x1c0>
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b00      	cmp	r3, #0
 8003068:	d036      	beq.n	80030d8 <HAL_RCC_OscConfig+0x258>
	{
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d016      	beq.n	80030a0 <HAL_RCC_OscConfig+0x220>
		{
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 8003072:	4b15      	ldr	r3, [pc, #84]	; (80030c8 <HAL_RCC_OscConfig+0x248>)
 8003074:	2201      	movs	r2, #1
 8003076:	601a      	str	r2, [r3, #0]

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8003078:	f7fd ffae 	bl	8000fd8 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x212>
			{
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003080:	f7fd ffaa 	bl	8000fd8 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x212>
				{
					return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e167      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003092:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_RCC_OscConfig+0x240>)
 8003094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0f0      	beq.n	8003080 <HAL_RCC_OscConfig+0x200>
 800309e:	e01b      	b.n	80030d8 <HAL_RCC_OscConfig+0x258>
			}
		}
		else
		{
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 80030a0:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <HAL_RCC_OscConfig+0x248>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]

			/* Get Start Tick */
			tickstart = HAL_GetTick();
 80030a6:	f7fd ff97 	bl	8000fd8 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ac:	e00e      	b.n	80030cc <HAL_RCC_OscConfig+0x24c>
			{
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ae:	f7fd ff93 	bl	8000fd8 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d907      	bls.n	80030cc <HAL_RCC_OscConfig+0x24c>
				{
					return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e150      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
 80030c0:	40023800 	.word	0x40023800
 80030c4:	42470000 	.word	0x42470000
 80030c8:	42470e80 	.word	0x42470e80
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030cc:	4b88      	ldr	r3, [pc, #544]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 80030ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1ea      	bne.n	80030ae <HAL_RCC_OscConfig+0x22e>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 8097 	beq.w	8003214 <HAL_RCC_OscConfig+0x394>
			== RCC_OSCILLATORTYPE_LSE)
	{
		FlagStatus pwrclkchanged = RESET;
 80030e6:	2300      	movs	r3, #0
 80030e8:	75fb      	strb	r3, [r7, #23]
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ea:	4b81      	ldr	r3, [pc, #516]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10f      	bne.n	8003116 <HAL_RCC_OscConfig+0x296>
		{
			__HAL_RCC_PWR_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	4b7d      	ldr	r3, [pc, #500]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	4a7c      	ldr	r2, [pc, #496]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003104:	6413      	str	r3, [r2, #64]	; 0x40
 8003106:	4b7a      	ldr	r3, [pc, #488]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310e:	60bb      	str	r3, [r7, #8]
 8003110:	68bb      	ldr	r3, [r7, #8]
			pwrclkchanged = SET;
 8003112:	2301      	movs	r3, #1
 8003114:	75fb      	strb	r3, [r7, #23]
		}

		if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003116:	4b77      	ldr	r3, [pc, #476]	; (80032f4 <HAL_RCC_OscConfig+0x474>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311e:	2b00      	cmp	r3, #0
 8003120:	d118      	bne.n	8003154 <HAL_RCC_OscConfig+0x2d4>
		{
			/* Enable write access to Backup domain */
			SET_BIT(PWR->CR, PWR_CR_DBP);
 8003122:	4b74      	ldr	r3, [pc, #464]	; (80032f4 <HAL_RCC_OscConfig+0x474>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a73      	ldr	r2, [pc, #460]	; (80032f4 <HAL_RCC_OscConfig+0x474>)
 8003128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312c:	6013      	str	r3, [r2, #0]

			/* Wait for Backup domain Write protection disable */
			tickstart = HAL_GetTick();
 800312e:	f7fd ff53 	bl	8000fd8 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x2c8>
			{
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003136:	f7fd ff4f 	bl	8000fd8 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x2c8>
				{
					return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e10c      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003148:	4b6a      	ldr	r3, [pc, #424]	; (80032f4 <HAL_RCC_OscConfig+0x474>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f0      	beq.n	8003136 <HAL_RCC_OscConfig+0x2b6>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d106      	bne.n	800316a <HAL_RCC_OscConfig+0x2ea>
 800315c:	4b64      	ldr	r3, [pc, #400]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 800315e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003160:	4a63      	ldr	r2, [pc, #396]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	6713      	str	r3, [r2, #112]	; 0x70
 8003168:	e01c      	b.n	80031a4 <HAL_RCC_OscConfig+0x324>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	2b05      	cmp	r3, #5
 8003170:	d10c      	bne.n	800318c <HAL_RCC_OscConfig+0x30c>
 8003172:	4b5f      	ldr	r3, [pc, #380]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003176:	4a5e      	ldr	r2, [pc, #376]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003178:	f043 0304 	orr.w	r3, r3, #4
 800317c:	6713      	str	r3, [r2, #112]	; 0x70
 800317e:	4b5c      	ldr	r3, [pc, #368]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003182:	4a5b      	ldr	r2, [pc, #364]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	6713      	str	r3, [r2, #112]	; 0x70
 800318a:	e00b      	b.n	80031a4 <HAL_RCC_OscConfig+0x324>
 800318c:	4b58      	ldr	r3, [pc, #352]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 800318e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003190:	4a57      	ldr	r2, [pc, #348]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003192:	f023 0301 	bic.w	r3, r3, #1
 8003196:	6713      	str	r3, [r2, #112]	; 0x70
 8003198:	4b55      	ldr	r3, [pc, #340]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 800319a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319c:	4a54      	ldr	r2, [pc, #336]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 800319e:	f023 0304 	bic.w	r3, r3, #4
 80031a2:	6713      	str	r3, [r2, #112]	; 0x70
		/* Check the LSE State */
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d015      	beq.n	80031d8 <HAL_RCC_OscConfig+0x358>
		{
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80031ac:	f7fd ff14 	bl	8000fd8 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b2:	e00a      	b.n	80031ca <HAL_RCC_OscConfig+0x34a>
			{
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b4:	f7fd ff10 	bl	8000fd8 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x34a>
				{
					return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e0cb      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ca:	4b49      	ldr	r3, [pc, #292]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0ee      	beq.n	80031b4 <HAL_RCC_OscConfig+0x334>
 80031d6:	e014      	b.n	8003202 <HAL_RCC_OscConfig+0x382>
			}
		}
		else
		{
			/* Get Start Tick */
			tickstart = HAL_GetTick();
 80031d8:	f7fd fefe 	bl	8000fd8 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031de:	e00a      	b.n	80031f6 <HAL_RCC_OscConfig+0x376>
			{
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e0:	f7fd fefa 	bl	8000fd8 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x376>
				{
					return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e0b5      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f6:	4b3e      	ldr	r3, [pc, #248]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 80031f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1ee      	bne.n	80031e0 <HAL_RCC_OscConfig+0x360>
				}
			}
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET)
 8003202:	7dfb      	ldrb	r3, [r7, #23]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d105      	bne.n	8003214 <HAL_RCC_OscConfig+0x394>
		{
			__HAL_RCC_PWR_CLK_DISABLE();
 8003208:	4b39      	ldr	r3, [pc, #228]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	4a38      	ldr	r2, [pc, #224]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 800320e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003212:	6413      	str	r3, [r2, #64]	; 0x40
		}
	}
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 80a1 	beq.w	8003360 <HAL_RCC_OscConfig+0x4e0>
	{
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800321e:	4b34      	ldr	r3, [pc, #208]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b08      	cmp	r3, #8
 8003228:	d05c      	beq.n	80032e4 <HAL_RCC_OscConfig+0x464>
		{
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d141      	bne.n	80032b6 <HAL_RCC_OscConfig+0x436>
				assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
				assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
				assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8003232:	4b31      	ldr	r3, [pc, #196]	; (80032f8 <HAL_RCC_OscConfig+0x478>)
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8003238:	f7fd fece 	bl	8000fd8 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x3d2>
				{
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003240:	f7fd feca 	bl	8000fd8 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x3d2>
					{
						return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e087      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003252:	4b27      	ldr	r3, [pc, #156]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0x3c0>
					}
				}

				/* Configure the main PLL clock source, multiplication and division factors. */
				WRITE_REG(RCC->PLLCFGR,
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69da      	ldr	r2, [r3, #28]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	019b      	lsls	r3, r3, #6
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003274:	085b      	lsrs	r3, r3, #1
 8003276:	3b01      	subs	r3, #1
 8003278:	041b      	lsls	r3, r3, #16
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003280:	061b      	lsls	r3, r3, #24
 8003282:	491b      	ldr	r1, [pc, #108]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003284:	4313      	orrs	r3, r2
 8003286:	604b      	str	r3, [r1, #4]
						(RCC_OscInitStruct->PLL.PLLSource | RCC_OscInitStruct->PLL.PLLM | (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos) | (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
				/* Enable the main PLL. */
				__HAL_RCC_PLL_ENABLE();
 8003288:	4b1b      	ldr	r3, [pc, #108]	; (80032f8 <HAL_RCC_OscConfig+0x478>)
 800328a:	2201      	movs	r2, #1
 800328c:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 800328e:	f7fd fea3 	bl	8000fd8 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x428>
				{
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003296:	f7fd fe9f 	bl	8000fd8 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x428>
					{
						return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e05c      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a8:	4b11      	ldr	r3, [pc, #68]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0f0      	beq.n	8003296 <HAL_RCC_OscConfig+0x416>
 80032b4:	e054      	b.n	8003360 <HAL_RCC_OscConfig+0x4e0>
				}
			}
			else
			{
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 80032b6:	4b10      	ldr	r3, [pc, #64]	; (80032f8 <HAL_RCC_OscConfig+0x478>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 80032bc:	f7fd fe8c 	bl	8000fd8 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x456>
				{
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c4:	f7fd fe88 	bl	8000fd8 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x456>
					{
						return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e045      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d6:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <HAL_RCC_OscConfig+0x470>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f0      	bne.n	80032c4 <HAL_RCC_OscConfig+0x444>
 80032e2:	e03d      	b.n	8003360 <HAL_RCC_OscConfig+0x4e0>
			}
		}
		else
		{
			/* Check if there is a request to disable the PLL used as System clock source */
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d107      	bne.n	80032fc <HAL_RCC_OscConfig+0x47c>
			{
				return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e038      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
 80032f0:	40023800 	.word	0x40023800
 80032f4:	40007000 	.word	0x40007000
 80032f8:	42470060 	.word	0x42470060
			}
			else
			{
				/* Do not return HAL_ERROR if request repeats the current configuration */
				pll_config = RCC->PLLCFGR;
 80032fc:	4b1b      	ldr	r3, [pc, #108]	; (800336c <HAL_RCC_OscConfig+0x4ec>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
				if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d028      	beq.n	800335c <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
								!= RCC_OscInitStruct->PLL.PLLSource)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69db      	ldr	r3, [r3, #28]
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 8003314:	429a      	cmp	r2, r3
 8003316:	d121      	bne.n	800335c <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
								!= (RCC_OscInitStruct->PLL.PLLM)
										<< RCC_PLLCFGR_PLLM_Pos)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8003322:	429a      	cmp	r2, r3
 8003324:	d11a      	bne.n	800335c <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800332c:	4013      	ands	r3, r2
								!= (RCC_OscInitStruct->PLL.PLLN)
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6a52      	ldr	r2, [r2, #36]	; 0x24
										<< RCC_PLLCFGR_PLLN_Pos)
 8003332:	0192      	lsls	r2, r2, #6
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 8003334:	4293      	cmp	r3, r2
 8003336:	d111      	bne.n	800335c <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
								!= (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003342:	085b      	lsrs	r3, r3, #1
 8003344:	3b01      	subs	r3, #1
										<< RCC_PLLCFGR_PLLP_Pos)
 8003346:	041b      	lsls	r3, r3, #16
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 8003348:	429a      	cmp	r2, r3
 800334a:	d107      	bne.n	800335c <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
								!= (RCC_OscInitStruct->PLL.PLLQ
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
										<< RCC_PLLCFGR_PLLQ_Pos)))
 8003356:	061b      	lsls	r3, r3, #24
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 8003358:	429a      	cmp	r2, r3
 800335a:	d001      	beq.n	8003360 <HAL_RCC_OscConfig+0x4e0>
#endif
				{
					return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e000      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
				}
			}
		}
	}
	return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40023800 	.word	0x40023800

08003370 <HAL_RCC_ClockConfig>:
 *         (for more details refer to section above "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t FLatency)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
	uint32_t tickstart;

	/* Check Null pointer */
	if (RCC_ClkInitStruct == NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_RCC_ClockConfig+0x14>
	{
		return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e0cc      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
	/* To correctly read data from FLASH memory, the number of wait states (LATENCY)
	 must be correctly programmed according to the frequency of the CPU clock
	 (HCLK) and the supply voltage of the device. */

	/* Increasing the number of wait states because of higher CPU frequency */
	if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003384:	4b68      	ldr	r3, [pc, #416]	; (8003528 <HAL_RCC_ClockConfig+0x1b8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 030f 	and.w	r3, r3, #15
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	429a      	cmp	r2, r3
 8003390:	d90c      	bls.n	80033ac <HAL_RCC_ClockConfig+0x3c>
	{
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8003392:	4b65      	ldr	r3, [pc, #404]	; (8003528 <HAL_RCC_ClockConfig+0x1b8>)
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	701a      	strb	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800339a:	4b63      	ldr	r3, [pc, #396]	; (8003528 <HAL_RCC_ClockConfig+0x1b8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d001      	beq.n	80033ac <HAL_RCC_ClockConfig+0x3c>
		{
			return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e0b8      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
		}
	}

	/*-------------------------- HCLK Configuration --------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d020      	beq.n	80033fa <HAL_RCC_ClockConfig+0x8a>
			== RCC_CLOCKTYPE_HCLK)
	{
		/* Set the highest APBx dividers in order to ensure that we do not go through
		 a non-spec phase whatever we decrease or increase HCLK. */
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d005      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x60>
				== RCC_CLOCKTYPE_PCLK1)
		{
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033c4:	4b59      	ldr	r3, [pc, #356]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	4a58      	ldr	r2, [pc, #352]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033ce:	6093      	str	r3, [r2, #8]
		}

		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0308 	and.w	r3, r3, #8
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d005      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x78>
				== RCC_CLOCKTYPE_PCLK2)
		{
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033dc:	4b53      	ldr	r3, [pc, #332]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	4a52      	ldr	r2, [pc, #328]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033e6:	6093      	str	r3, [r2, #8]
		}

		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e8:	4b50      	ldr	r3, [pc, #320]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	494d      	ldr	r1, [pc, #308]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	608b      	str	r3, [r1, #8]
	}

	/*------------------------- SYSCLK Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d044      	beq.n	8003490 <HAL_RCC_ClockConfig+0x120>
			== RCC_CLOCKTYPE_SYSCLK)
	{
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

		/* HSE is selected as System Clock Source */
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d107      	bne.n	800341e <HAL_RCC_ClockConfig+0xae>
		{
			/* Check the HSE ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340e:	4b47      	ldr	r3, [pc, #284]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d119      	bne.n	800344e <HAL_RCC_ClockConfig+0xde>
			{
				return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e07f      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
			}
		}
		/* PLL is selected as System Clock Source */
		else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b02      	cmp	r3, #2
 8003424:	d003      	beq.n	800342e <HAL_RCC_ClockConfig+0xbe>
				|| (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b03      	cmp	r3, #3
 800342c:	d107      	bne.n	800343e <HAL_RCC_ClockConfig+0xce>
		{
			/* Check the PLL ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342e:	4b3f      	ldr	r3, [pc, #252]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d109      	bne.n	800344e <HAL_RCC_ClockConfig+0xde>
			{
				return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e06f      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
		}
		/* HSI is selected as System Clock Source */
		else
		{
			/* Check the HSI ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343e:	4b3b      	ldr	r3, [pc, #236]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_RCC_ClockConfig+0xde>
			{
				return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e067      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
			}
		}

		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800344e:	4b37      	ldr	r3, [pc, #220]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f023 0203 	bic.w	r2, r3, #3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	4934      	ldr	r1, [pc, #208]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 800345c:	4313      	orrs	r3, r2
 800345e:	608b      	str	r3, [r1, #8]

		/* Get Start Tick */
		tickstart = HAL_GetTick();
 8003460:	f7fd fdba 	bl	8000fd8 <HAL_GetTick>
 8003464:	60f8      	str	r0, [r7, #12]

		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8003466:	e00a      	b.n	800347e <HAL_RCC_ClockConfig+0x10e>
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
		{
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003468:	f7fd fdb6 	bl	8000fd8 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	f241 3288 	movw	r2, #5000	; 0x1388
 8003476:	4293      	cmp	r3, r2
 8003478:	d901      	bls.n	800347e <HAL_RCC_ClockConfig+0x10e>
			{
				return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e04f      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 800347e:	4b2b      	ldr	r3, [pc, #172]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 020c 	and.w	r2, r3, #12
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	429a      	cmp	r2, r3
 800348e:	d1eb      	bne.n	8003468 <HAL_RCC_ClockConfig+0xf8>
			}
		}
	}

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003490:	4b25      	ldr	r3, [pc, #148]	; (8003528 <HAL_RCC_ClockConfig+0x1b8>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d20c      	bcs.n	80034b8 <HAL_RCC_ClockConfig+0x148>
	{
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 800349e:	4b22      	ldr	r3, [pc, #136]	; (8003528 <HAL_RCC_ClockConfig+0x1b8>)
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	701a      	strb	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a6:	4b20      	ldr	r3, [pc, #128]	; (8003528 <HAL_RCC_ClockConfig+0x1b8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d001      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x148>
		{
			return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e032      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
		}
	}

	/*-------------------------- PCLK1 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d008      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x166>
			== RCC_CLOCKTYPE_PCLK1)
	{
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 80034c4:	4b19      	ldr	r3, [pc, #100]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	4916      	ldr	r1, [pc, #88]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	608b      	str	r3, [r1, #8]
				RCC_ClkInitStruct->APB1CLKDivider);
	}

	/*-------------------------- PCLK2 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d009      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x186>
			== RCC_CLOCKTYPE_PCLK2)
	{
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 80034e2:	4b12      	ldr	r3, [pc, #72]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	490e      	ldr	r1, [pc, #56]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	608b      	str	r3, [r1, #8]
				((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
	}

	/* Update the SystemCoreClock global variable */
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 80034f6:	f000 f821 	bl	800353c <HAL_RCC_GetSysClockFreq>
 80034fa:	4602      	mov	r2, r0
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034fc:	4b0b      	ldr	r3, [pc, #44]	; (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	091b      	lsrs	r3, r3, #4
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	490a      	ldr	r1, [pc, #40]	; (8003530 <HAL_RCC_ClockConfig+0x1c0>)
 8003508:	5ccb      	ldrb	r3, [r1, r3]
 800350a:	fa22 f303 	lsr.w	r3, r2, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 800350e:	4a09      	ldr	r2, [pc, #36]	; (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 8003510:	6013      	str	r3, [r2, #0]

	/* Configure the source of time base considering new system clocks settings */
	HAL_InitTick(uwTickPrio);
 8003512:	4b09      	ldr	r3, [pc, #36]	; (8003538 <HAL_RCC_ClockConfig+0x1c8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f7fd fd1a 	bl	8000f50 <HAL_InitTick>

	return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40023c00 	.word	0x40023c00
 800352c:	40023800 	.word	0x40023800
 8003530:	080063a8 	.word	0x080063a8
 8003534:	20000000 	.word	0x20000000
 8003538:	20000010 	.word	0x20000010

0800353c <HAL_RCC_GetSysClockFreq>:
 *
 *
 * @retval SYSCLK frequency
 */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800353c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003540:	b094      	sub	sp, #80	; 0x50
 8003542:	af00      	add	r7, sp, #0
	uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	647b      	str	r3, [r7, #68]	; 0x44
 8003548:	2300      	movs	r3, #0
 800354a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800354c:	2300      	movs	r3, #0
 800354e:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t sysclockfreq = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	64bb      	str	r3, [r7, #72]	; 0x48

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (RCC->CFGR & RCC_CFGR_SWS)
 8003554:	4b79      	ldr	r3, [pc, #484]	; (800373c <HAL_RCC_GetSysClockFreq+0x200>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 030c 	and.w	r3, r3, #12
 800355c:	2b08      	cmp	r3, #8
 800355e:	d00d      	beq.n	800357c <HAL_RCC_GetSysClockFreq+0x40>
 8003560:	2b08      	cmp	r3, #8
 8003562:	f200 80e1 	bhi.w	8003728 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003566:	2b00      	cmp	r3, #0
 8003568:	d002      	beq.n	8003570 <HAL_RCC_GetSysClockFreq+0x34>
 800356a:	2b04      	cmp	r3, #4
 800356c:	d003      	beq.n	8003576 <HAL_RCC_GetSysClockFreq+0x3a>
 800356e:	e0db      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0x1ec>
	{
	case RCC_CFGR_SWS_HSI: /* HSI used as system clock source */
	{
		sysclockfreq = HSI_VALUE;
 8003570:	4b73      	ldr	r3, [pc, #460]	; (8003740 <HAL_RCC_GetSysClockFreq+0x204>)
 8003572:	64bb      	str	r3, [r7, #72]	; 0x48
		break;
 8003574:	e0db      	b.n	800372e <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	case RCC_CFGR_SWS_HSE: /* HSE used as system clock  source */
	{
		sysclockfreq = HSE_VALUE;
 8003576:	4b73      	ldr	r3, [pc, #460]	; (8003744 <HAL_RCC_GetSysClockFreq+0x208>)
 8003578:	64bb      	str	r3, [r7, #72]	; 0x48
		break;
 800357a:	e0d8      	b.n	800372e <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	case RCC_CFGR_SWS_PLL: /* PLL used as system clock  source */
	{
		/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
		 SYSCLK = PLL_VCO / PLLP */
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800357c:	4b6f      	ldr	r3, [pc, #444]	; (800373c <HAL_RCC_GetSysClockFreq+0x200>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003584:	647b      	str	r3, [r7, #68]	; 0x44
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003586:	4b6d      	ldr	r3, [pc, #436]	; (800373c <HAL_RCC_GetSysClockFreq+0x200>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d063      	beq.n	800365a <HAL_RCC_GetSysClockFreq+0x11e>
		{
			/* HSE used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8003592:	4b6a      	ldr	r3, [pc, #424]	; (800373c <HAL_RCC_GetSysClockFreq+0x200>)
 8003594:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8003596:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8003598:	2200      	movs	r2, #0
 800359a:	63bb      	str	r3, [r7, #56]	; 0x38
 800359c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800359e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035a4:	633b      	str	r3, [r7, #48]	; 0x30
 80035a6:	2300      	movs	r3, #0
 80035a8:	637b      	str	r3, [r7, #52]	; 0x34
 80035aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035ae:	4622      	mov	r2, r4
 80035b0:	462b      	mov	r3, r5
 80035b2:	f04f 0000 	mov.w	r0, #0
 80035b6:	f04f 0100 	mov.w	r1, #0
 80035ba:	0159      	lsls	r1, r3, #5
 80035bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035c0:	0150      	lsls	r0, r2, #5
 80035c2:	4602      	mov	r2, r0
 80035c4:	460b      	mov	r3, r1
 80035c6:	4621      	mov	r1, r4
 80035c8:	1a51      	subs	r1, r2, r1
 80035ca:	6139      	str	r1, [r7, #16]
 80035cc:	4629      	mov	r1, r5
 80035ce:	eb63 0301 	sbc.w	r3, r3, r1
 80035d2:	617b      	str	r3, [r7, #20]
 80035d4:	f04f 0200 	mov.w	r2, #0
 80035d8:	f04f 0300 	mov.w	r3, #0
 80035dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035e0:	4659      	mov	r1, fp
 80035e2:	018b      	lsls	r3, r1, #6
 80035e4:	4651      	mov	r1, sl
 80035e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035ea:	4651      	mov	r1, sl
 80035ec:	018a      	lsls	r2, r1, #6
 80035ee:	4651      	mov	r1, sl
 80035f0:	ebb2 0801 	subs.w	r8, r2, r1
 80035f4:	4659      	mov	r1, fp
 80035f6:	eb63 0901 	sbc.w	r9, r3, r1
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003606:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800360a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800360e:	4690      	mov	r8, r2
 8003610:	4699      	mov	r9, r3
 8003612:	4623      	mov	r3, r4
 8003614:	eb18 0303 	adds.w	r3, r8, r3
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	462b      	mov	r3, r5
 800361c:	eb49 0303 	adc.w	r3, r9, r3
 8003620:	60fb      	str	r3, [r7, #12]
 8003622:	f04f 0200 	mov.w	r2, #0
 8003626:	f04f 0300 	mov.w	r3, #0
 800362a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800362e:	4629      	mov	r1, r5
 8003630:	024b      	lsls	r3, r1, #9
 8003632:	4621      	mov	r1, r4
 8003634:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003638:	4621      	mov	r1, r4
 800363a:	024a      	lsls	r2, r1, #9
 800363c:	4610      	mov	r0, r2
 800363e:	4619      	mov	r1, r3
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8003640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003642:	2200      	movs	r2, #0
 8003644:	62bb      	str	r3, [r7, #40]	; 0x28
 8003646:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003648:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800364c:	f7fc fdd6 	bl	80001fc <__aeabi_uldivmod>
 8003650:	4602      	mov	r2, r0
 8003652:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 8003654:	4613      	mov	r3, r2
 8003656:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003658:	e058      	b.n	800370c <HAL_RCC_GetSysClockFreq+0x1d0>
		}
		else
		{
			/* HSI used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 800365a:	4b38      	ldr	r3, [pc, #224]	; (800373c <HAL_RCC_GetSysClockFreq+0x200>)
 800365c:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 800365e:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8003660:	2200      	movs	r2, #0
 8003662:	4618      	mov	r0, r3
 8003664:	4611      	mov	r1, r2
 8003666:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800366a:	623b      	str	r3, [r7, #32]
 800366c:	2300      	movs	r3, #0
 800366e:	627b      	str	r3, [r7, #36]	; 0x24
 8003670:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003674:	4642      	mov	r2, r8
 8003676:	464b      	mov	r3, r9
 8003678:	f04f 0000 	mov.w	r0, #0
 800367c:	f04f 0100 	mov.w	r1, #0
 8003680:	0159      	lsls	r1, r3, #5
 8003682:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003686:	0150      	lsls	r0, r2, #5
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4641      	mov	r1, r8
 800368e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003692:	4649      	mov	r1, r9
 8003694:	eb63 0b01 	sbc.w	fp, r3, r1
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	f04f 0300 	mov.w	r3, #0
 80036a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036ac:	ebb2 040a 	subs.w	r4, r2, sl
 80036b0:	eb63 050b 	sbc.w	r5, r3, fp
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	f04f 0300 	mov.w	r3, #0
 80036bc:	00eb      	lsls	r3, r5, #3
 80036be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036c2:	00e2      	lsls	r2, r4, #3
 80036c4:	4614      	mov	r4, r2
 80036c6:	461d      	mov	r5, r3
 80036c8:	4643      	mov	r3, r8
 80036ca:	18e3      	adds	r3, r4, r3
 80036cc:	603b      	str	r3, [r7, #0]
 80036ce:	464b      	mov	r3, r9
 80036d0:	eb45 0303 	adc.w	r3, r5, r3
 80036d4:	607b      	str	r3, [r7, #4]
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036e2:	4629      	mov	r1, r5
 80036e4:	028b      	lsls	r3, r1, #10
 80036e6:	4621      	mov	r1, r4
 80036e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036ec:	4621      	mov	r1, r4
 80036ee:	028a      	lsls	r2, r1, #10
 80036f0:	4610      	mov	r0, r2
 80036f2:	4619      	mov	r1, r3
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80036f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036f6:	2200      	movs	r2, #0
 80036f8:	61bb      	str	r3, [r7, #24]
 80036fa:	61fa      	str	r2, [r7, #28]
 80036fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003700:	f7fc fd7c 	bl	80001fc <__aeabi_uldivmod>
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 8003708:	4613      	mov	r3, r2
 800370a:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 800370c:	4b0b      	ldr	r3, [pc, #44]	; (800373c <HAL_RCC_GetSysClockFreq+0x200>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	0c1b      	lsrs	r3, r3, #16
 8003712:	f003 0303 	and.w	r3, r3, #3
				+ 1U) * 2U);
 8003716:	3301      	adds	r3, #1
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	643b      	str	r3, [r7, #64]	; 0x40

		sysclockfreq = pllvco / pllp;
 800371c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800371e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003720:	fbb2 f3f3 	udiv	r3, r2, r3
 8003724:	64bb      	str	r3, [r7, #72]	; 0x48
		break;
 8003726:	e002      	b.n	800372e <HAL_RCC_GetSysClockFreq+0x1f2>
	}
	default:
	{
		sysclockfreq = HSI_VALUE;
 8003728:	4b05      	ldr	r3, [pc, #20]	; (8003740 <HAL_RCC_GetSysClockFreq+0x204>)
 800372a:	64bb      	str	r3, [r7, #72]	; 0x48
		break;
 800372c:	bf00      	nop
	}
	}
	return sysclockfreq;
 800372e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003730:	4618      	mov	r0, r3
 8003732:	3750      	adds	r7, #80	; 0x50
 8003734:	46bd      	mov	sp, r7
 8003736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800373a:	bf00      	nop
 800373c:	40023800 	.word	0x40023800
 8003740:	00f42400 	.word	0x00f42400
 8003744:	007a1200 	.word	0x007a1200

08003748 <HAL_RCC_GetHCLKFreq>:
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
 *         and updated within this function
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
	return SystemCoreClock;
 800374c:	4b03      	ldr	r3, [pc, #12]	; (800375c <HAL_RCC_GetHCLKFreq+0x14>)
 800374e:	681b      	ldr	r3, [r3, #0]
}
 8003750:	4618      	mov	r0, r3
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	20000000 	.word	0x20000000

08003760 <HAL_RCC_GetPCLK1Freq>:
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8003764:	f7ff fff0 	bl	8003748 <HAL_RCC_GetHCLKFreq>
 8003768:	4602      	mov	r2, r0
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800376a:	4b05      	ldr	r3, [pc, #20]	; (8003780 <HAL_RCC_GetPCLK1Freq+0x20>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	0a9b      	lsrs	r3, r3, #10
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	4903      	ldr	r1, [pc, #12]	; (8003784 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003776:	5ccb      	ldrb	r3, [r1, r3]
 8003778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800377c:	4618      	mov	r0, r3
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40023800 	.word	0x40023800
 8003784:	080063b8 	.word	0x080063b8

08003788 <HAL_RCC_GetPCLK2Freq>:
 * @note   Each time PCLK2 changes, this function must be called to update the
 *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK2 frequency
 */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 800378c:	f7ff ffdc 	bl	8003748 <HAL_RCC_GetHCLKFreq>
 8003790:	4602      	mov	r2, r0
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003792:	4b05      	ldr	r3, [pc, #20]	; (80037a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	0b5b      	lsrs	r3, r3, #13
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	4903      	ldr	r1, [pc, #12]	; (80037ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800379e:	5ccb      	ldrb	r3, [r1, r3]
 80037a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40023800 	.word	0x40023800
 80037ac:	080063b8 	.word	0x080063b8

080037b0 <HAL_TIM_Base_Init>:
 *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
 * @param  htim TIM Base handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
	/* Check the TIM handle allocation */
	if (htim == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_TIM_Base_Init+0x12>
	{
		return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e041      	b.n	8003846 <HAL_TIM_Base_Init+0x96>
	assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
	assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
	assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
	assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

	if (htim->State == HAL_TIM_STATE_RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d106      	bne.n	80037dc <HAL_TIM_Base_Init+0x2c>
	{
		/* Allocate lock resource and initialize it */
		htim->Lock = HAL_UNLOCKED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC */
		HAL_TIM_Base_MspInit(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7fd f9b4 	bl	8000b44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
	}

	/* Set the TIM state */
	htim->State = HAL_TIM_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Set the Time Base configuration */
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3304      	adds	r3, #4
 80037ec:	4619      	mov	r1, r3
 80037ee:	4610      	mov	r0, r2
 80037f0:	f000 fd8e 	bl	8004310 <TIM_Base_SetConfig>

	/* Initialize the DMA burst operation state */
	htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

	/* Initialize the TIM channels state */
	TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	/* Initialize the TIM state*/
	htim->State = HAL_TIM_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_TIM_PWM_Init>:
 *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
 * @param  htim TIM PWM handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b082      	sub	sp, #8
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
	/* Check the TIM handle allocation */
	if (htim == NULL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <HAL_TIM_PWM_Init+0x12>
	{
		return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e041      	b.n	80038e4 <HAL_TIM_PWM_Init+0x96>
	assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
	assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
	assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
	assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

	if (htim->State == HAL_TIM_STATE_RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d106      	bne.n	800387a <HAL_TIM_PWM_Init+0x2c>
	{
		/* Allocate lock resource and initialize it */
		htim->Lock = HAL_UNLOCKED;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
		HAL_TIM_PWM_MspInit(htim);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f839 	bl	80038ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
	}

	/* Set the TIM state */
	htim->State = HAL_TIM_STATE_BUSY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2202      	movs	r2, #2
 800387e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Init the base time for the PWM */
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	3304      	adds	r3, #4
 800388a:	4619      	mov	r1, r3
 800388c:	4610      	mov	r0, r2
 800388e:	f000 fd3f 	bl	8004310 <TIM_Base_SetConfig>

	/* Initialize the DMA burst operation state */
	htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

	/* Initialize the TIM channels state */
	TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	/* Initialize the TIM state*/
	htim->State = HAL_TIM_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <HAL_TIM_PWM_MspInit>:
 * @brief  Initializes the TIM PWM MSP.
 * @param  htim TIM PWM handle
 * @retval None
 */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIM_PWM_MspInit could be implemented in the user file
	 */
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_TIM_PWM_Start_DMA>:
 * @param  Length The length of data to be transferred from memory to TIM peripheral
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim,
		uint32_t Channel, const uint32_t *pData, uint16_t Length)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
 800390c:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	75fb      	strb	r3, [r7, #23]

	/* Check the parameters */
	assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

	/* Set the TIM channel state */
	if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d109      	bne.n	800392c <HAL_TIM_PWM_Start_DMA+0x2c>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	bf0c      	ite	eq
 8003924:	2301      	moveq	r3, #1
 8003926:	2300      	movne	r3, #0
 8003928:	b2db      	uxtb	r3, r3
 800392a:	e022      	b.n	8003972 <HAL_TIM_PWM_Start_DMA+0x72>
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2b04      	cmp	r3, #4
 8003930:	d109      	bne.n	8003946 <HAL_TIM_PWM_Start_DMA+0x46>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	bf0c      	ite	eq
 800393e:	2301      	moveq	r3, #1
 8003940:	2300      	movne	r3, #0
 8003942:	b2db      	uxtb	r3, r3
 8003944:	e015      	b.n	8003972 <HAL_TIM_PWM_Start_DMA+0x72>
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b08      	cmp	r3, #8
 800394a:	d109      	bne.n	8003960 <HAL_TIM_PWM_Start_DMA+0x60>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	bf0c      	ite	eq
 8003958:	2301      	moveq	r3, #1
 800395a:	2300      	movne	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	e008      	b.n	8003972 <HAL_TIM_PWM_Start_DMA+0x72>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	bf0c      	ite	eq
 800396c:	2301      	moveq	r3, #1
 800396e:	2300      	movne	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <HAL_TIM_PWM_Start_DMA+0x7a>
	{
		return HAL_BUSY;
 8003976:	2302      	movs	r3, #2
 8003978:	e171      	b.n	8003c5e <HAL_TIM_PWM_Start_DMA+0x35e>
	}
	else if (TIM_CHANNEL_STATE_GET(htim, Channel)
			== HAL_TIM_CHANNEL_STATE_READY)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d109      	bne.n	8003994 <HAL_TIM_PWM_Start_DMA+0x94>
	else if (TIM_CHANNEL_STATE_GET(htim, Channel)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003986:	b2db      	uxtb	r3, r3
			== HAL_TIM_CHANNEL_STATE_READY)
 8003988:	2b01      	cmp	r3, #1
 800398a:	bf0c      	ite	eq
 800398c:	2301      	moveq	r3, #1
 800398e:	2300      	movne	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	e022      	b.n	80039da <HAL_TIM_PWM_Start_DMA+0xda>
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2b04      	cmp	r3, #4
 8003998:	d109      	bne.n	80039ae <HAL_TIM_PWM_Start_DMA+0xae>
	else if (TIM_CHANNEL_STATE_GET(htim, Channel)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039a0:	b2db      	uxtb	r3, r3
			== HAL_TIM_CHANNEL_STATE_READY)
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	bf0c      	ite	eq
 80039a6:	2301      	moveq	r3, #1
 80039a8:	2300      	movne	r3, #0
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	e015      	b.n	80039da <HAL_TIM_PWM_Start_DMA+0xda>
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d109      	bne.n	80039c8 <HAL_TIM_PWM_Start_DMA+0xc8>
	else if (TIM_CHANNEL_STATE_GET(htim, Channel)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039ba:	b2db      	uxtb	r3, r3
			== HAL_TIM_CHANNEL_STATE_READY)
 80039bc:	2b01      	cmp	r3, #1
 80039be:	bf0c      	ite	eq
 80039c0:	2301      	moveq	r3, #1
 80039c2:	2300      	movne	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	e008      	b.n	80039da <HAL_TIM_PWM_Start_DMA+0xda>
	else if (TIM_CHANNEL_STATE_GET(htim, Channel)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ce:	b2db      	uxtb	r3, r3
			== HAL_TIM_CHANNEL_STATE_READY)
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	bf0c      	ite	eq
 80039d4:	2301      	moveq	r3, #1
 80039d6:	2300      	movne	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
	else if (TIM_CHANNEL_STATE_GET(htim, Channel)
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d024      	beq.n	8003a28 <HAL_TIM_PWM_Start_DMA+0x128>
	{
		if ((pData == NULL) || (Length == 0U))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <HAL_TIM_PWM_Start_DMA+0xea>
 80039e4:	887b      	ldrh	r3, [r7, #2]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_TIM_PWM_Start_DMA+0xee>
		{
			return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e137      	b.n	8003c5e <HAL_TIM_PWM_Start_DMA+0x35e>
		}
		else
		{
			TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d104      	bne.n	80039fe <HAL_TIM_PWM_Start_DMA+0xfe>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039fc:	e016      	b.n	8003a2c <HAL_TIM_PWM_Start_DMA+0x12c>
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	d104      	bne.n	8003a0e <HAL_TIM_PWM_Start_DMA+0x10e>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a0c:	e00e      	b.n	8003a2c <HAL_TIM_PWM_Start_DMA+0x12c>
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2b08      	cmp	r3, #8
 8003a12:	d104      	bne.n	8003a1e <HAL_TIM_PWM_Start_DMA+0x11e>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a1c:	e006      	b.n	8003a2c <HAL_TIM_PWM_Start_DMA+0x12c>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2202      	movs	r2, #2
 8003a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a26:	e001      	b.n	8003a2c <HAL_TIM_PWM_Start_DMA+0x12c>
		}
	}
	else
	{
		return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e118      	b.n	8003c5e <HAL_TIM_PWM_Start_DMA+0x35e>
	}

	switch (Channel)
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2b0c      	cmp	r3, #12
 8003a30:	f200 80ae 	bhi.w	8003b90 <HAL_TIM_PWM_Start_DMA+0x290>
 8003a34:	a201      	add	r2, pc, #4	; (adr r2, 8003a3c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8003a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3a:	bf00      	nop
 8003a3c:	08003a71 	.word	0x08003a71
 8003a40:	08003b91 	.word	0x08003b91
 8003a44:	08003b91 	.word	0x08003b91
 8003a48:	08003b91 	.word	0x08003b91
 8003a4c:	08003ab9 	.word	0x08003ab9
 8003a50:	08003b91 	.word	0x08003b91
 8003a54:	08003b91 	.word	0x08003b91
 8003a58:	08003b91 	.word	0x08003b91
 8003a5c:	08003b01 	.word	0x08003b01
 8003a60:	08003b91 	.word	0x08003b91
 8003a64:	08003b91 	.word	0x08003b91
 8003a68:	08003b91 	.word	0x08003b91
 8003a6c:	08003b49 	.word	0x08003b49
	{
	case TIM_CHANNEL_1:
	{
		/* Set the DMA compare callbacks */
		htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	4a7c      	ldr	r2, [pc, #496]	; (8003c68 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003a76:	63da      	str	r2, [r3, #60]	; 0x3c
		htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback =
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	4a7b      	ldr	r2, [pc, #492]	; (8003c6c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003a7e:	641a      	str	r2, [r3, #64]	; 0x40
				TIM_DMADelayPulseHalfCplt;

		/* Set the DMA error callback */
		htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	4a7a      	ldr	r2, [pc, #488]	; (8003c70 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003a86:	64da      	str	r2, [r3, #76]	; 0x4c

		/* Enable the DMA stream */
		if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t) pData,
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003a8c:	6879      	ldr	r1, [r7, #4]
				(uint32_t) &htim->Instance->CCR1, Length) != HAL_OK)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	3334      	adds	r3, #52	; 0x34
		if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t) pData,
 8003a94:	461a      	mov	r2, r3
 8003a96:	887b      	ldrh	r3, [r7, #2]
 8003a98:	f7fd fc8e 	bl	80013b8 <HAL_DMA_Start_IT>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <HAL_TIM_PWM_Start_DMA+0x1a6>
		{
			/* Return error status */
			return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e0db      	b.n	8003c5e <HAL_TIM_PWM_Start_DMA+0x35e>
		}

		/* Enable the TIM Capture/Compare 1 DMA request */
		__HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68da      	ldr	r2, [r3, #12]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ab4:	60da      	str	r2, [r3, #12]
		break;
 8003ab6:	e06e      	b.n	8003b96 <HAL_TIM_PWM_Start_DMA+0x296>
	}

	case TIM_CHANNEL_2:
	{
		/* Set the DMA compare callbacks */
		htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abc:	4a6a      	ldr	r2, [pc, #424]	; (8003c68 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003abe:	63da      	str	r2, [r3, #60]	; 0x3c
		htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback =
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac4:	4a69      	ldr	r2, [pc, #420]	; (8003c6c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003ac6:	641a      	str	r2, [r3, #64]	; 0x40
				TIM_DMADelayPulseHalfCplt;

		/* Set the DMA error callback */
		htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003acc:	4a68      	ldr	r2, [pc, #416]	; (8003c70 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003ace:	64da      	str	r2, [r3, #76]	; 0x4c

		/* Enable the DMA stream */
		if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t) pData,
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003ad4:	6879      	ldr	r1, [r7, #4]
				(uint32_t) &htim->Instance->CCR2, Length) != HAL_OK)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3338      	adds	r3, #56	; 0x38
		if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t) pData,
 8003adc:	461a      	mov	r2, r3
 8003ade:	887b      	ldrh	r3, [r7, #2]
 8003ae0:	f7fd fc6a 	bl	80013b8 <HAL_DMA_Start_IT>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_TIM_PWM_Start_DMA+0x1ee>
		{
			/* Return error status */
			return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e0b7      	b.n	8003c5e <HAL_TIM_PWM_Start_DMA+0x35e>
		}
		/* Enable the TIM Capture/Compare 2 DMA request */
		__HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68da      	ldr	r2, [r3, #12]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003afc:	60da      	str	r2, [r3, #12]
		break;
 8003afe:	e04a      	b.n	8003b96 <HAL_TIM_PWM_Start_DMA+0x296>
	}

	case TIM_CHANNEL_3:
	{
		/* Set the DMA compare callbacks */
		htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	4a58      	ldr	r2, [pc, #352]	; (8003c68 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003b06:	63da      	str	r2, [r3, #60]	; 0x3c
		htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback =
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0c:	4a57      	ldr	r2, [pc, #348]	; (8003c6c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003b0e:	641a      	str	r2, [r3, #64]	; 0x40
				TIM_DMADelayPulseHalfCplt;

		/* Set the DMA error callback */
		htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	4a56      	ldr	r2, [pc, #344]	; (8003c70 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003b16:	64da      	str	r2, [r3, #76]	; 0x4c

		/* Enable the DMA stream */
		if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t) pData,
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003b1c:	6879      	ldr	r1, [r7, #4]
				(uint32_t) &htim->Instance->CCR3, Length) != HAL_OK)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	333c      	adds	r3, #60	; 0x3c
		if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t) pData,
 8003b24:	461a      	mov	r2, r3
 8003b26:	887b      	ldrh	r3, [r7, #2]
 8003b28:	f7fd fc46 	bl	80013b8 <HAL_DMA_Start_IT>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_TIM_PWM_Start_DMA+0x236>
		{
			/* Return error status */
			return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e093      	b.n	8003c5e <HAL_TIM_PWM_Start_DMA+0x35e>
		}
		/* Enable the TIM Output Capture/Compare 3 request */
		__HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68da      	ldr	r2, [r3, #12]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b44:	60da      	str	r2, [r3, #12]
		break;
 8003b46:	e026      	b.n	8003b96 <HAL_TIM_PWM_Start_DMA+0x296>
	}

	case TIM_CHANNEL_4:
	{
		/* Set the DMA compare callbacks */
		htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4c:	4a46      	ldr	r2, [pc, #280]	; (8003c68 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003b4e:	63da      	str	r2, [r3, #60]	; 0x3c
		htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback =
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b54:	4a45      	ldr	r2, [pc, #276]	; (8003c6c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003b56:	641a      	str	r2, [r3, #64]	; 0x40
				TIM_DMADelayPulseHalfCplt;

		/* Set the DMA error callback */
		htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5c:	4a44      	ldr	r2, [pc, #272]	; (8003c70 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003b5e:	64da      	str	r2, [r3, #76]	; 0x4c

		/* Enable the DMA stream */
		if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t) pData,
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b64:	6879      	ldr	r1, [r7, #4]
				(uint32_t) &htim->Instance->CCR4, Length) != HAL_OK)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	3340      	adds	r3, #64	; 0x40
		if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t) pData,
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	887b      	ldrh	r3, [r7, #2]
 8003b70:	f7fd fc22 	bl	80013b8 <HAL_DMA_Start_IT>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <HAL_TIM_PWM_Start_DMA+0x27e>
		{
			/* Return error status */
			return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e06f      	b.n	8003c5e <HAL_TIM_PWM_Start_DMA+0x35e>
		}
		/* Enable the TIM Capture/Compare 4 DMA request */
		__HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68da      	ldr	r2, [r3, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b8c:	60da      	str	r2, [r3, #12]
		break;
 8003b8e:	e002      	b.n	8003b96 <HAL_TIM_PWM_Start_DMA+0x296>
	}

	default:
		status = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	75fb      	strb	r3, [r7, #23]
		break;
 8003b94:	bf00      	nop
	}

	if (status == HAL_OK)
 8003b96:	7dfb      	ldrb	r3, [r7, #23]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d15f      	bne.n	8003c5c <HAL_TIM_PWM_Start_DMA+0x35c>
	{
		/* Enable the Capture compare channel */
		TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	68b9      	ldr	r1, [r7, #8]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 fea9 	bl	80048fc <TIM_CCxChannelCmd>

		if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a31      	ldr	r2, [pc, #196]	; (8003c74 <HAL_TIM_PWM_Start_DMA+0x374>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d004      	beq.n	8003bbe <HAL_TIM_PWM_Start_DMA+0x2be>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a2f      	ldr	r2, [pc, #188]	; (8003c78 <HAL_TIM_PWM_Start_DMA+0x378>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d101      	bne.n	8003bc2 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e000      	b.n	8003bc4 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d007      	beq.n	8003bd8 <HAL_TIM_PWM_Start_DMA+0x2d8>
		{
			/* Enable the main output */
			__HAL_TIM_MOE_ENABLE(htim);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bd6:	645a      	str	r2, [r3, #68]	; 0x44
		}

		/* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
		if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a25      	ldr	r2, [pc, #148]	; (8003c74 <HAL_TIM_PWM_Start_DMA+0x374>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d022      	beq.n	8003c28 <HAL_TIM_PWM_Start_DMA+0x328>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bea:	d01d      	beq.n	8003c28 <HAL_TIM_PWM_Start_DMA+0x328>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a22      	ldr	r2, [pc, #136]	; (8003c7c <HAL_TIM_PWM_Start_DMA+0x37c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d018      	beq.n	8003c28 <HAL_TIM_PWM_Start_DMA+0x328>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a21      	ldr	r2, [pc, #132]	; (8003c80 <HAL_TIM_PWM_Start_DMA+0x380>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d013      	beq.n	8003c28 <HAL_TIM_PWM_Start_DMA+0x328>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a1f      	ldr	r2, [pc, #124]	; (8003c84 <HAL_TIM_PWM_Start_DMA+0x384>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d00e      	beq.n	8003c28 <HAL_TIM_PWM_Start_DMA+0x328>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a1a      	ldr	r2, [pc, #104]	; (8003c78 <HAL_TIM_PWM_Start_DMA+0x378>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d009      	beq.n	8003c28 <HAL_TIM_PWM_Start_DMA+0x328>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a1b      	ldr	r2, [pc, #108]	; (8003c88 <HAL_TIM_PWM_Start_DMA+0x388>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d004      	beq.n	8003c28 <HAL_TIM_PWM_Start_DMA+0x328>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a1a      	ldr	r2, [pc, #104]	; (8003c8c <HAL_TIM_PWM_Start_DMA+0x38c>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d111      	bne.n	8003c4c <HAL_TIM_PWM_Start_DMA+0x34c>
		{
			tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	613b      	str	r3, [r7, #16]
			if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	2b06      	cmp	r3, #6
 8003c38:	d010      	beq.n	8003c5c <HAL_TIM_PWM_Start_DMA+0x35c>
			{
				__HAL_TIM_ENABLE(htim);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f042 0201 	orr.w	r2, r2, #1
 8003c48:	601a      	str	r2, [r3, #0]
			if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c4a:	e007      	b.n	8003c5c <HAL_TIM_PWM_Start_DMA+0x35c>
			}
		}
		else
		{
			__HAL_TIM_ENABLE(htim);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 0201 	orr.w	r2, r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]
		}
	}

	/* Return function status */
	return status;
 8003c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3718      	adds	r7, #24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	08004201 	.word	0x08004201
 8003c6c:	080042a9 	.word	0x080042a9
 8003c70:	0800416f 	.word	0x0800416f
 8003c74:	40010000 	.word	0x40010000
 8003c78:	40010400 	.word	0x40010400
 8003c7c:	40000400 	.word	0x40000400
 8003c80:	40000800 	.word	0x40000800
 8003c84:	40000c00 	.word	0x40000c00
 8003c88:	40014000 	.word	0x40014000
 8003c8c:	40001800 	.word	0x40001800

08003c90 <HAL_TIM_PWM_Stop_DMA>:
 *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim,
		uint32_t Channel)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	73fb      	strb	r3, [r7, #15]

	/* Check the parameters */
	assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

	switch (Channel)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	2b0c      	cmp	r3, #12
 8003ca2:	d855      	bhi.n	8003d50 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003ca4:	a201      	add	r2, pc, #4	; (adr r2, 8003cac <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003caa:	bf00      	nop
 8003cac:	08003ce1 	.word	0x08003ce1
 8003cb0:	08003d51 	.word	0x08003d51
 8003cb4:	08003d51 	.word	0x08003d51
 8003cb8:	08003d51 	.word	0x08003d51
 8003cbc:	08003cfd 	.word	0x08003cfd
 8003cc0:	08003d51 	.word	0x08003d51
 8003cc4:	08003d51 	.word	0x08003d51
 8003cc8:	08003d51 	.word	0x08003d51
 8003ccc:	08003d19 	.word	0x08003d19
 8003cd0:	08003d51 	.word	0x08003d51
 8003cd4:	08003d51 	.word	0x08003d51
 8003cd8:	08003d51 	.word	0x08003d51
 8003cdc:	08003d35 	.word	0x08003d35
	{
	case TIM_CHANNEL_1:
	{
		/* Disable the TIM Capture/Compare 1 DMA request */
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003cee:	60da      	str	r2, [r3, #12]
		(void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fd fbb7 	bl	8001468 <HAL_DMA_Abort_IT>
		break;
 8003cfa:	e02c      	b.n	8003d56 <HAL_TIM_PWM_Stop_DMA+0xc6>
	}

	case TIM_CHANNEL_2:
	{
		/* Disable the TIM Capture/Compare 2 DMA request */
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d0a:	60da      	str	r2, [r3, #12]
		(void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fd fba9 	bl	8001468 <HAL_DMA_Abort_IT>
		break;
 8003d16:	e01e      	b.n	8003d56 <HAL_TIM_PWM_Stop_DMA+0xc6>
	}

	case TIM_CHANNEL_3:
	{
		/* Disable the TIM Capture/Compare 3 DMA request */
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d26:	60da      	str	r2, [r3, #12]
		(void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7fd fb9b 	bl	8001468 <HAL_DMA_Abort_IT>
		break;
 8003d32:	e010      	b.n	8003d56 <HAL_TIM_PWM_Stop_DMA+0xc6>
	}

	case TIM_CHANNEL_4:
	{
		/* Disable the TIM Capture/Compare 4 interrupt */
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d42:	60da      	str	r2, [r3, #12]
		(void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fd fb8d 	bl	8001468 <HAL_DMA_Abort_IT>
		break;
 8003d4e:	e002      	b.n	8003d56 <HAL_TIM_PWM_Stop_DMA+0xc6>
	}

	default:
		status = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	73fb      	strb	r3, [r7, #15]
		break;
 8003d54:	bf00      	nop
	}

	if (status == HAL_OK)
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d161      	bne.n	8003e20 <HAL_TIM_PWM_Stop_DMA+0x190>
	{
		/* Disable the Capture compare channel */
		TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2200      	movs	r2, #0
 8003d62:	6839      	ldr	r1, [r7, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 fdc9 	bl	80048fc <TIM_CCxChannelCmd>

		if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a2f      	ldr	r2, [pc, #188]	; (8003e2c <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d004      	beq.n	8003d7e <HAL_TIM_PWM_Stop_DMA+0xee>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a2d      	ldr	r2, [pc, #180]	; (8003e30 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d101      	bne.n	8003d82 <HAL_TIM_PWM_Stop_DMA+0xf2>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e000      	b.n	8003d84 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8003d82:	2300      	movs	r3, #0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d017      	beq.n	8003db8 <HAL_TIM_PWM_Stop_DMA+0x128>
		{
			/* Disable the Main Output */
			__HAL_TIM_MOE_DISABLE(htim);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6a1a      	ldr	r2, [r3, #32]
 8003d8e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d92:	4013      	ands	r3, r2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10f      	bne.n	8003db8 <HAL_TIM_PWM_Stop_DMA+0x128>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6a1a      	ldr	r2, [r3, #32]
 8003d9e:	f240 4344 	movw	r3, #1092	; 0x444
 8003da2:	4013      	ands	r3, r2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d107      	bne.n	8003db8 <HAL_TIM_PWM_Stop_DMA+0x128>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003db6:	645a      	str	r2, [r3, #68]	; 0x44
		}

		/* Disable the Peripheral */
		__HAL_TIM_DISABLE(htim);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6a1a      	ldr	r2, [r3, #32]
 8003dbe:	f241 1311 	movw	r3, #4369	; 0x1111
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10f      	bne.n	8003de8 <HAL_TIM_PWM_Stop_DMA+0x158>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6a1a      	ldr	r2, [r3, #32]
 8003dce:	f240 4344 	movw	r3, #1092	; 0x444
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d107      	bne.n	8003de8 <HAL_TIM_PWM_Stop_DMA+0x158>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 0201 	bic.w	r2, r2, #1
 8003de6:	601a      	str	r2, [r3, #0]

		/* Set the TIM channel state */
		TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d104      	bne.n	8003df8 <HAL_TIM_PWM_Stop_DMA+0x168>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003df6:	e013      	b.n	8003e20 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d104      	bne.n	8003e08 <HAL_TIM_PWM_Stop_DMA+0x178>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e06:	e00b      	b.n	8003e20 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	2b08      	cmp	r3, #8
 8003e0c:	d104      	bne.n	8003e18 <HAL_TIM_PWM_Stop_DMA+0x188>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e16:	e003      	b.n	8003e20 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	/* Return function status */
	return status;
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40010000 	.word	0x40010000
 8003e30:	40010400 	.word	0x40010400

08003e34 <HAL_TIM_PWM_ConfigChannel>:
 *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
		const TIM_OC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8003e40:	2300      	movs	r3, #0
 8003e42:	75fb      	strb	r3, [r7, #23]
	assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
	assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
	assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

	/* Process Locked */
	__HAL_LOCK(htim);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d101      	bne.n	8003e52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e4e:	2302      	movs	r3, #2
 8003e50:	e0ae      	b.n	8003fb0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	switch (Channel)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b0c      	cmp	r3, #12
 8003e5e:	f200 809f 	bhi.w	8003fa0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e62:	a201      	add	r2, pc, #4	; (adr r2, 8003e68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e68:	08003e9d 	.word	0x08003e9d
 8003e6c:	08003fa1 	.word	0x08003fa1
 8003e70:	08003fa1 	.word	0x08003fa1
 8003e74:	08003fa1 	.word	0x08003fa1
 8003e78:	08003edd 	.word	0x08003edd
 8003e7c:	08003fa1 	.word	0x08003fa1
 8003e80:	08003fa1 	.word	0x08003fa1
 8003e84:	08003fa1 	.word	0x08003fa1
 8003e88:	08003f1f 	.word	0x08003f1f
 8003e8c:	08003fa1 	.word	0x08003fa1
 8003e90:	08003fa1 	.word	0x08003fa1
 8003e94:	08003fa1 	.word	0x08003fa1
 8003e98:	08003f5f 	.word	0x08003f5f
	{
		/* Check the parameters */
		assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

		/* Configure the Channel 1 in PWM mode */
		TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68b9      	ldr	r1, [r7, #8]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 fae0 	bl	8004468 <TIM_OC1_SetConfig>

		/* Set the Preload enable bit for channel1 */
		htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699a      	ldr	r2, [r3, #24]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0208 	orr.w	r2, r2, #8
 8003eb6:	619a      	str	r2, [r3, #24]

		/* Configure the Output Fast mode */
		htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699a      	ldr	r2, [r3, #24]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 0204 	bic.w	r2, r2, #4
 8003ec6:	619a      	str	r2, [r3, #24]
		htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6999      	ldr	r1, [r3, #24]
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	691a      	ldr	r2, [r3, #16]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	619a      	str	r2, [r3, #24]
		break;
 8003eda:	e064      	b.n	8003fa6 <HAL_TIM_PWM_ConfigChannel+0x172>
	{
		/* Check the parameters */
		assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

		/* Configure the Channel 2 in PWM mode */
		TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68b9      	ldr	r1, [r7, #8]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 fb30 	bl	8004548 <TIM_OC2_SetConfig>

		/* Set the Preload enable bit for channel2 */
		htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699a      	ldr	r2, [r3, #24]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ef6:	619a      	str	r2, [r3, #24]

		/* Configure the Output Fast mode */
		htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699a      	ldr	r2, [r3, #24]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f06:	619a      	str	r2, [r3, #24]
		htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6999      	ldr	r1, [r3, #24]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	021a      	lsls	r2, r3, #8
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	619a      	str	r2, [r3, #24]
		break;
 8003f1c:	e043      	b.n	8003fa6 <HAL_TIM_PWM_ConfigChannel+0x172>
	{
		/* Check the parameters */
		assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

		/* Configure the Channel 3 in PWM mode */
		TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68b9      	ldr	r1, [r7, #8]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 fb85 	bl	8004634 <TIM_OC3_SetConfig>

		/* Set the Preload enable bit for channel3 */
		htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	69da      	ldr	r2, [r3, #28]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f042 0208 	orr.w	r2, r2, #8
 8003f38:	61da      	str	r2, [r3, #28]

		/* Configure the Output Fast mode */
		htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	69da      	ldr	r2, [r3, #28]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0204 	bic.w	r2, r2, #4
 8003f48:	61da      	str	r2, [r3, #28]
		htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	69d9      	ldr	r1, [r3, #28]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	691a      	ldr	r2, [r3, #16]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	61da      	str	r2, [r3, #28]
		break;
 8003f5c:	e023      	b.n	8003fa6 <HAL_TIM_PWM_ConfigChannel+0x172>
	{
		/* Check the parameters */
		assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

		/* Configure the Channel 4 in PWM mode */
		TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68b9      	ldr	r1, [r7, #8]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 fbd9 	bl	800471c <TIM_OC4_SetConfig>

		/* Set the Preload enable bit for channel4 */
		htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69da      	ldr	r2, [r3, #28]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f78:	61da      	str	r2, [r3, #28]

		/* Configure the Output Fast mode */
		htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	69da      	ldr	r2, [r3, #28]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f88:	61da      	str	r2, [r3, #28]
		htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	69d9      	ldr	r1, [r3, #28]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	021a      	lsls	r2, r3, #8
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	61da      	str	r2, [r3, #28]
		break;
 8003f9e:	e002      	b.n	8003fa6 <HAL_TIM_PWM_ConfigChannel+0x172>
	}

	default:
		status = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	75fb      	strb	r3, [r7, #23]
		break;
 8003fa4:	bf00      	nop
	}

	__HAL_UNLOCK(htim);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	return status;
 8003fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_TIM_ConfigClockSource>:
 *         contains the clock source information for the TIM peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim,
		const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	73fb      	strb	r3, [r7, #15]
	uint32_t tmpsmcr;

	/* Process Locked */
	__HAL_LOCK(htim);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_TIM_ConfigClockSource+0x1c>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e0b4      	b.n	800413e <HAL_TIM_ConfigClockSource+0x186>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	htim->State = HAL_TIM_STATE_BUSY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Check the parameters */
	assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

	/* Reset the SMS, TS, ECE, ETPS and ETRF bits */
	tmpsmcr = htim->Instance->SMCR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	60bb      	str	r3, [r7, #8]
	tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ff2:	60bb      	str	r3, [r7, #8]
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ffa:	60bb      	str	r3, [r7, #8]
	htim->Instance->SMCR = tmpsmcr;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	609a      	str	r2, [r3, #8]

	switch (sClockSourceConfig->ClockSource)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800400c:	d03e      	beq.n	800408c <HAL_TIM_ConfigClockSource+0xd4>
 800400e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004012:	f200 8087 	bhi.w	8004124 <HAL_TIM_ConfigClockSource+0x16c>
 8004016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800401a:	f000 8086 	beq.w	800412a <HAL_TIM_ConfigClockSource+0x172>
 800401e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004022:	d87f      	bhi.n	8004124 <HAL_TIM_ConfigClockSource+0x16c>
 8004024:	2b70      	cmp	r3, #112	; 0x70
 8004026:	d01a      	beq.n	800405e <HAL_TIM_ConfigClockSource+0xa6>
 8004028:	2b70      	cmp	r3, #112	; 0x70
 800402a:	d87b      	bhi.n	8004124 <HAL_TIM_ConfigClockSource+0x16c>
 800402c:	2b60      	cmp	r3, #96	; 0x60
 800402e:	d050      	beq.n	80040d2 <HAL_TIM_ConfigClockSource+0x11a>
 8004030:	2b60      	cmp	r3, #96	; 0x60
 8004032:	d877      	bhi.n	8004124 <HAL_TIM_ConfigClockSource+0x16c>
 8004034:	2b50      	cmp	r3, #80	; 0x50
 8004036:	d03c      	beq.n	80040b2 <HAL_TIM_ConfigClockSource+0xfa>
 8004038:	2b50      	cmp	r3, #80	; 0x50
 800403a:	d873      	bhi.n	8004124 <HAL_TIM_ConfigClockSource+0x16c>
 800403c:	2b40      	cmp	r3, #64	; 0x40
 800403e:	d058      	beq.n	80040f2 <HAL_TIM_ConfigClockSource+0x13a>
 8004040:	2b40      	cmp	r3, #64	; 0x40
 8004042:	d86f      	bhi.n	8004124 <HAL_TIM_ConfigClockSource+0x16c>
 8004044:	2b30      	cmp	r3, #48	; 0x30
 8004046:	d064      	beq.n	8004112 <HAL_TIM_ConfigClockSource+0x15a>
 8004048:	2b30      	cmp	r3, #48	; 0x30
 800404a:	d86b      	bhi.n	8004124 <HAL_TIM_ConfigClockSource+0x16c>
 800404c:	2b20      	cmp	r3, #32
 800404e:	d060      	beq.n	8004112 <HAL_TIM_ConfigClockSource+0x15a>
 8004050:	2b20      	cmp	r3, #32
 8004052:	d867      	bhi.n	8004124 <HAL_TIM_ConfigClockSource+0x16c>
 8004054:	2b00      	cmp	r3, #0
 8004056:	d05c      	beq.n	8004112 <HAL_TIM_ConfigClockSource+0x15a>
 8004058:	2b10      	cmp	r3, #16
 800405a:	d05a      	beq.n	8004112 <HAL_TIM_ConfigClockSource+0x15a>
 800405c:	e062      	b.n	8004124 <HAL_TIM_ConfigClockSource+0x16c>
		assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

		/* Configure the ETR Clock source */
		TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6818      	ldr	r0, [r3, #0]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	6899      	ldr	r1, [r3, #8]
				sClockSourceConfig->ClockPolarity,
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685a      	ldr	r2, [r3, #4]
				sClockSourceConfig->ClockFilter);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
		TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 800406e:	f000 fc25 	bl	80048bc <TIM_ETR_SetConfig>

		/* Select the External clock mode1 and the ETRF trigger */
		tmpsmcr = htim->Instance->SMCR;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	60bb      	str	r3, [r7, #8]
		tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004080:	60bb      	str	r3, [r7, #8]
		/* Write to TIMx SMCR */
		htim->Instance->SMCR = tmpsmcr;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	609a      	str	r2, [r3, #8]
		break;
 800408a:	e04f      	b.n	800412c <HAL_TIM_ConfigClockSource+0x174>
		assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

		/* Configure the ETR Clock source */
		TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6818      	ldr	r0, [r3, #0]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	6899      	ldr	r1, [r3, #8]
				sClockSourceConfig->ClockPolarity,
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685a      	ldr	r2, [r3, #4]
				sClockSourceConfig->ClockFilter);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
		TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 800409c:	f000 fc0e 	bl	80048bc <TIM_ETR_SetConfig>
		/* Enable the External clock mode2 */
		htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040ae:	609a      	str	r2, [r3, #8]
		break;
 80040b0:	e03c      	b.n	800412c <HAL_TIM_ConfigClockSource+0x174>

		/* Check TI1 input conditioning related parameters */
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

		TIM_TI1_ConfigInputStage(htim->Instance,
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6818      	ldr	r0, [r3, #0]
				sClockSourceConfig->ClockPolarity,
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	6859      	ldr	r1, [r3, #4]
				sClockSourceConfig->ClockFilter);
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
		TIM_TI1_ConfigInputStage(htim->Instance,
 80040be:	461a      	mov	r2, r3
 80040c0:	f000 fb82 	bl	80047c8 <TIM_TI1_ConfigInputStage>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2150      	movs	r1, #80	; 0x50
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 fbdb 	bl	8004886 <TIM_ITRx_SetConfig>
		break;
 80040d0:	e02c      	b.n	800412c <HAL_TIM_ConfigClockSource+0x174>

		/* Check TI2 input conditioning related parameters */
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

		TIM_TI2_ConfigInputStage(htim->Instance,
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6818      	ldr	r0, [r3, #0]
				sClockSourceConfig->ClockPolarity,
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	6859      	ldr	r1, [r3, #4]
				sClockSourceConfig->ClockFilter);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
		TIM_TI2_ConfigInputStage(htim->Instance,
 80040de:	461a      	mov	r2, r3
 80040e0:	f000 fba1 	bl	8004826 <TIM_TI2_ConfigInputStage>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2160      	movs	r1, #96	; 0x60
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 fbcb 	bl	8004886 <TIM_ITRx_SetConfig>
		break;
 80040f0:	e01c      	b.n	800412c <HAL_TIM_ConfigClockSource+0x174>

		/* Check TI1 input conditioning related parameters */
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

		TIM_TI1_ConfigInputStage(htim->Instance,
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6818      	ldr	r0, [r3, #0]
				sClockSourceConfig->ClockPolarity,
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	6859      	ldr	r1, [r3, #4]
				sClockSourceConfig->ClockFilter);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
		TIM_TI1_ConfigInputStage(htim->Instance,
 80040fe:	461a      	mov	r2, r3
 8004100:	f000 fb62 	bl	80047c8 <TIM_TI1_ConfigInputStage>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2140      	movs	r1, #64	; 0x40
 800410a:	4618      	mov	r0, r3
 800410c:	f000 fbbb 	bl	8004886 <TIM_ITRx_SetConfig>
		break;
 8004110:	e00c      	b.n	800412c <HAL_TIM_ConfigClockSource+0x174>
	case TIM_CLOCKSOURCE_ITR3:
	{
		/* Check whether or not the timer instance supports internal trigger input */
		assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

		TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4619      	mov	r1, r3
 800411c:	4610      	mov	r0, r2
 800411e:	f000 fbb2 	bl	8004886 <TIM_ITRx_SetConfig>
		break;
 8004122:	e003      	b.n	800412c <HAL_TIM_ConfigClockSource+0x174>
	}

	default:
		status = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	73fb      	strb	r3, [r7, #15]
		break;
 8004128:	e000      	b.n	800412c <HAL_TIM_ConfigClockSource+0x174>
		break;
 800412a:	bf00      	nop
	}
	htim->State = HAL_TIM_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	__HAL_UNLOCK(htim);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	return status;
 800413c:	7bfb      	ldrb	r3, [r7, #15]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
 * @brief  PWM Pulse finished half complete callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
	 */
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <HAL_TIM_ErrorCallback>:
 * @brief  Timer error callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIM_ErrorCallback could be implemented in the user file
	 */
}
 8004162:	bf00      	nop
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <TIM_DMAError>:
 * @brief  TIM DMA error callback
 * @param  hdma pointer to DMA handle.
 * @retval None
 */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b084      	sub	sp, #16
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim =
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417a:	60fb      	str	r3, [r7, #12]
			(TIM_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	429a      	cmp	r2, r3
 8004184:	d107      	bne.n	8004196 <TIM_DMAError+0x28>
	{
		htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2201      	movs	r2, #1
 800418a:	771a      	strb	r2, [r3, #28]
		TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004194:	e02a      	b.n	80041ec <TIM_DMAError+0x7e>
	}
	else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	429a      	cmp	r2, r3
 800419e:	d107      	bne.n	80041b0 <TIM_DMAError+0x42>
	{
		htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2202      	movs	r2, #2
 80041a4:	771a      	strb	r2, [r3, #28]
		TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041ae:	e01d      	b.n	80041ec <TIM_DMAError+0x7e>
	}
	else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d107      	bne.n	80041ca <TIM_DMAError+0x5c>
	{
		htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2204      	movs	r2, #4
 80041be:	771a      	strb	r2, [r3, #28]
		TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041c8:	e010      	b.n	80041ec <TIM_DMAError+0x7e>
	}
	else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d107      	bne.n	80041e4 <TIM_DMAError+0x76>
	{
		htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2208      	movs	r2, #8
 80041d8:	771a      	strb	r2, [r3, #28]
		TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041e2:	e003      	b.n	80041ec <TIM_DMAError+0x7e>
	}
	else
	{
		htim->State = HAL_TIM_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	}

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
	HAL_TIM_ErrorCallback(htim);
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f7ff ffb4 	bl	800415a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

	htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	771a      	strb	r2, [r3, #28]
}
 80041f8:	bf00      	nop
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <TIM_DMADelayPulseCplt>:
 * @brief  TIM DMA Delay Pulse complete callback.
 * @param  hdma pointer to DMA handle.
 * @retval None
 */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim =
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420c:	60fb      	str	r3, [r7, #12]
			(TIM_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	429a      	cmp	r2, r3
 8004216:	d10b      	bne.n	8004230 <TIM_DMADelayPulseCplt+0x30>
	{
		htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2201      	movs	r2, #1
 800421c:	771a      	strb	r2, [r3, #28]

		if (hdma->Init.Mode == DMA_NORMAL)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d136      	bne.n	8004294 <TIM_DMADelayPulseCplt+0x94>
		{
			TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1,
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800422e:	e031      	b.n	8004294 <TIM_DMADelayPulseCplt+0x94>
					HAL_TIM_CHANNEL_STATE_READY);
		}
	}
	else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	429a      	cmp	r2, r3
 8004238:	d10b      	bne.n	8004252 <TIM_DMADelayPulseCplt+0x52>
	{
		htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2202      	movs	r2, #2
 800423e:	771a      	strb	r2, [r3, #28]

		if (hdma->Init.Mode == DMA_NORMAL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d125      	bne.n	8004294 <TIM_DMADelayPulseCplt+0x94>
		{
			TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2,
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004250:	e020      	b.n	8004294 <TIM_DMADelayPulseCplt+0x94>
					HAL_TIM_CHANNEL_STATE_READY);
		}
	}
	else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	429a      	cmp	r2, r3
 800425a:	d10b      	bne.n	8004274 <TIM_DMADelayPulseCplt+0x74>
	{
		htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2204      	movs	r2, #4
 8004260:	771a      	strb	r2, [r3, #28]

		if (hdma->Init.Mode == DMA_NORMAL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d114      	bne.n	8004294 <TIM_DMADelayPulseCplt+0x94>
		{
			TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3,
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004272:	e00f      	b.n	8004294 <TIM_DMADelayPulseCplt+0x94>
					HAL_TIM_CHANNEL_STATE_READY);
		}
	}
	else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	429a      	cmp	r2, r3
 800427c:	d10a      	bne.n	8004294 <TIM_DMADelayPulseCplt+0x94>
	{
		htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2208      	movs	r2, #8
 8004282:	771a      	strb	r2, [r3, #28]

		if (hdma->Init.Mode == DMA_NORMAL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	69db      	ldr	r3, [r3, #28]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d103      	bne.n	8004294 <TIM_DMADelayPulseCplt+0x94>
		{
			TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4,
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
	HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f001 ff8d 	bl	80061b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

	htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	771a      	strb	r2, [r3, #28]
}
 80042a0:	bf00      	nop
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <TIM_DMADelayPulseHalfCplt>:
 * @brief  TIM DMA Delay Pulse half complete callback.
 * @param  hdma pointer to DMA handle.
 * @retval None
 */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim =
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b4:	60fb      	str	r3, [r7, #12]
			(TIM_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d103      	bne.n	80042c8 <TIM_DMADelayPulseHalfCplt+0x20>
	{
		htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2201      	movs	r2, #1
 80042c4:	771a      	strb	r2, [r3, #28]
 80042c6:	e019      	b.n	80042fc <TIM_DMADelayPulseHalfCplt+0x54>
	}
	else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d103      	bne.n	80042da <TIM_DMADelayPulseHalfCplt+0x32>
	{
		htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2202      	movs	r2, #2
 80042d6:	771a      	strb	r2, [r3, #28]
 80042d8:	e010      	b.n	80042fc <TIM_DMADelayPulseHalfCplt+0x54>
	}
	else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d103      	bne.n	80042ec <TIM_DMADelayPulseHalfCplt+0x44>
	{
		htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2204      	movs	r2, #4
 80042e8:	771a      	strb	r2, [r3, #28]
 80042ea:	e007      	b.n	80042fc <TIM_DMADelayPulseHalfCplt+0x54>
	}
	else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d102      	bne.n	80042fc <TIM_DMADelayPulseHalfCplt+0x54>
	{
		htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2208      	movs	r2, #8
 80042fa:	771a      	strb	r2, [r3, #28]
	}

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
	HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f7ff ff22 	bl	8004146 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

	htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	771a      	strb	r2, [r3, #28]
}
 8004308:	bf00      	nop
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <TIM_Base_SetConfig>:
 * @param  Structure TIM Base configuration structure
 * @retval None
 */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx,
		const TIM_Base_InitTypeDef *Structure)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
	uint32_t tmpcr1;
	tmpcr1 = TIMx->CR1;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	60fb      	str	r3, [r7, #12]

	/* Set TIM Time Base Unit parameters ---------------------------------------*/
	if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a46      	ldr	r2, [pc, #280]	; (800443c <TIM_Base_SetConfig+0x12c>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d013      	beq.n	8004350 <TIM_Base_SetConfig+0x40>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800432e:	d00f      	beq.n	8004350 <TIM_Base_SetConfig+0x40>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a43      	ldr	r2, [pc, #268]	; (8004440 <TIM_Base_SetConfig+0x130>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d00b      	beq.n	8004350 <TIM_Base_SetConfig+0x40>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a42      	ldr	r2, [pc, #264]	; (8004444 <TIM_Base_SetConfig+0x134>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d007      	beq.n	8004350 <TIM_Base_SetConfig+0x40>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a41      	ldr	r2, [pc, #260]	; (8004448 <TIM_Base_SetConfig+0x138>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d003      	beq.n	8004350 <TIM_Base_SetConfig+0x40>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a40      	ldr	r2, [pc, #256]	; (800444c <TIM_Base_SetConfig+0x13c>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d108      	bne.n	8004362 <TIM_Base_SetConfig+0x52>
	{
		/* Select the Counter Mode */
		tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004356:	60fb      	str	r3, [r7, #12]
		tmpcr1 |= Structure->CounterMode;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	4313      	orrs	r3, r2
 8004360:	60fb      	str	r3, [r7, #12]
	}

	if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a35      	ldr	r2, [pc, #212]	; (800443c <TIM_Base_SetConfig+0x12c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d02b      	beq.n	80043c2 <TIM_Base_SetConfig+0xb2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004370:	d027      	beq.n	80043c2 <TIM_Base_SetConfig+0xb2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a32      	ldr	r2, [pc, #200]	; (8004440 <TIM_Base_SetConfig+0x130>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d023      	beq.n	80043c2 <TIM_Base_SetConfig+0xb2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a31      	ldr	r2, [pc, #196]	; (8004444 <TIM_Base_SetConfig+0x134>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d01f      	beq.n	80043c2 <TIM_Base_SetConfig+0xb2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a30      	ldr	r2, [pc, #192]	; (8004448 <TIM_Base_SetConfig+0x138>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d01b      	beq.n	80043c2 <TIM_Base_SetConfig+0xb2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a2f      	ldr	r2, [pc, #188]	; (800444c <TIM_Base_SetConfig+0x13c>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d017      	beq.n	80043c2 <TIM_Base_SetConfig+0xb2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a2e      	ldr	r2, [pc, #184]	; (8004450 <TIM_Base_SetConfig+0x140>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d013      	beq.n	80043c2 <TIM_Base_SetConfig+0xb2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a2d      	ldr	r2, [pc, #180]	; (8004454 <TIM_Base_SetConfig+0x144>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d00f      	beq.n	80043c2 <TIM_Base_SetConfig+0xb2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a2c      	ldr	r2, [pc, #176]	; (8004458 <TIM_Base_SetConfig+0x148>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d00b      	beq.n	80043c2 <TIM_Base_SetConfig+0xb2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a2b      	ldr	r2, [pc, #172]	; (800445c <TIM_Base_SetConfig+0x14c>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d007      	beq.n	80043c2 <TIM_Base_SetConfig+0xb2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a2a      	ldr	r2, [pc, #168]	; (8004460 <TIM_Base_SetConfig+0x150>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d003      	beq.n	80043c2 <TIM_Base_SetConfig+0xb2>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a29      	ldr	r2, [pc, #164]	; (8004464 <TIM_Base_SetConfig+0x154>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d108      	bne.n	80043d4 <TIM_Base_SetConfig+0xc4>
	{
		/* Set the clock division */
		tmpcr1 &= ~TIM_CR1_CKD;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c8:	60fb      	str	r3, [r7, #12]
		tmpcr1 |= (uint32_t) Structure->ClockDivision;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]
	}

	/* Set the auto-reload preload */
	MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	4313      	orrs	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]

	TIMx->CR1 = tmpcr1;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	601a      	str	r2, [r3, #0]

	/* Set the Autoreload value */
	TIMx->ARR = (uint32_t) Structure->Period;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Set the Prescaler value */
	TIMx->PSC = Structure->Prescaler;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	629a      	str	r2, [r3, #40]	; 0x28

	if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a10      	ldr	r2, [pc, #64]	; (800443c <TIM_Base_SetConfig+0x12c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d003      	beq.n	8004408 <TIM_Base_SetConfig+0xf8>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a12      	ldr	r2, [pc, #72]	; (800444c <TIM_Base_SetConfig+0x13c>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d103      	bne.n	8004410 <TIM_Base_SetConfig+0x100>
	{
		/* Set the Repetition Counter value */
		TIMx->RCR = Structure->RepetitionCounter;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	691a      	ldr	r2, [r3, #16]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	631a      	str	r2, [r3, #48]	; 0x30
	}

	/* Generate an update event to reload the Prescaler
	 and the repetition counter (only for advanced timer) value immediately */
	TIMx->EGR = TIM_EGR_UG;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	615a      	str	r2, [r3, #20]

	/* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
	if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b01      	cmp	r3, #1
 8004420:	d105      	bne.n	800442e <TIM_Base_SetConfig+0x11e>
	{
		/* Clear the update flag */
		CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f023 0201 	bic.w	r2, r3, #1
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	611a      	str	r2, [r3, #16]
	}
}
 800442e:	bf00      	nop
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	40010000 	.word	0x40010000
 8004440:	40000400 	.word	0x40000400
 8004444:	40000800 	.word	0x40000800
 8004448:	40000c00 	.word	0x40000c00
 800444c:	40010400 	.word	0x40010400
 8004450:	40014000 	.word	0x40014000
 8004454:	40014400 	.word	0x40014400
 8004458:	40014800 	.word	0x40014800
 800445c:	40001800 	.word	0x40001800
 8004460:	40001c00 	.word	0x40001c00
 8004464:	40002000 	.word	0x40002000

08004468 <TIM_OC1_SetConfig>:
 * @param  OC_Config The output configuration structure
 * @retval None
 */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx,
		const TIM_OC_InitTypeDef *OC_Config)
{
 8004468:	b480      	push	{r7}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
	uint32_t tmpccmrx;
	uint32_t tmpccer;
	uint32_t tmpcr2;

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	617b      	str	r3, [r7, #20]

	/* Disable the Channel 1: Reset the CC1E Bit */
	TIMx->CCER &= ~TIM_CCER_CC1E;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	f023 0201 	bic.w	r2, r3, #1
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	621a      	str	r2, [r3, #32]

	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	613b      	str	r3, [r7, #16]

	/* Get the TIMx CCMR1 register value */
	tmpccmrx = TIMx->CCMR1;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Compare Mode Bits */
	tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004496:	60fb      	str	r3, [r7, #12]
	tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f023 0303 	bic.w	r3, r3, #3
 800449e:	60fb      	str	r3, [r7, #12]
	/* Select the Output Compare Mode */
	tmpccmrx |= OC_Config->OCMode;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC1P;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f023 0302 	bic.w	r3, r3, #2
 80044b0:	617b      	str	r3, [r7, #20]
	/* Set the Output Compare Polarity */
	tmpccer |= OC_Config->OCPolarity;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	617b      	str	r3, [r7, #20]

	if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a20      	ldr	r2, [pc, #128]	; (8004540 <TIM_OC1_SetConfig+0xd8>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d003      	beq.n	80044cc <TIM_OC1_SetConfig+0x64>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a1f      	ldr	r2, [pc, #124]	; (8004544 <TIM_OC1_SetConfig+0xdc>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d10c      	bne.n	80044e6 <TIM_OC1_SetConfig+0x7e>
	{
		/* Check parameters */
		assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

		/* Reset the Output N Polarity level */
		tmpccer &= ~TIM_CCER_CC1NP;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f023 0308 	bic.w	r3, r3, #8
 80044d2:	617b      	str	r3, [r7, #20]
		/* Set the Output N Polarity */
		tmpccer |= OC_Config->OCNPolarity;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	4313      	orrs	r3, r2
 80044dc:	617b      	str	r3, [r7, #20]
		/* Reset the Output N State */
		tmpccer &= ~TIM_CCER_CC1NE;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f023 0304 	bic.w	r3, r3, #4
 80044e4:	617b      	str	r3, [r7, #20]
	}

	if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a15      	ldr	r2, [pc, #84]	; (8004540 <TIM_OC1_SetConfig+0xd8>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d003      	beq.n	80044f6 <TIM_OC1_SetConfig+0x8e>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a14      	ldr	r2, [pc, #80]	; (8004544 <TIM_OC1_SetConfig+0xdc>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d111      	bne.n	800451a <TIM_OC1_SetConfig+0xb2>
		/* Check parameters */
		assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

		/* Reset the Output Compare and Output Compare N IDLE State */
		tmpcr2 &= ~TIM_CR2_OIS1;
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044fc:	613b      	str	r3, [r7, #16]
		tmpcr2 &= ~TIM_CR2_OIS1N;
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004504:	613b      	str	r3, [r7, #16]
		/* Set the Output Idle state */
		tmpcr2 |= OC_Config->OCIdleState;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	4313      	orrs	r3, r2
 800450e:	613b      	str	r3, [r7, #16]
		/* Set the Output N Idle state */
		tmpcr2 |= OC_Config->OCNIdleState;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	4313      	orrs	r3, r2
 8004518:	613b      	str	r3, [r7, #16]
	}

	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	605a      	str	r2, [r3, #4]

	/* Write to TIMx CCMR1 */
	TIMx->CCMR1 = tmpccmrx;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	619a      	str	r2, [r3, #24]

	/* Set the Capture Compare Register value */
	TIMx->CCR1 = OC_Config->Pulse;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	635a      	str	r2, [r3, #52]	; 0x34

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	621a      	str	r2, [r3, #32]
}
 8004534:	bf00      	nop
 8004536:	371c      	adds	r7, #28
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	40010000 	.word	0x40010000
 8004544:	40010400 	.word	0x40010400

08004548 <TIM_OC2_SetConfig>:
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config The output configuration structure
 * @retval None
 */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
	uint32_t tmpccmrx;
	uint32_t tmpccer;
	uint32_t tmpcr2;

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	617b      	str	r3, [r7, #20]

	/* Disable the Channel 2: Reset the CC2E Bit */
	TIMx->CCER &= ~TIM_CCER_CC2E;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	f023 0210 	bic.w	r2, r3, #16
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	621a      	str	r2, [r3, #32]

	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	613b      	str	r3, [r7, #16]

	/* Get the TIMx CCMR1 register value */
	tmpccmrx = TIMx->CCMR1;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Compare mode and Capture/Compare selection Bits */
	tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004576:	60fb      	str	r3, [r7, #12]
	tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800457e:	60fb      	str	r3, [r7, #12]

	/* Select the Output Compare Mode */
	tmpccmrx |= (OC_Config->OCMode << 8U);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	021b      	lsls	r3, r3, #8
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	4313      	orrs	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC2P;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f023 0320 	bic.w	r3, r3, #32
 8004592:	617b      	str	r3, [r7, #20]
	/* Set the Output Compare Polarity */
	tmpccer |= (OC_Config->OCPolarity << 4U);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	011b      	lsls	r3, r3, #4
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	4313      	orrs	r3, r2
 800459e:	617b      	str	r3, [r7, #20]

	if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a22      	ldr	r2, [pc, #136]	; (800462c <TIM_OC2_SetConfig+0xe4>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d003      	beq.n	80045b0 <TIM_OC2_SetConfig+0x68>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a21      	ldr	r2, [pc, #132]	; (8004630 <TIM_OC2_SetConfig+0xe8>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d10d      	bne.n	80045cc <TIM_OC2_SetConfig+0x84>
	{
		assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

		/* Reset the Output N Polarity level */
		tmpccer &= ~TIM_CCER_CC2NP;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045b6:	617b      	str	r3, [r7, #20]
		/* Set the Output N Polarity */
		tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	011b      	lsls	r3, r3, #4
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	617b      	str	r3, [r7, #20]
		/* Reset the Output N State */
		tmpccer &= ~TIM_CCER_CC2NE;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ca:	617b      	str	r3, [r7, #20]
	}

	if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a17      	ldr	r2, [pc, #92]	; (800462c <TIM_OC2_SetConfig+0xe4>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d003      	beq.n	80045dc <TIM_OC2_SetConfig+0x94>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a16      	ldr	r2, [pc, #88]	; (8004630 <TIM_OC2_SetConfig+0xe8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d113      	bne.n	8004604 <TIM_OC2_SetConfig+0xbc>
		/* Check parameters */
		assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

		/* Reset the Output Compare and Output Compare N IDLE State */
		tmpcr2 &= ~TIM_CR2_OIS2;
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045e2:	613b      	str	r3, [r7, #16]
		tmpcr2 &= ~TIM_CR2_OIS2N;
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045ea:	613b      	str	r3, [r7, #16]
		/* Set the Output Idle state */
		tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]
		/* Set the Output N Idle state */
		tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	4313      	orrs	r3, r2
 8004602:	613b      	str	r3, [r7, #16]
	}

	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	605a      	str	r2, [r3, #4]

	/* Write to TIMx CCMR1 */
	TIMx->CCMR1 = tmpccmrx;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	619a      	str	r2, [r3, #24]

	/* Set the Capture Compare Register value */
	TIMx->CCR2 = OC_Config->Pulse;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	639a      	str	r2, [r3, #56]	; 0x38

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	621a      	str	r2, [r3, #32]
}
 800461e:	bf00      	nop
 8004620:	371c      	adds	r7, #28
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	40010000 	.word	0x40010000
 8004630:	40010400 	.word	0x40010400

08004634 <TIM_OC3_SetConfig>:
 * @param  OC_Config The output configuration structure
 * @retval None
 */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx,
		const TIM_OC_InitTypeDef *OC_Config)
{
 8004634:	b480      	push	{r7}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
	uint32_t tmpccmrx;
	uint32_t tmpccer;
	uint32_t tmpcr2;

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	617b      	str	r3, [r7, #20]

	/* Disable the Channel 3: Reset the CC2E Bit */
	TIMx->CCER &= ~TIM_CCER_CC3E;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	621a      	str	r2, [r3, #32]

	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	613b      	str	r3, [r7, #16]

	/* Get the TIMx CCMR2 register value */
	tmpccmrx = TIMx->CCMR2;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Compare mode and Capture/Compare selection Bits */
	tmpccmrx &= ~TIM_CCMR2_OC3M;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004662:	60fb      	str	r3, [r7, #12]
	tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f023 0303 	bic.w	r3, r3, #3
 800466a:	60fb      	str	r3, [r7, #12]
	/* Select the Output Compare Mode */
	tmpccmrx |= OC_Config->OCMode;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	4313      	orrs	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC3P;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800467c:	617b      	str	r3, [r7, #20]
	/* Set the Output Compare Polarity */
	tmpccer |= (OC_Config->OCPolarity << 8U);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	021b      	lsls	r3, r3, #8
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	4313      	orrs	r3, r2
 8004688:	617b      	str	r3, [r7, #20]

	if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a21      	ldr	r2, [pc, #132]	; (8004714 <TIM_OC3_SetConfig+0xe0>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d003      	beq.n	800469a <TIM_OC3_SetConfig+0x66>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a20      	ldr	r2, [pc, #128]	; (8004718 <TIM_OC3_SetConfig+0xe4>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d10d      	bne.n	80046b6 <TIM_OC3_SetConfig+0x82>
	{
		assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

		/* Reset the Output N Polarity level */
		tmpccer &= ~TIM_CCER_CC3NP;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046a0:	617b      	str	r3, [r7, #20]
		/* Set the Output N Polarity */
		tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	021b      	lsls	r3, r3, #8
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]
		/* Reset the Output N State */
		tmpccer &= ~TIM_CCER_CC3NE;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046b4:	617b      	str	r3, [r7, #20]
	}

	if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a16      	ldr	r2, [pc, #88]	; (8004714 <TIM_OC3_SetConfig+0xe0>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d003      	beq.n	80046c6 <TIM_OC3_SetConfig+0x92>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a15      	ldr	r2, [pc, #84]	; (8004718 <TIM_OC3_SetConfig+0xe4>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d113      	bne.n	80046ee <TIM_OC3_SetConfig+0xba>
		/* Check parameters */
		assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

		/* Reset the Output Compare and Output Compare N IDLE State */
		tmpcr2 &= ~TIM_CR2_OIS3;
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046cc:	613b      	str	r3, [r7, #16]
		tmpcr2 &= ~TIM_CR2_OIS3N;
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046d4:	613b      	str	r3, [r7, #16]
		/* Set the Output Idle state */
		tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	011b      	lsls	r3, r3, #4
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	4313      	orrs	r3, r2
 80046e0:	613b      	str	r3, [r7, #16]
		/* Set the Output N Idle state */
		tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
	}

	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	605a      	str	r2, [r3, #4]

	/* Write to TIMx CCMR2 */
	TIMx->CCMR2 = tmpccmrx;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	61da      	str	r2, [r3, #28]

	/* Set the Capture Compare Register value */
	TIMx->CCR3 = OC_Config->Pulse;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	63da      	str	r2, [r3, #60]	; 0x3c

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	621a      	str	r2, [r3, #32]
}
 8004708:	bf00      	nop
 800470a:	371c      	adds	r7, #28
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	40010000 	.word	0x40010000
 8004718:	40010400 	.word	0x40010400

0800471c <TIM_OC4_SetConfig>:
 * @param  OC_Config The output configuration structure
 * @retval None
 */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx,
		const TIM_OC_InitTypeDef *OC_Config)
{
 800471c:	b480      	push	{r7}
 800471e:	b087      	sub	sp, #28
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
	uint32_t tmpccmrx;
	uint32_t tmpccer;
	uint32_t tmpcr2;

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	613b      	str	r3, [r7, #16]

	/* Disable the Channel 4: Reset the CC4E Bit */
	TIMx->CCER &= ~TIM_CCER_CC4E;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	621a      	str	r2, [r3, #32]

	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	617b      	str	r3, [r7, #20]

	/* Get the TIMx CCMR2 register value */
	tmpccmrx = TIMx->CCMR2;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Compare mode and Capture/Compare selection Bits */
	tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800474a:	60fb      	str	r3, [r7, #12]
	tmpccmrx &= ~TIM_CCMR2_CC4S;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004752:	60fb      	str	r3, [r7, #12]

	/* Select the Output Compare Mode */
	tmpccmrx |= (OC_Config->OCMode << 8U);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	021b      	lsls	r3, r3, #8
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	4313      	orrs	r3, r2
 800475e:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC4P;
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004766:	613b      	str	r3, [r7, #16]
	/* Set the Output Compare Polarity */
	tmpccer |= (OC_Config->OCPolarity << 12U);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	031b      	lsls	r3, r3, #12
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	4313      	orrs	r3, r2
 8004772:	613b      	str	r3, [r7, #16]

	if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a12      	ldr	r2, [pc, #72]	; (80047c0 <TIM_OC4_SetConfig+0xa4>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d003      	beq.n	8004784 <TIM_OC4_SetConfig+0x68>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a11      	ldr	r2, [pc, #68]	; (80047c4 <TIM_OC4_SetConfig+0xa8>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d109      	bne.n	8004798 <TIM_OC4_SetConfig+0x7c>
	{
		/* Check parameters */
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

		/* Reset the Output Compare IDLE State */
		tmpcr2 &= ~TIM_CR2_OIS4;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800478a:	617b      	str	r3, [r7, #20]

		/* Set the Output Idle state */
		tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	019b      	lsls	r3, r3, #6
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	4313      	orrs	r3, r2
 8004796:	617b      	str	r3, [r7, #20]
	}

	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	605a      	str	r2, [r3, #4]

	/* Write to TIMx CCMR2 */
	TIMx->CCMR2 = tmpccmrx;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	61da      	str	r2, [r3, #28]

	/* Set the Capture Compare Register value */
	TIMx->CCR4 = OC_Config->Pulse;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	641a      	str	r2, [r3, #64]	; 0x40

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	621a      	str	r2, [r3, #32]
}
 80047b2:	bf00      	nop
 80047b4:	371c      	adds	r7, #28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	40010000 	.word	0x40010000
 80047c4:	40010400 	.word	0x40010400

080047c8 <TIM_TI1_ConfigInputStage>:
 *          This parameter must be a value between 0x00 and 0x0F.
 * @retval None
 */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity,
		uint32_t TIM_ICFilter)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b087      	sub	sp, #28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
	uint32_t tmpccmr1;
	uint32_t tmpccer;

	/* Disable the Channel 1: Reset the CC1E Bit */
	tmpccer = TIMx->CCER;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	617b      	str	r3, [r7, #20]
	TIMx->CCER &= ~TIM_CCER_CC1E;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	f023 0201 	bic.w	r2, r3, #1
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	621a      	str	r2, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	613b      	str	r3, [r7, #16]

	/* Set the filter */
	tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047f2:	613b      	str	r3, [r7, #16]
	tmpccmr1 |= (TIM_ICFilter << 4U);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]

	/* Select the Polarity and set the CC1E Bit */
	tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f023 030a 	bic.w	r3, r3, #10
 8004804:	617b      	str	r3, [r7, #20]
	tmpccer |= TIM_ICPolarity;
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	4313      	orrs	r3, r2
 800480c:	617b      	str	r3, [r7, #20]

	/* Write to TIMx CCMR1 and CCER registers */
	TIMx->CCMR1 = tmpccmr1;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	619a      	str	r2, [r3, #24]
	TIMx->CCER = tmpccer;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	621a      	str	r2, [r3, #32]
}
 800481a:	bf00      	nop
 800481c:	371c      	adds	r7, #28
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <TIM_TI2_ConfigInputStage>:
 *          This parameter must be a value between 0x00 and 0x0F.
 * @retval None
 */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity,
		uint32_t TIM_ICFilter)
{
 8004826:	b480      	push	{r7}
 8004828:	b087      	sub	sp, #28
 800482a:	af00      	add	r7, sp, #0
 800482c:	60f8      	str	r0, [r7, #12]
 800482e:	60b9      	str	r1, [r7, #8]
 8004830:	607a      	str	r2, [r7, #4]
	uint32_t tmpccmr1;
	uint32_t tmpccer;

	/* Disable the Channel 2: Reset the CC2E Bit */
	tmpccer = TIMx->CCER;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	617b      	str	r3, [r7, #20]
	TIMx->CCER &= ~TIM_CCER_CC2E;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	f023 0210 	bic.w	r2, r3, #16
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	621a      	str	r2, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	613b      	str	r3, [r7, #16]

	/* Set the filter */
	tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004850:	613b      	str	r3, [r7, #16]
	tmpccmr1 |= (TIM_ICFilter << 12U);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	031b      	lsls	r3, r3, #12
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	4313      	orrs	r3, r2
 800485a:	613b      	str	r3, [r7, #16]

	/* Select the Polarity and set the CC2E Bit */
	tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004862:	617b      	str	r3, [r7, #20]
	tmpccer |= (TIM_ICPolarity << 4U);
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	011b      	lsls	r3, r3, #4
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	4313      	orrs	r3, r2
 800486c:	617b      	str	r3, [r7, #20]

	/* Write to TIMx CCMR1 and CCER registers */
	TIMx->CCMR1 = tmpccmr1;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	619a      	str	r2, [r3, #24]
	TIMx->CCER = tmpccer;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	621a      	str	r2, [r3, #32]
}
 800487a:	bf00      	nop
 800487c:	371c      	adds	r7, #28
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <TIM_ITRx_SetConfig>:
 *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
 *            @arg TIM_TS_ETRF: External Trigger input
 * @retval None
 */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004886:	b480      	push	{r7}
 8004888:	b085      	sub	sp, #20
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
 800488e:	6039      	str	r1, [r7, #0]
	uint32_t tmpsmcr;

	/* Get the TIMx SMCR register value */
	tmpsmcr = TIMx->SMCR;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	60fb      	str	r3, [r7, #12]
	/* Reset the TS Bits */
	tmpsmcr &= ~TIM_SMCR_TS;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489c:	60fb      	str	r3, [r7, #12]
	/* Set the Input Trigger source and the slave mode*/
	tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	f043 0307 	orr.w	r3, r3, #7
 80048a8:	60fb      	str	r3, [r7, #12]
	/* Write to TIMx SMCR */
	TIMx->SMCR = tmpsmcr;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	609a      	str	r2, [r3, #8]
}
 80048b0:	bf00      	nop
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <TIM_ETR_SetConfig>:
 *          This parameter must be a value between 0x00 and 0x0F
 * @retval None
 */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
		uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048bc:	b480      	push	{r7}
 80048be:	b087      	sub	sp, #28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
 80048c8:	603b      	str	r3, [r7, #0]
	uint32_t tmpsmcr;

	tmpsmcr = TIMx->SMCR;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	617b      	str	r3, [r7, #20]

	/* Reset the ETR Bits */
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048d6:	617b      	str	r3, [r7, #20]

	/* Set the Prescaler, the Filter value and the Polarity */
	tmpsmcr |= (uint32_t) (TIM_ExtTRGPrescaler
			| (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	021a      	lsls	r2, r3, #8
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	431a      	orrs	r2, r3
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	4313      	orrs	r3, r2
	tmpsmcr |= (uint32_t) (TIM_ExtTRGPrescaler
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]

	/* Write to TIMx SMCR */
	TIMx->SMCR = tmpsmcr;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	609a      	str	r2, [r3, #8]
}
 80048f0:	bf00      	nop
 80048f2:	371c      	adds	r7, #28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <TIM_CCxChannelCmd>:
 *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
 * @retval None
 */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel,
		uint32_t ChannelState)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]

	/* Check the parameters */
	assert_param(IS_TIM_CC1_INSTANCE(TIMx));
	assert_param(IS_TIM_CHANNELS(Channel));

	tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f003 031f 	and.w	r3, r3, #31
 800490e:	2201      	movs	r2, #1
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	617b      	str	r3, [r7, #20]

	/* Reset the CCxE Bit */
	TIMx->CCER &= ~tmp;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6a1a      	ldr	r2, [r3, #32]
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	43db      	mvns	r3, r3
 800491e:	401a      	ands	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	621a      	str	r2, [r3, #32]

	/* Set or reset the CCxE Bit */
	TIMx->CCER |= (uint32_t) (ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6a1a      	ldr	r2, [r3, #32]
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f003 031f 	and.w	r3, r3, #31
 800492e:	6879      	ldr	r1, [r7, #4]
 8004930:	fa01 f303 	lsl.w	r3, r1, r3
 8004934:	431a      	orrs	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	621a      	str	r2, [r3, #32]
}
 800493a:	bf00      	nop
 800493c:	371c      	adds	r7, #28
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
	...

08004948 <HAL_TIMEx_MasterConfigSynchronization>:
 *         mode.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
		const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
	assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
	assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
	assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

	/* Check input state */
	__HAL_LOCK(htim);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004958:	2b01      	cmp	r3, #1
 800495a:	d101      	bne.n	8004960 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800495c:	2302      	movs	r3, #2
 800495e:	e05a      	b.n	8004a16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	/* Change the handler state */
	htim->State = HAL_TIM_STATE_BUSY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2202      	movs	r2, #2
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Get the TIMx CR2 register value */
	tmpcr2 = htim->Instance->CR2;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	60fb      	str	r3, [r7, #12]

	/* Get the TIMx SMCR register value */
	tmpsmcr = htim->Instance->SMCR;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	60bb      	str	r3, [r7, #8]

	/* Reset the MMS Bits */
	tmpcr2 &= ~TIM_CR2_MMS;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004986:	60fb      	str	r3, [r7, #12]
	/* Select the TRGO source */
	tmpcr2 |= sMasterConfig->MasterOutputTrigger;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	4313      	orrs	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]

	/* Update TIMx CR2 */
	htim->Instance->CR2 = tmpcr2;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	605a      	str	r2, [r3, #4]

	if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a21      	ldr	r2, [pc, #132]	; (8004a24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d022      	beq.n	80049ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ac:	d01d      	beq.n	80049ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a1d      	ldr	r2, [pc, #116]	; (8004a28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d018      	beq.n	80049ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a1b      	ldr	r2, [pc, #108]	; (8004a2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d013      	beq.n	80049ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a1a      	ldr	r2, [pc, #104]	; (8004a30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d00e      	beq.n	80049ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a18      	ldr	r2, [pc, #96]	; (8004a34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d009      	beq.n	80049ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a17      	ldr	r2, [pc, #92]	; (8004a38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d004      	beq.n	80049ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a15      	ldr	r2, [pc, #84]	; (8004a3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d10c      	bne.n	8004a04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
	{
		/* Reset the MSM Bit */
		tmpsmcr &= ~TIM_SMCR_MSM;
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049f0:	60bb      	str	r3, [r7, #8]
		/* Set master mode */
		tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	60bb      	str	r3, [r7, #8]

		/* Update TIMx SMCR */
		htim->Instance->SMCR = tmpsmcr;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	609a      	str	r2, [r3, #8]
	}

	/* Change the htim state */
	htim->State = HAL_TIM_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	__HAL_UNLOCK(htim);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	40010000 	.word	0x40010000
 8004a28:	40000400 	.word	0x40000400
 8004a2c:	40000800 	.word	0x40000800
 8004a30:	40000c00 	.word	0x40000c00
 8004a34:	40010400 	.word	0x40010400
 8004a38:	40014000 	.word	0x40014000
 8004a3c:	40001800 	.word	0x40001800

08004a40 <HAL_TIMEx_ConfigBreakDeadTime>:
 *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
		const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
	/* Keep this variable initialized to 0 as it is used to configure BDTR register */
	uint32_t tmpbdtr = 0U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60fb      	str	r3, [r7, #12]
	assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
	assert_param(
			IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

	/* Check input state */
	__HAL_LOCK(htim);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d101      	bne.n	8004a5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a58:	2302      	movs	r3, #2
 8004a5a:	e03d      	b.n	8004ad8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	/* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
	 the OSSI State, the dead time value and the Automatic Output Enable Bit */

	/* Set the BDTR bits */
	MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]

	/* Set TIMx_BDTR */
	htim->Instance->BDTR = tmpbdtr;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	645a      	str	r2, [r3, #68]	; 0x44

	__HAL_UNLOCK(htim);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_UART_Init>:
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
	/* Check the UART handle allocation */
	if (huart == NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_UART_Init+0x12>
	{
		return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e042      	b.n	8004b7c <HAL_UART_Init+0x98>
		assert_param(IS_UART_INSTANCE(huart->Instance));
	}
	assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
	assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

	if (huart->gState == HAL_UART_STATE_RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d106      	bne.n	8004b10 <HAL_UART_Init+0x2c>
	{
		/* Allocate lock resource and initialize it */
		huart->Lock = HAL_UNLOCKED;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
		/* Init the low level hardware : GPIO, CLOCK */
		HAL_UART_MspInit(huart);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7fc f8a8 	bl	8000c60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
	}

	huart->gState = HAL_UART_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2224      	movs	r2, #36	; 0x24
 8004b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	/* Disable the peripheral */
	__HAL_UART_DISABLE(huart);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b26:	60da      	str	r2, [r3, #12]

	/* Set the UART Communication parameters */
	UART_SetConfig(huart);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f973 	bl	8004e14 <UART_SetConfig>

	/* In asynchronous mode, the following bits must be kept cleared:
	 - LINEN and CLKEN bits in the USART_CR2 register,
	 - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
	CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	691a      	ldr	r2, [r3, #16]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b3c:	611a      	str	r2, [r3, #16]
	CLEAR_BIT(huart->Instance->CR3,
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	695a      	ldr	r2, [r3, #20]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b4c:	615a      	str	r2, [r3, #20]
			(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

	/* Enable the peripheral */
	__HAL_UART_ENABLE(huart);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68da      	ldr	r2, [r3, #12]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b5c:	60da      	str	r2, [r3, #12]

	/* Initialize the UART state */
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	645a      	str	r2, [r3, #68]	; 0x44
	huart->gState = HAL_UART_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	huart->RxState = HAL_UART_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	635a      	str	r2, [r3, #52]	; 0x34

	return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_UART_Transmit>:
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart,
		const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b08a      	sub	sp, #40	; 0x28
 8004b88:	af02      	add	r7, sp, #8
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	603b      	str	r3, [r7, #0]
 8004b90:	4613      	mov	r3, r2
 8004b92:	80fb      	strh	r3, [r7, #6]
	const uint8_t *pdata8bits;
	const uint16_t *pdata16bits;
	uint32_t tickstart = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	617b      	str	r3, [r7, #20]

	/* Check that a Tx process is not already ongoing */
	if (huart->gState == HAL_UART_STATE_READY)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b20      	cmp	r3, #32
 8004ba2:	d175      	bne.n	8004c90 <HAL_UART_Transmit+0x10c>
	{
		if ((pData == NULL) || (Size == 0U))
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <HAL_UART_Transmit+0x2c>
 8004baa:	88fb      	ldrh	r3, [r7, #6]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_UART_Transmit+0x30>
		{
			return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e06e      	b.n	8004c92 <HAL_UART_Transmit+0x10e>
		}

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	645a      	str	r2, [r3, #68]	; 0x44
		huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2221      	movs	r2, #33	; 0x21
 8004bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		/* Init tickstart for timeout management */
		tickstart = HAL_GetTick();
 8004bc2:	f7fc fa09 	bl	8000fd8 <HAL_GetTick>
 8004bc6:	6178      	str	r0, [r7, #20]

		huart->TxXferSize = Size;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	88fa      	ldrh	r2, [r7, #6]
 8004bcc:	849a      	strh	r2, [r3, #36]	; 0x24
		huart->TxXferCount = Size;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	88fa      	ldrh	r2, [r7, #6]
 8004bd2:	84da      	strh	r2, [r3, #38]	; 0x26

		/* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bdc:	d108      	bne.n	8004bf0 <HAL_UART_Transmit+0x6c>
				&& (huart->Init.Parity == UART_PARITY_NONE))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d104      	bne.n	8004bf0 <HAL_UART_Transmit+0x6c>
		{
			pdata8bits = NULL;
 8004be6:	2300      	movs	r3, #0
 8004be8:	61fb      	str	r3, [r7, #28]
			pdata16bits = (const uint16_t*) pData;
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	61bb      	str	r3, [r7, #24]
 8004bee:	e003      	b.n	8004bf8 <HAL_UART_Transmit+0x74>
		}
		else
		{
			pdata8bits = pData;
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	61fb      	str	r3, [r7, #28]
			pdata16bits = NULL;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	61bb      	str	r3, [r7, #24]
		}

		while (huart->TxXferCount > 0U)
 8004bf8:	e02e      	b.n	8004c58 <HAL_UART_Transmit+0xd4>
		{
			if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET,
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2200      	movs	r2, #0
 8004c02:	2180      	movs	r1, #128	; 0x80
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 f848 	bl	8004c9a <UART_WaitOnFlagUntilTimeout>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d005      	beq.n	8004c1c <HAL_UART_Transmit+0x98>
					tickstart, Timeout) != HAL_OK)
			{
				huart->gState = HAL_UART_STATE_READY;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2220      	movs	r2, #32
 8004c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

				return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e03a      	b.n	8004c92 <HAL_UART_Transmit+0x10e>
			}
			if (pdata8bits == NULL)
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10b      	bne.n	8004c3a <HAL_UART_Transmit+0xb6>
			{
				huart->Instance->DR = (uint16_t) (*pdata16bits & 0x01FFU);
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c30:	605a      	str	r2, [r3, #4]
				pdata16bits++;
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	3302      	adds	r3, #2
 8004c36:	61bb      	str	r3, [r7, #24]
 8004c38:	e007      	b.n	8004c4a <HAL_UART_Transmit+0xc6>
			}
			else
			{
				huart->Instance->DR = (uint8_t) (*pdata8bits & 0xFFU);
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	781a      	ldrb	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	605a      	str	r2, [r3, #4]
				pdata8bits++;
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	3301      	adds	r3, #1
 8004c48:	61fb      	str	r3, [r7, #28]
			}
			huart->TxXferCount--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	84da      	strh	r2, [r3, #38]	; 0x26
		while (huart->TxXferCount > 0U)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1cb      	bne.n	8004bfa <HAL_UART_Transmit+0x76>
		}

		if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart,
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	2140      	movs	r1, #64	; 0x40
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 f814 	bl	8004c9a <UART_WaitOnFlagUntilTimeout>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d005      	beq.n	8004c84 <HAL_UART_Transmit+0x100>
				Timeout) != HAL_OK)
		{
			huart->gState = HAL_UART_STATE_READY;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

			return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e006      	b.n	8004c92 <HAL_UART_Transmit+0x10e>
		}

		/* At end of Tx process, restore huart->gState to Ready */
		huart->gState = HAL_UART_STATE_READY;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2220      	movs	r2, #32
 8004c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	e000      	b.n	8004c92 <HAL_UART_Transmit+0x10e>
	}
	else
	{
		return HAL_BUSY;
 8004c90:	2302      	movs	r3, #2
	}
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3720      	adds	r7, #32
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <UART_WaitOnFlagUntilTimeout>:
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart,
		uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b086      	sub	sp, #24
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	60f8      	str	r0, [r7, #12]
 8004ca2:	60b9      	str	r1, [r7, #8]
 8004ca4:	603b      	str	r3, [r7, #0]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	71fb      	strb	r3, [r7, #7]
	/* Wait until flag is set */
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004caa:	e03b      	b.n	8004d24 <UART_WaitOnFlagUntilTimeout+0x8a>
	{
		/* Check for the Timeout */
		if (Timeout != HAL_MAX_DELAY)
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb2:	d037      	beq.n	8004d24 <UART_WaitOnFlagUntilTimeout+0x8a>
		{
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cb4:	f7fc f990 	bl	8000fd8 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	6a3a      	ldr	r2, [r7, #32]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d302      	bcc.n	8004cca <UART_WaitOnFlagUntilTimeout+0x30>
 8004cc4:	6a3b      	ldr	r3, [r7, #32]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <UART_WaitOnFlagUntilTimeout+0x34>
			{

				return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e03a      	b.n	8004d44 <UART_WaitOnFlagUntilTimeout+0xaa>
			}

			if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f003 0304 	and.w	r3, r3, #4
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d023      	beq.n	8004d24 <UART_WaitOnFlagUntilTimeout+0x8a>
					&& (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2b80      	cmp	r3, #128	; 0x80
 8004ce0:	d020      	beq.n	8004d24 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2b40      	cmp	r3, #64	; 0x40
 8004ce6:	d01d      	beq.n	8004d24 <UART_WaitOnFlagUntilTimeout+0x8a>
			{
				if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b08      	cmp	r3, #8
 8004cf4:	d116      	bne.n	8004d24 <UART_WaitOnFlagUntilTimeout+0x8a>
				{
					/* Clear Overrun Error flag*/
					__HAL_UART_CLEAR_OREFLAG(huart);
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	617b      	str	r3, [r7, #20]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	617b      	str	r3, [r7, #20]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	617b      	str	r3, [r7, #20]
 8004d0a:	697b      	ldr	r3, [r7, #20]

					/* Blocking error : transfer is aborted
					 Set the UART state ready to be able to start again the process,
					 Disable Rx Interrupts if ongoing */
					UART_EndRxTransfer(huart);
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f000 f81d 	bl	8004d4c <UART_EndRxTransfer>

					huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2208      	movs	r2, #8
 8004d16:	645a      	str	r2, [r3, #68]	; 0x44

					/* Process Unlocked */
					__HAL_UNLOCK(huart);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

					return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e00f      	b.n	8004d44 <UART_WaitOnFlagUntilTimeout+0xaa>
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	bf0c      	ite	eq
 8004d34:	2301      	moveq	r3, #1
 8004d36:	2300      	movne	r3, #0
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	79fb      	ldrb	r3, [r7, #7]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d0b4      	beq.n	8004cac <UART_WaitOnFlagUntilTimeout+0x12>
				}
			}
		}
	}
	return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3718      	adds	r7, #24
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <UART_EndRxTransfer>:
 * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
 * @param  huart UART handle.
 * @retval None
 */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b095      	sub	sp, #84	; 0x54
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
	/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
	ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	330c      	adds	r3, #12
 8004d5a:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
	uint32_t result;

	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5e:	e853 3f00 	ldrex	r3, [r3]
 8004d62:	633b      	str	r3, [r7, #48]	; 0x30
	return (result);
 8004d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	330c      	adds	r3, #12
 8004d72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d74:	643a      	str	r2, [r7, #64]	; 0x40
 8004d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
	uint32_t result;

	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d7c:	e841 2300 	strex	r3, r2, [r1]
 8004d80:	63bb      	str	r3, [r7, #56]	; 0x38
	return (result);
 8004d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1e5      	bne.n	8004d54 <UART_EndRxTransfer+0x8>
	ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	3314      	adds	r3, #20
 8004d8e:	623b      	str	r3, [r7, #32]
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d90:	6a3b      	ldr	r3, [r7, #32]
 8004d92:	e853 3f00 	ldrex	r3, [r3]
 8004d96:	61fb      	str	r3, [r7, #28]
	return (result);
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	f023 0301 	bic.w	r3, r3, #1
 8004d9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	3314      	adds	r3, #20
 8004da6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004da8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004daa:	62bb      	str	r3, [r7, #40]	; 0x28
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004db0:	e841 2300 	strex	r3, r2, [r1]
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
	return (result);
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1e5      	bne.n	8004d88 <UART_EndRxTransfer+0x3c>

	/* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
	if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d119      	bne.n	8004df8 <UART_EndRxTransfer+0xac>
	{
		ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	330c      	adds	r3, #12
 8004dca:	60fb      	str	r3, [r7, #12]
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	e853 3f00 	ldrex	r3, [r3]
 8004dd2:	60bb      	str	r3, [r7, #8]
	return (result);
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	f023 0310 	bic.w	r3, r3, #16
 8004dda:	647b      	str	r3, [r7, #68]	; 0x44
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	330c      	adds	r3, #12
 8004de2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004de4:	61ba      	str	r2, [r7, #24]
 8004de6:	617b      	str	r3, [r7, #20]
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de8:	6979      	ldr	r1, [r7, #20]
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	e841 2300 	strex	r3, r2, [r1]
 8004df0:	613b      	str	r3, [r7, #16]
	return (result);
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1e5      	bne.n	8004dc4 <UART_EndRxTransfer+0x78>
	}

	/* At end of Rx process, restore huart->RxState to Ready */
	huart->RxState = HAL_UART_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e06:	bf00      	nop
 8004e08:	3754      	adds	r7, #84	; 0x54
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
	...

08004e14 <UART_SetConfig>:
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e18:	b0c0      	sub	sp, #256	; 0x100
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
	assert_param(IS_UART_MODE(huart->Init.Mode));

	/*-------------------------- USART CR2 Configuration -----------------------*/
	/* Configure the UART Stop Bits: Set STOP[13:12] bits
	 according to huart->Init.StopBits value */
	MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e30:	68d9      	ldr	r1, [r3, #12]
 8004e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	ea40 0301 	orr.w	r3, r0, r1
 8004e3c:	6113      	str	r3, [r2, #16]
	 Set the M bits according to huart->Init.WordLength value
	 Set PCE and PS bits according to huart->Init.Parity value
	 Set TE and RE bits according to huart->Init.Mode value
	 Set OVER8 bit according to huart->Init.OverSampling value */

	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8004e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e42:	689a      	ldr	r2, [r3, #8]
 8004e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	431a      	orrs	r2, r3
			| huart->Init.Mode | huart->Init.OverSampling;
 8004e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	431a      	orrs	r2, r3
 8004e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e58:	69db      	ldr	r3, [r3, #28]
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	MODIFY_REG(huart->Instance->CR1,
 8004e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e6c:	f021 010c 	bic.w	r1, r1, #12
 8004e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e7a:	430b      	orrs	r3, r1
 8004e7c:	60d3      	str	r3, [r2, #12]
			(uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
			tmpreg);

	/*-------------------------- USART CR3 Configuration -----------------------*/
	/* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
	MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE),
 8004e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e8e:	6999      	ldr	r1, [r3, #24]
 8004e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	ea40 0301 	orr.w	r3, r0, r1
 8004e9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
	if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	4b8f      	ldr	r3, [pc, #572]	; (80050e0 <UART_SetConfig+0x2cc>)
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d005      	beq.n	8004eb4 <UART_SetConfig+0xa0>
 8004ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	4b8d      	ldr	r3, [pc, #564]	; (80050e4 <UART_SetConfig+0x2d0>)
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d104      	bne.n	8004ebe <UART_SetConfig+0xaa>
	{
		pclk = HAL_RCC_GetPCLK2Freq();
 8004eb4:	f7fe fc68 	bl	8003788 <HAL_RCC_GetPCLK2Freq>
 8004eb8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ebc:	e003      	b.n	8004ec6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
	else
	{
		pclk = HAL_RCC_GetPCLK1Freq();
 8004ebe:	f7fe fc4f 	bl	8003760 <HAL_RCC_GetPCLK1Freq>
 8004ec2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
	}
	/*-------------------------- USART BRR Configuration ---------------------*/
	if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eca:	69db      	ldr	r3, [r3, #28]
 8004ecc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ed0:	f040 810c 	bne.w	80050ec <UART_SetConfig+0x2d8>
	{
		huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ed4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ede:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004ee2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004ee6:	4622      	mov	r2, r4
 8004ee8:	462b      	mov	r3, r5
 8004eea:	1891      	adds	r1, r2, r2
 8004eec:	65b9      	str	r1, [r7, #88]	; 0x58
 8004eee:	415b      	adcs	r3, r3
 8004ef0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ef2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ef6:	4621      	mov	r1, r4
 8004ef8:	eb12 0801 	adds.w	r8, r2, r1
 8004efc:	4629      	mov	r1, r5
 8004efe:	eb43 0901 	adc.w	r9, r3, r1
 8004f02:	f04f 0200 	mov.w	r2, #0
 8004f06:	f04f 0300 	mov.w	r3, #0
 8004f0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f16:	4690      	mov	r8, r2
 8004f18:	4699      	mov	r9, r3
 8004f1a:	4623      	mov	r3, r4
 8004f1c:	eb18 0303 	adds.w	r3, r8, r3
 8004f20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f24:	462b      	mov	r3, r5
 8004f26:	eb49 0303 	adc.w	r3, r9, r3
 8004f2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f3a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004f3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f42:	460b      	mov	r3, r1
 8004f44:	18db      	adds	r3, r3, r3
 8004f46:	653b      	str	r3, [r7, #80]	; 0x50
 8004f48:	4613      	mov	r3, r2
 8004f4a:	eb42 0303 	adc.w	r3, r2, r3
 8004f4e:	657b      	str	r3, [r7, #84]	; 0x54
 8004f50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f58:	f7fb f950 	bl	80001fc <__aeabi_uldivmod>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4b61      	ldr	r3, [pc, #388]	; (80050e8 <UART_SetConfig+0x2d4>)
 8004f62:	fba3 2302 	umull	r2, r3, r3, r2
 8004f66:	095b      	lsrs	r3, r3, #5
 8004f68:	011c      	lsls	r4, r3, #4
 8004f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f74:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f7c:	4642      	mov	r2, r8
 8004f7e:	464b      	mov	r3, r9
 8004f80:	1891      	adds	r1, r2, r2
 8004f82:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f84:	415b      	adcs	r3, r3
 8004f86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f8c:	4641      	mov	r1, r8
 8004f8e:	eb12 0a01 	adds.w	sl, r2, r1
 8004f92:	4649      	mov	r1, r9
 8004f94:	eb43 0b01 	adc.w	fp, r3, r1
 8004f98:	f04f 0200 	mov.w	r2, #0
 8004f9c:	f04f 0300 	mov.w	r3, #0
 8004fa0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fa4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fa8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fac:	4692      	mov	sl, r2
 8004fae:	469b      	mov	fp, r3
 8004fb0:	4643      	mov	r3, r8
 8004fb2:	eb1a 0303 	adds.w	r3, sl, r3
 8004fb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fba:	464b      	mov	r3, r9
 8004fbc:	eb4b 0303 	adc.w	r3, fp, r3
 8004fc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004fd0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004fd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004fd8:	460b      	mov	r3, r1
 8004fda:	18db      	adds	r3, r3, r3
 8004fdc:	643b      	str	r3, [r7, #64]	; 0x40
 8004fde:	4613      	mov	r3, r2
 8004fe0:	eb42 0303 	adc.w	r3, r2, r3
 8004fe4:	647b      	str	r3, [r7, #68]	; 0x44
 8004fe6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004fea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004fee:	f7fb f905 	bl	80001fc <__aeabi_uldivmod>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	4611      	mov	r1, r2
 8004ff8:	4b3b      	ldr	r3, [pc, #236]	; (80050e8 <UART_SetConfig+0x2d4>)
 8004ffa:	fba3 2301 	umull	r2, r3, r3, r1
 8004ffe:	095b      	lsrs	r3, r3, #5
 8005000:	2264      	movs	r2, #100	; 0x64
 8005002:	fb02 f303 	mul.w	r3, r2, r3
 8005006:	1acb      	subs	r3, r1, r3
 8005008:	00db      	lsls	r3, r3, #3
 800500a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800500e:	4b36      	ldr	r3, [pc, #216]	; (80050e8 <UART_SetConfig+0x2d4>)
 8005010:	fba3 2302 	umull	r2, r3, r3, r2
 8005014:	095b      	lsrs	r3, r3, #5
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800501c:	441c      	add	r4, r3
 800501e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005022:	2200      	movs	r2, #0
 8005024:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005028:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800502c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005030:	4642      	mov	r2, r8
 8005032:	464b      	mov	r3, r9
 8005034:	1891      	adds	r1, r2, r2
 8005036:	63b9      	str	r1, [r7, #56]	; 0x38
 8005038:	415b      	adcs	r3, r3
 800503a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800503c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005040:	4641      	mov	r1, r8
 8005042:	1851      	adds	r1, r2, r1
 8005044:	6339      	str	r1, [r7, #48]	; 0x30
 8005046:	4649      	mov	r1, r9
 8005048:	414b      	adcs	r3, r1
 800504a:	637b      	str	r3, [r7, #52]	; 0x34
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005058:	4659      	mov	r1, fp
 800505a:	00cb      	lsls	r3, r1, #3
 800505c:	4651      	mov	r1, sl
 800505e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005062:	4651      	mov	r1, sl
 8005064:	00ca      	lsls	r2, r1, #3
 8005066:	4610      	mov	r0, r2
 8005068:	4619      	mov	r1, r3
 800506a:	4603      	mov	r3, r0
 800506c:	4642      	mov	r2, r8
 800506e:	189b      	adds	r3, r3, r2
 8005070:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005074:	464b      	mov	r3, r9
 8005076:	460a      	mov	r2, r1
 8005078:	eb42 0303 	adc.w	r3, r2, r3
 800507c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800508c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005090:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005094:	460b      	mov	r3, r1
 8005096:	18db      	adds	r3, r3, r3
 8005098:	62bb      	str	r3, [r7, #40]	; 0x28
 800509a:	4613      	mov	r3, r2
 800509c:	eb42 0303 	adc.w	r3, r2, r3
 80050a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80050aa:	f7fb f8a7 	bl	80001fc <__aeabi_uldivmod>
 80050ae:	4602      	mov	r2, r0
 80050b0:	460b      	mov	r3, r1
 80050b2:	4b0d      	ldr	r3, [pc, #52]	; (80050e8 <UART_SetConfig+0x2d4>)
 80050b4:	fba3 1302 	umull	r1, r3, r3, r2
 80050b8:	095b      	lsrs	r3, r3, #5
 80050ba:	2164      	movs	r1, #100	; 0x64
 80050bc:	fb01 f303 	mul.w	r3, r1, r3
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	00db      	lsls	r3, r3, #3
 80050c4:	3332      	adds	r3, #50	; 0x32
 80050c6:	4a08      	ldr	r2, [pc, #32]	; (80050e8 <UART_SetConfig+0x2d4>)
 80050c8:	fba2 2303 	umull	r2, r3, r2, r3
 80050cc:	095b      	lsrs	r3, r3, #5
 80050ce:	f003 0207 	and.w	r2, r3, #7
 80050d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4422      	add	r2, r4
 80050da:	609a      	str	r2, [r3, #8]
	}
	else
	{
		huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
	}
}
 80050dc:	e106      	b.n	80052ec <UART_SetConfig+0x4d8>
 80050de:	bf00      	nop
 80050e0:	40011000 	.word	0x40011000
 80050e4:	40011400 	.word	0x40011400
 80050e8:	51eb851f 	.word	0x51eb851f
		huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050f0:	2200      	movs	r2, #0
 80050f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80050f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80050fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80050fe:	4642      	mov	r2, r8
 8005100:	464b      	mov	r3, r9
 8005102:	1891      	adds	r1, r2, r2
 8005104:	6239      	str	r1, [r7, #32]
 8005106:	415b      	adcs	r3, r3
 8005108:	627b      	str	r3, [r7, #36]	; 0x24
 800510a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800510e:	4641      	mov	r1, r8
 8005110:	1854      	adds	r4, r2, r1
 8005112:	4649      	mov	r1, r9
 8005114:	eb43 0501 	adc.w	r5, r3, r1
 8005118:	f04f 0200 	mov.w	r2, #0
 800511c:	f04f 0300 	mov.w	r3, #0
 8005120:	00eb      	lsls	r3, r5, #3
 8005122:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005126:	00e2      	lsls	r2, r4, #3
 8005128:	4614      	mov	r4, r2
 800512a:	461d      	mov	r5, r3
 800512c:	4643      	mov	r3, r8
 800512e:	18e3      	adds	r3, r4, r3
 8005130:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005134:	464b      	mov	r3, r9
 8005136:	eb45 0303 	adc.w	r3, r5, r3
 800513a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800513e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800514a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800514e:	f04f 0200 	mov.w	r2, #0
 8005152:	f04f 0300 	mov.w	r3, #0
 8005156:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800515a:	4629      	mov	r1, r5
 800515c:	008b      	lsls	r3, r1, #2
 800515e:	4621      	mov	r1, r4
 8005160:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005164:	4621      	mov	r1, r4
 8005166:	008a      	lsls	r2, r1, #2
 8005168:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800516c:	f7fb f846 	bl	80001fc <__aeabi_uldivmod>
 8005170:	4602      	mov	r2, r0
 8005172:	460b      	mov	r3, r1
 8005174:	4b60      	ldr	r3, [pc, #384]	; (80052f8 <UART_SetConfig+0x4e4>)
 8005176:	fba3 2302 	umull	r2, r3, r3, r2
 800517a:	095b      	lsrs	r3, r3, #5
 800517c:	011c      	lsls	r4, r3, #4
 800517e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005182:	2200      	movs	r2, #0
 8005184:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005188:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800518c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005190:	4642      	mov	r2, r8
 8005192:	464b      	mov	r3, r9
 8005194:	1891      	adds	r1, r2, r2
 8005196:	61b9      	str	r1, [r7, #24]
 8005198:	415b      	adcs	r3, r3
 800519a:	61fb      	str	r3, [r7, #28]
 800519c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051a0:	4641      	mov	r1, r8
 80051a2:	1851      	adds	r1, r2, r1
 80051a4:	6139      	str	r1, [r7, #16]
 80051a6:	4649      	mov	r1, r9
 80051a8:	414b      	adcs	r3, r1
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	f04f 0300 	mov.w	r3, #0
 80051b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051b8:	4659      	mov	r1, fp
 80051ba:	00cb      	lsls	r3, r1, #3
 80051bc:	4651      	mov	r1, sl
 80051be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051c2:	4651      	mov	r1, sl
 80051c4:	00ca      	lsls	r2, r1, #3
 80051c6:	4610      	mov	r0, r2
 80051c8:	4619      	mov	r1, r3
 80051ca:	4603      	mov	r3, r0
 80051cc:	4642      	mov	r2, r8
 80051ce:	189b      	adds	r3, r3, r2
 80051d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051d4:	464b      	mov	r3, r9
 80051d6:	460a      	mov	r2, r1
 80051d8:	eb42 0303 	adc.w	r3, r2, r3
 80051dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80051ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80051ec:	f04f 0200 	mov.w	r2, #0
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80051f8:	4649      	mov	r1, r9
 80051fa:	008b      	lsls	r3, r1, #2
 80051fc:	4641      	mov	r1, r8
 80051fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005202:	4641      	mov	r1, r8
 8005204:	008a      	lsls	r2, r1, #2
 8005206:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800520a:	f7fa fff7 	bl	80001fc <__aeabi_uldivmod>
 800520e:	4602      	mov	r2, r0
 8005210:	460b      	mov	r3, r1
 8005212:	4611      	mov	r1, r2
 8005214:	4b38      	ldr	r3, [pc, #224]	; (80052f8 <UART_SetConfig+0x4e4>)
 8005216:	fba3 2301 	umull	r2, r3, r3, r1
 800521a:	095b      	lsrs	r3, r3, #5
 800521c:	2264      	movs	r2, #100	; 0x64
 800521e:	fb02 f303 	mul.w	r3, r2, r3
 8005222:	1acb      	subs	r3, r1, r3
 8005224:	011b      	lsls	r3, r3, #4
 8005226:	3332      	adds	r3, #50	; 0x32
 8005228:	4a33      	ldr	r2, [pc, #204]	; (80052f8 <UART_SetConfig+0x4e4>)
 800522a:	fba2 2303 	umull	r2, r3, r2, r3
 800522e:	095b      	lsrs	r3, r3, #5
 8005230:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005234:	441c      	add	r4, r3
 8005236:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800523a:	2200      	movs	r2, #0
 800523c:	673b      	str	r3, [r7, #112]	; 0x70
 800523e:	677a      	str	r2, [r7, #116]	; 0x74
 8005240:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005244:	4642      	mov	r2, r8
 8005246:	464b      	mov	r3, r9
 8005248:	1891      	adds	r1, r2, r2
 800524a:	60b9      	str	r1, [r7, #8]
 800524c:	415b      	adcs	r3, r3
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005254:	4641      	mov	r1, r8
 8005256:	1851      	adds	r1, r2, r1
 8005258:	6039      	str	r1, [r7, #0]
 800525a:	4649      	mov	r1, r9
 800525c:	414b      	adcs	r3, r1
 800525e:	607b      	str	r3, [r7, #4]
 8005260:	f04f 0200 	mov.w	r2, #0
 8005264:	f04f 0300 	mov.w	r3, #0
 8005268:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800526c:	4659      	mov	r1, fp
 800526e:	00cb      	lsls	r3, r1, #3
 8005270:	4651      	mov	r1, sl
 8005272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005276:	4651      	mov	r1, sl
 8005278:	00ca      	lsls	r2, r1, #3
 800527a:	4610      	mov	r0, r2
 800527c:	4619      	mov	r1, r3
 800527e:	4603      	mov	r3, r0
 8005280:	4642      	mov	r2, r8
 8005282:	189b      	adds	r3, r3, r2
 8005284:	66bb      	str	r3, [r7, #104]	; 0x68
 8005286:	464b      	mov	r3, r9
 8005288:	460a      	mov	r2, r1
 800528a:	eb42 0303 	adc.w	r3, r2, r3
 800528e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	663b      	str	r3, [r7, #96]	; 0x60
 800529a:	667a      	str	r2, [r7, #100]	; 0x64
 800529c:	f04f 0200 	mov.w	r2, #0
 80052a0:	f04f 0300 	mov.w	r3, #0
 80052a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80052a8:	4649      	mov	r1, r9
 80052aa:	008b      	lsls	r3, r1, #2
 80052ac:	4641      	mov	r1, r8
 80052ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052b2:	4641      	mov	r1, r8
 80052b4:	008a      	lsls	r2, r1, #2
 80052b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80052ba:	f7fa ff9f 	bl	80001fc <__aeabi_uldivmod>
 80052be:	4602      	mov	r2, r0
 80052c0:	460b      	mov	r3, r1
 80052c2:	4b0d      	ldr	r3, [pc, #52]	; (80052f8 <UART_SetConfig+0x4e4>)
 80052c4:	fba3 1302 	umull	r1, r3, r3, r2
 80052c8:	095b      	lsrs	r3, r3, #5
 80052ca:	2164      	movs	r1, #100	; 0x64
 80052cc:	fb01 f303 	mul.w	r3, r1, r3
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	3332      	adds	r3, #50	; 0x32
 80052d6:	4a08      	ldr	r2, [pc, #32]	; (80052f8 <UART_SetConfig+0x4e4>)
 80052d8:	fba2 2303 	umull	r2, r3, r2, r3
 80052dc:	095b      	lsrs	r3, r3, #5
 80052de:	f003 020f 	and.w	r2, r3, #15
 80052e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4422      	add	r2, r4
 80052ea:	609a      	str	r2, [r3, #8]
}
 80052ec:	bf00      	nop
 80052ee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80052f2:	46bd      	mov	sp, r7
 80052f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052f8:	51eb851f 	.word	0x51eb851f

080052fc <delayInit>:
/**
 * Delay Functions
 */

void delayInit(delay_t *delay, tick_t duration)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
	if (delay == NULL)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d009      	beq.n	8005320 <delayInit+0x24>
		return;

	delay->duration = duration;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	721a      	strb	r2, [r3, #8]
	delay->startTime = 0;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	e000      	b.n	8005322 <delayInit+0x26>
		return;
 8005320:	bf00      	nop
}
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <delayRead>:

bool_t delayRead(delay_t *delay)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
	uint32_t elapsedTime = 0;
 8005334:	2300      	movs	r3, #0
 8005336:	60bb      	str	r3, [r7, #8]
	bool_t returnValue = false;
 8005338:	2300      	movs	r3, #0
 800533a:	73fb      	strb	r3, [r7, #15]

	if (delay == NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <delayRead+0x1a>
		return returnValue;
 8005342:	7bfb      	ldrb	r3, [r7, #15]
 8005344:	e021      	b.n	800538a <delayRead+0x5e>

	if (delay->running == false)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	7a1b      	ldrb	r3, [r3, #8]
 800534a:	f083 0301 	eor.w	r3, r3, #1
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	d008      	beq.n	8005366 <delayRead+0x3a>
	{
		delay->startTime = HAL_GetTick();
 8005354:	f7fb fe40 	bl	8000fd8 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	601a      	str	r2, [r3, #0]
		delay->running = true;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	721a      	strb	r2, [r3, #8]
 8005364:	e010      	b.n	8005388 <delayRead+0x5c>
	}
	else
	{
		elapsedTime = HAL_GetTick() - delay->startTime;
 8005366:	f7fb fe37 	bl	8000fd8 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	60bb      	str	r3, [r7, #8]
		if (elapsedTime >= delay->duration)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	429a      	cmp	r2, r3
 800537c:	d304      	bcc.n	8005388 <delayRead+0x5c>
		{
			delay->running = false;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	721a      	strb	r2, [r3, #8]
			returnValue = true;
 8005384:	2301      	movs	r3, #1
 8005386:	73fb      	strb	r3, [r7, #15]
		}
	}

	return returnValue;
 8005388:	7bfb      	ldrb	r3, [r7, #15]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <delayWrite>:

void delayWrite(delay_t *delay, tick_t duration)
{
 8005392:	b480      	push	{r7}
 8005394:	b083      	sub	sp, #12
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	6039      	str	r1, [r7, #0]
	if (delay == NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <delayWrite+0x18>
	{
		return;
	}

	delay->duration = duration;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	605a      	str	r2, [r3, #4]
 80053a8:	e000      	b.n	80053ac <delayWrite+0x1a>
		return;
 80053aa:	bf00      	nop

//	if (delay->running == false)
//	{
//		delay->duration = duration;
//	}
}
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <imu_Init>:
 * @return bool Returns true if there is activity, false if it is idle.
 */
static bool imu_IsActive();

bool imu_Init()
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	af00      	add	r7, sp, #0

	if (imuPort_Init())
 80053ba:	f000 f8c7 	bl	800554c <imuPort_Init>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d003      	beq.n	80053cc <imu_Init+0x16>
	{
		imu_ClearData();
 80053c4:	f000 f854 	bl	8005470 <imu_ClearData>
		return true;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e000      	b.n	80053ce <imu_Init+0x18>
	}
	else
	{
		return false;
 80053cc:	2300      	movs	r3, #0
	}
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <imu_Check>:

bool imu_Check()
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	af00      	add	r7, sp, #0
	return imuPort_Check();
 80053d6:	f000 f8cf 	bl	8005578 <imuPort_Check>
 80053da:	4603      	mov	r3, r0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	bd80      	pop	{r7, pc}

080053e0 <imu_GetData>:

bool imu_GetData()
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
	bool retVal = true;
 80053e6:	2301      	movs	r3, #1
 80053e8:	71fb      	strb	r3, [r7, #7]

	retVal &= imu_ReadData();
 80053ea:	f000 f869 	bl	80054c0 <imu_ReadData>
 80053ee:	4603      	mov	r3, r0
 80053f0:	461a      	mov	r2, r3
 80053f2:	79fb      	ldrb	r3, [r7, #7]
 80053f4:	4013      	ands	r3, r2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	bf14      	ite	ne
 80053fa:	2301      	movne	r3, #1
 80053fc:	2300      	moveq	r3, #0
 80053fe:	71fb      	strb	r3, [r7, #7]
	retVal &= imu_ProcessData();
 8005400:	f000 f87e 	bl	8005500 <imu_ProcessData>
 8005404:	4603      	mov	r3, r0
 8005406:	461a      	mov	r2, r3
 8005408:	79fb      	ldrb	r3, [r7, #7]
 800540a:	4013      	ands	r3, r2
 800540c:	2b00      	cmp	r3, #0
 800540e:	bf14      	ite	ne
 8005410:	2301      	movne	r3, #1
 8005412:	2300      	moveq	r3, #0
 8005414:	71fb      	strb	r3, [r7, #7]

	return retVal;
 8005416:	79fb      	ldrb	r3, [r7, #7]
}
 8005418:	4618      	mov	r0, r3
 800541a:	3708      	adds	r7, #8
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <imu_State>:

imuState_t imu_State()
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
	if (imu_IsActive())
 8005424:	f000 f874 	bl	8005510 <imu_IsActive>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <imu_State+0x12>
	{
		return IMU_ACTIVE;
 800542e:	2301      	movs	r3, #1
 8005430:	e000      	b.n	8005434 <imu_State+0x14>
	}
	else
	{
		return IMU_IDLE;
 8005432:	2300      	movs	r3, #0
	}
}
 8005434:	4618      	mov	r0, r3
 8005436:	bd80      	pop	{r7, pc}

08005438 <imu_SpinDirection>:

imuSpin_t imu_SpinDirection()
{
 8005438:	b480      	push	{r7}
 800543a:	af00      	add	r7, sp, #0
	if ((abs(imu.gz) < IMU_SPIN_THRESHOLD))
 800543c:	4b0b      	ldr	r3, [pc, #44]	; (800546c <imu_SpinDirection+0x34>)
 800543e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005442:	2b00      	cmp	r3, #0
 8005444:	bfb8      	it	lt
 8005446:	425b      	neglt	r3, r3
 8005448:	b29b      	uxth	r3, r3
 800544a:	2b59      	cmp	r3, #89	; 0x59
 800544c:	d801      	bhi.n	8005452 <imu_SpinDirection+0x1a>
	{
		return IMU_NO_SPIN;
 800544e:	2300      	movs	r3, #0
 8005450:	e007      	b.n	8005462 <imu_SpinDirection+0x2a>
	}
	else
	{
		if (imu.gz > 0)
 8005452:	4b06      	ldr	r3, [pc, #24]	; (800546c <imu_SpinDirection+0x34>)
 8005454:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005458:	2b00      	cmp	r3, #0
 800545a:	dd01      	ble.n	8005460 <imu_SpinDirection+0x28>
		{
			return IMU_POS_SPIN;
 800545c:	2301      	movs	r3, #1
 800545e:	e000      	b.n	8005462 <imu_SpinDirection+0x2a>
		}
		else
		{
			return IMU_NEG_SPIN;
 8005460:	2302      	movs	r3, #2
		}
	}
}
 8005462:	4618      	mov	r0, r3
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	20000048 	.word	0x20000048

08005470 <imu_ClearData>:

static void imu_ClearData()
{
 8005470:	b480      	push	{r7}
 8005472:	af00      	add	r7, sp, #0
	// accelerometer
	imu.ax = 0;
 8005474:	4b11      	ldr	r3, [pc, #68]	; (80054bc <imu_ClearData+0x4c>)
 8005476:	2200      	movs	r2, #0
 8005478:	801a      	strh	r2, [r3, #0]
	imu.ay = 0;
 800547a:	4b10      	ldr	r3, [pc, #64]	; (80054bc <imu_ClearData+0x4c>)
 800547c:	2200      	movs	r2, #0
 800547e:	805a      	strh	r2, [r3, #2]
	imu.az = 0;
 8005480:	4b0e      	ldr	r3, [pc, #56]	; (80054bc <imu_ClearData+0x4c>)
 8005482:	2200      	movs	r2, #0
 8005484:	809a      	strh	r2, [r3, #4]

	// gyro
	imu.gx = 0;
 8005486:	4b0d      	ldr	r3, [pc, #52]	; (80054bc <imu_ClearData+0x4c>)
 8005488:	2200      	movs	r2, #0
 800548a:	80da      	strh	r2, [r3, #6]
	imu.gy = 0;
 800548c:	4b0b      	ldr	r3, [pc, #44]	; (80054bc <imu_ClearData+0x4c>)
 800548e:	2200      	movs	r2, #0
 8005490:	811a      	strh	r2, [r3, #8]
	imu.gz = 0;
 8005492:	4b0a      	ldr	r3, [pc, #40]	; (80054bc <imu_ClearData+0x4c>)
 8005494:	2200      	movs	r2, #0
 8005496:	815a      	strh	r2, [r3, #10]

	// magnetomer
	imu.mx = 0;
 8005498:	4b08      	ldr	r3, [pc, #32]	; (80054bc <imu_ClearData+0x4c>)
 800549a:	2200      	movs	r2, #0
 800549c:	819a      	strh	r2, [r3, #12]
	imu.my = 0;
 800549e:	4b07      	ldr	r3, [pc, #28]	; (80054bc <imu_ClearData+0x4c>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	81da      	strh	r2, [r3, #14]
	imu.mz = 0;
 80054a4:	4b05      	ldr	r3, [pc, #20]	; (80054bc <imu_ClearData+0x4c>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	821a      	strh	r2, [r3, #16]

	// temperature
	imu.temp = 0;
 80054aa:	4b04      	ldr	r3, [pc, #16]	; (80054bc <imu_ClearData+0x4c>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	825a      	strh	r2, [r3, #18]
}
 80054b0:	bf00      	nop
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	20000048 	.word	0x20000048

080054c0 <imu_ReadData>:

static bool imu_ReadData()
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
	gyro_t gyroData;

	if (imuPort_GyroReadData(&gyroData))
 80054c6:	463b      	mov	r3, r7
 80054c8:	4618      	mov	r0, r3
 80054ca:	f000 f877 	bl	80055bc <imuPort_GyroReadData>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00d      	beq.n	80054f0 <imu_ReadData+0x30>
	{
		imu.gx = gyroData.gx;
 80054d4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80054d8:	4b08      	ldr	r3, [pc, #32]	; (80054fc <imu_ReadData+0x3c>)
 80054da:	80da      	strh	r2, [r3, #6]
		imu.gy = gyroData.gy;
 80054dc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80054e0:	4b06      	ldr	r3, [pc, #24]	; (80054fc <imu_ReadData+0x3c>)
 80054e2:	811a      	strh	r2, [r3, #8]
		imu.gz = gyroData.gz;
 80054e4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80054e8:	4b04      	ldr	r3, [pc, #16]	; (80054fc <imu_ReadData+0x3c>)
 80054ea:	815a      	strh	r2, [r3, #10]

		return true;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e000      	b.n	80054f2 <imu_ReadData+0x32>
	}
	else
	{
		return false;
 80054f0:	2300      	movs	r3, #0
	}
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	20000048 	.word	0x20000048

08005500 <imu_ProcessData>:

static bool imu_ProcessData()
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
	// todo: implement function
	return true;
 8005504:	2301      	movs	r3, #1
}
 8005506:	4618      	mov	r0, r3
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <imu_IsActive>:

static bool imu_IsActive()
{
 8005510:	b480      	push	{r7}
 8005512:	af00      	add	r7, sp, #0
	return ((imu.gx > IMU_SPIN_THRESHOLD) || (imu.gy > IMU_SPIN_THRESHOLD)
 8005514:	4b0c      	ldr	r3, [pc, #48]	; (8005548 <imu_IsActive+0x38>)
 8005516:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
			|| (imu.gz > IMU_SPIN_THRESHOLD));
 800551a:	2b5a      	cmp	r3, #90	; 0x5a
 800551c:	dc09      	bgt.n	8005532 <imu_IsActive+0x22>
	return ((imu.gx > IMU_SPIN_THRESHOLD) || (imu.gy > IMU_SPIN_THRESHOLD)
 800551e:	4b0a      	ldr	r3, [pc, #40]	; (8005548 <imu_IsActive+0x38>)
 8005520:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005524:	2b5a      	cmp	r3, #90	; 0x5a
 8005526:	dc04      	bgt.n	8005532 <imu_IsActive+0x22>
			|| (imu.gz > IMU_SPIN_THRESHOLD));
 8005528:	4b07      	ldr	r3, [pc, #28]	; (8005548 <imu_IsActive+0x38>)
 800552a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800552e:	2b5a      	cmp	r3, #90	; 0x5a
 8005530:	dd01      	ble.n	8005536 <imu_IsActive+0x26>
 8005532:	2301      	movs	r3, #1
 8005534:	e000      	b.n	8005538 <imu_IsActive+0x28>
 8005536:	2300      	movs	r3, #0
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	b2db      	uxtb	r3, r3
}
 800553e:	4618      	mov	r0, r3
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	20000048 	.word	0x20000048

0800554c <imuPort_Init>:
/**
 * IMU Port Functions
 */

bool imuPort_Init()
{
 800554c:	b580      	push	{r7, lr}
 800554e:	af00      	add	r7, sp, #0
	I2C1_Init();
 8005550:	f000 fb0a 	bl	8005b68 <I2C1_Init>
	if (imuPort_begin(ACC_FSR_4G, GYR_FSR_500DPS))
 8005554:	2101      	movs	r1, #1
 8005556:	2001      	movs	r0, #1
 8005558:	f000 f8a0 	bl	800569c <imuPort_begin>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d004      	beq.n	800556c <imuPort_Init+0x20>
	{
		BSP_LED_Off(LED_IMU);
 8005562:	2001      	movs	r0, #1
 8005564:	f7fb fc9e 	bl	8000ea4 <BSP_LED_Off>
		return true;
 8005568:	2301      	movs	r3, #1
 800556a:	e003      	b.n	8005574 <imuPort_Init+0x28>
	}
	else
	{
		BSP_LED_On(LED_IMU);
 800556c:	2001      	movs	r0, #1
 800556e:	f7fb fc7f 	bl	8000e70 <BSP_LED_On>
		return false;
 8005572:	2300      	movs	r3, #0
	}
}
 8005574:	4618      	mov	r0, r3
 8005576:	bd80      	pop	{r7, pc}

08005578 <imuPort_Check>:

bool imuPort_Check()
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af04      	add	r7, sp, #16
	uint8_t buffer[1];

	// Confirm device
	HAL_I2C_Mem_Read(&hi2c1, imu_i2cAddress << 1, WHO_AM_I, 1, buffer, 1,
 800557e:	4b0d      	ldr	r3, [pc, #52]	; (80055b4 <imuPort_Check+0x3c>)
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	b29b      	uxth	r3, r3
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	b299      	uxth	r1, r3
 8005588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800558c:	9302      	str	r3, [sp, #8]
 800558e:	2301      	movs	r3, #1
 8005590:	9301      	str	r3, [sp, #4]
 8005592:	1d3b      	adds	r3, r7, #4
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	2301      	movs	r3, #1
 8005598:	2275      	movs	r2, #117	; 0x75
 800559a:	4807      	ldr	r0, [pc, #28]	; (80055b8 <imuPort_Check+0x40>)
 800559c:	f7fc fe0e 	bl	80021bc <HAL_I2C_Mem_Read>
			IMU_I2C_TIMEOUT_MS);

	return (buffer[0] == WHO_AM_I_9250_VALUE) ? true : false;
 80055a0:	793b      	ldrb	r3, [r7, #4]
 80055a2:	2b71      	cmp	r3, #113	; 0x71
 80055a4:	bf0c      	ite	eq
 80055a6:	2301      	moveq	r3, #1
 80055a8:	2300      	movne	r3, #0
 80055aa:	b2db      	uxtb	r3, r3
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3708      	adds	r7, #8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	20000015 	.word	0x20000015
 80055b8:	20000094 	.word	0x20000094

080055bc <imuPort_GyroReadData>:
	// todo: not implemented yet
	return false;
}

bool imuPort_GyroReadData(gyro_t *gyro)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
	imuPort_readProcessedData();
 80055c4:	f000 f904 	bl	80057d0 <imuPort_readProcessedData>

	gyro->gx = sensorData.gx;
 80055c8:	4b09      	ldr	r3, [pc, #36]	; (80055f0 <imuPort_GyroReadData+0x34>)
 80055ca:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	801a      	strh	r2, [r3, #0]
	gyro->gy = sensorData.gy;
 80055d2:	4b07      	ldr	r3, [pc, #28]	; (80055f0 <imuPort_GyroReadData+0x34>)
 80055d4:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	805a      	strh	r2, [r3, #2]
	gyro->gz = sensorData.gz;
 80055dc:	4b04      	ldr	r3, [pc, #16]	; (80055f0 <imuPort_GyroReadData+0x34>)
 80055de:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	809a      	strh	r2, [r3, #4]

	return true;
 80055e6:	2301      	movs	r3, #1
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3708      	adds	r7, #8
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	20000070 	.word	0x20000070

080055f4 <imuPort_calibrateGyro>:
	return false;
}

/// @brief Find offsets for each axis of gyroscope.
void imuPort_calibrateGyro()
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
	int32_t gx = 0;
 80055fa:	2300      	movs	r3, #0
 80055fc:	60fb      	str	r3, [r7, #12]
	int32_t gy = 0;
 80055fe:	2300      	movs	r3, #0
 8005600:	60bb      	str	r3, [r7, #8]
	int32_t gz = 0;
 8005602:	2300      	movs	r3, #0
 8005604:	607b      	str	r3, [r7, #4]

	// Save specified number of points
	for (uint16_t i = 0; i < IMU_GYRO_CAL_POINTS; i++)
 8005606:	2300      	movs	r3, #0
 8005608:	807b      	strh	r3, [r7, #2]
 800560a:	e01c      	b.n	8005646 <imuPort_calibrateGyro+0x52>
	{
		imuPort_readRawData();
 800560c:	f000 f88c 	bl	8005728 <imuPort_readRawData>

		gx += rawData.gx;
 8005610:	4b1f      	ldr	r3, [pc, #124]	; (8005690 <imuPort_calibrateGyro+0x9c>)
 8005612:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005616:	461a      	mov	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4413      	add	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]
		gy += rawData.gy;
 800561e:	4b1c      	ldr	r3, [pc, #112]	; (8005690 <imuPort_calibrateGyro+0x9c>)
 8005620:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005624:	461a      	mov	r2, r3
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	4413      	add	r3, r2
 800562a:	60bb      	str	r3, [r7, #8]
		gz += rawData.gz;
 800562c:	4b18      	ldr	r3, [pc, #96]	; (8005690 <imuPort_calibrateGyro+0x9c>)
 800562e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005632:	461a      	mov	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4413      	add	r3, r2
 8005638:	607b      	str	r3, [r7, #4]

		HAL_Delay(10); // @todo: improve this method
 800563a:	200a      	movs	r0, #10
 800563c:	f7fb fcd8 	bl	8000ff0 <HAL_Delay>
	for (uint16_t i = 0; i < IMU_GYRO_CAL_POINTS; i++)
 8005640:	887b      	ldrh	r3, [r7, #2]
 8005642:	3301      	adds	r3, #1
 8005644:	807b      	strh	r3, [r7, #2]
 8005646:	887b      	ldrh	r3, [r7, #2]
 8005648:	2b09      	cmp	r3, #9
 800564a:	d9df      	bls.n	800560c <imuPort_calibrateGyro+0x18>
	}

	// Average the saved data points to find the gyroscope offset
	gyroCal.gx = (int16_t) (gx / IMU_GYRO_CAL_POINTS);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4a11      	ldr	r2, [pc, #68]	; (8005694 <imuPort_calibrateGyro+0xa0>)
 8005650:	fb82 1203 	smull	r1, r2, r2, r3
 8005654:	1092      	asrs	r2, r2, #2
 8005656:	17db      	asrs	r3, r3, #31
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	b21a      	sxth	r2, r3
 800565c:	4b0e      	ldr	r3, [pc, #56]	; (8005698 <imuPort_calibrateGyro+0xa4>)
 800565e:	801a      	strh	r2, [r3, #0]
	gyroCal.gy = (int16_t) (gy / IMU_GYRO_CAL_POINTS);
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	4a0c      	ldr	r2, [pc, #48]	; (8005694 <imuPort_calibrateGyro+0xa0>)
 8005664:	fb82 1203 	smull	r1, r2, r2, r3
 8005668:	1092      	asrs	r2, r2, #2
 800566a:	17db      	asrs	r3, r3, #31
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	b21a      	sxth	r2, r3
 8005670:	4b09      	ldr	r3, [pc, #36]	; (8005698 <imuPort_calibrateGyro+0xa4>)
 8005672:	805a      	strh	r2, [r3, #2]
	gyroCal.gz = (int16_t) (gz / IMU_GYRO_CAL_POINTS);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a07      	ldr	r2, [pc, #28]	; (8005694 <imuPort_calibrateGyro+0xa0>)
 8005678:	fb82 1203 	smull	r1, r2, r2, r3
 800567c:	1092      	asrs	r2, r2, #2
 800567e:	17db      	asrs	r3, r3, #31
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	b21a      	sxth	r2, r3
 8005684:	4b04      	ldr	r3, [pc, #16]	; (8005698 <imuPort_calibrateGyro+0xa4>)
 8005686:	809a      	strh	r2, [r3, #4]
}
 8005688:	bf00      	nop
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	2000005c 	.word	0x2000005c
 8005694:	66666667 	.word	0x66666667
 8005698:	20000084 	.word	0x20000084

0800569c <imuPort_begin>:

static bool imuPort_begin(uint8_t accScale, uint8_t gyroScale)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b088      	sub	sp, #32
 80056a0:	af04      	add	r7, sp, #16
 80056a2:	4603      	mov	r3, r0
 80056a4:	460a      	mov	r2, r1
 80056a6:	71fb      	strb	r3, [r7, #7]
 80056a8:	4613      	mov	r3, r2
 80056aa:	71bb      	strb	r3, [r7, #6]
	// Initialize variables
	uint8_t buffer[1];

	// Confirm device
	HAL_I2C_Mem_Read(&hi2c1, imu_i2cAddress << 1, WHO_AM_I, 1, buffer, 1,
 80056ac:	4b1c      	ldr	r3, [pc, #112]	; (8005720 <imuPort_begin+0x84>)
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	005b      	lsls	r3, r3, #1
 80056b4:	b299      	uxth	r1, r3
 80056b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056ba:	9302      	str	r3, [sp, #8]
 80056bc:	2301      	movs	r3, #1
 80056be:	9301      	str	r3, [sp, #4]
 80056c0:	f107 030c 	add.w	r3, r7, #12
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	2301      	movs	r3, #1
 80056c8:	2275      	movs	r2, #117	; 0x75
 80056ca:	4816      	ldr	r0, [pc, #88]	; (8005724 <imuPort_begin+0x88>)
 80056cc:	f7fc fd76 	bl	80021bc <HAL_I2C_Mem_Read>
			IMU_I2C_TIMEOUT_MS);

	if (buffer[0] == WHO_AM_I_9250_VALUE)
 80056d0:	7b3b      	ldrb	r3, [r7, #12]
 80056d2:	2b71      	cmp	r3, #113	; 0x71
 80056d4:	d11f      	bne.n	8005716 <imuPort_begin+0x7a>
	{
		// Startup / reset the sensor
		buffer[0] = 0x00;
 80056d6:	2300      	movs	r3, #0
 80056d8:	733b      	strb	r3, [r7, #12]
		HAL_I2C_Mem_Write(&hi2c1, imu_i2cAddress << 1, PWR_MGMT_1, 1, buffer, 1,
 80056da:	4b11      	ldr	r3, [pc, #68]	; (8005720 <imuPort_begin+0x84>)
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	b29b      	uxth	r3, r3
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	b299      	uxth	r1, r3
 80056e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056e8:	9302      	str	r3, [sp, #8]
 80056ea:	2301      	movs	r3, #1
 80056ec:	9301      	str	r3, [sp, #4]
 80056ee:	f107 030c 	add.w	r3, r7, #12
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	2301      	movs	r3, #1
 80056f6:	226b      	movs	r2, #107	; 0x6b
 80056f8:	480a      	ldr	r0, [pc, #40]	; (8005724 <imuPort_begin+0x88>)
 80056fa:	f7fc fc65 	bl	8001fc8 <HAL_I2C_Mem_Write>
				IMU_I2C_TIMEOUT_MS);

		// Set the full scale ranges
		imuPort_writeAccFullScaleRange(accScale);
 80056fe:	79fb      	ldrb	r3, [r7, #7]
 8005700:	4618      	mov	r0, r3
 8005702:	f000 f8f7 	bl	80058f4 <imuPort_writeAccFullScaleRange>

		imuPort_writeGyroFullScaleRange(gyroScale);
 8005706:	79bb      	ldrb	r3, [r7, #6]
 8005708:	4618      	mov	r0, r3
 800570a:	f000 f98f 	bl	8005a2c <imuPort_writeGyroFullScaleRange>
		imuPort_calibrateGyro();
 800570e:	f7ff ff71 	bl	80055f4 <imuPort_calibrateGyro>

		return true;
 8005712:	2301      	movs	r3, #1
 8005714:	e000      	b.n	8005718 <imuPort_begin+0x7c>
	}
	else
	{
		return false;
 8005716:	2300      	movs	r3, #0
	}
}
 8005718:	4618      	mov	r0, r3
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	20000015 	.word	0x20000015
 8005724:	20000094 	.word	0x20000094

08005728 <imuPort_readRawData>:

static void imuPort_readRawData()
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b088      	sub	sp, #32
 800572c:	af04      	add	r7, sp, #16
	uint8_t buffer[14];

	// Subroutine for reading the raw data
	HAL_I2C_Mem_Read(&hi2c1, imu_i2cAddress << 1, ACCEL_XOUT_H, 1, buffer, 14,
 800572e:	4b25      	ldr	r3, [pc, #148]	; (80057c4 <imuPort_readRawData+0x9c>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	b29b      	uxth	r3, r3
 8005734:	005b      	lsls	r3, r3, #1
 8005736:	b299      	uxth	r1, r3
 8005738:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800573c:	9302      	str	r3, [sp, #8]
 800573e:	230e      	movs	r3, #14
 8005740:	9301      	str	r3, [sp, #4]
 8005742:	463b      	mov	r3, r7
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	2301      	movs	r3, #1
 8005748:	223b      	movs	r2, #59	; 0x3b
 800574a:	481f      	ldr	r0, [pc, #124]	; (80057c8 <imuPort_readRawData+0xa0>)
 800574c:	f7fc fd36 	bl	80021bc <HAL_I2C_Mem_Read>
			IMU_I2C_TIMEOUT_MS);

	// Bit shift the data
	rawData.ax = buffer[0] << 8 | buffer[1];
 8005750:	783b      	ldrb	r3, [r7, #0]
 8005752:	021b      	lsls	r3, r3, #8
 8005754:	b21a      	sxth	r2, r3
 8005756:	787b      	ldrb	r3, [r7, #1]
 8005758:	b21b      	sxth	r3, r3
 800575a:	4313      	orrs	r3, r2
 800575c:	b21a      	sxth	r2, r3
 800575e:	4b1b      	ldr	r3, [pc, #108]	; (80057cc <imuPort_readRawData+0xa4>)
 8005760:	801a      	strh	r2, [r3, #0]
	rawData.ay = buffer[2] << 8 | buffer[3];
 8005762:	78bb      	ldrb	r3, [r7, #2]
 8005764:	021b      	lsls	r3, r3, #8
 8005766:	b21a      	sxth	r2, r3
 8005768:	78fb      	ldrb	r3, [r7, #3]
 800576a:	b21b      	sxth	r3, r3
 800576c:	4313      	orrs	r3, r2
 800576e:	b21a      	sxth	r2, r3
 8005770:	4b16      	ldr	r3, [pc, #88]	; (80057cc <imuPort_readRawData+0xa4>)
 8005772:	805a      	strh	r2, [r3, #2]
	rawData.az = buffer[4] << 8 | buffer[5];
 8005774:	793b      	ldrb	r3, [r7, #4]
 8005776:	021b      	lsls	r3, r3, #8
 8005778:	b21a      	sxth	r2, r3
 800577a:	797b      	ldrb	r3, [r7, #5]
 800577c:	b21b      	sxth	r3, r3
 800577e:	4313      	orrs	r3, r2
 8005780:	b21a      	sxth	r2, r3
 8005782:	4b12      	ldr	r3, [pc, #72]	; (80057cc <imuPort_readRawData+0xa4>)
 8005784:	809a      	strh	r2, [r3, #4]
	// temperature = buffer[6] << 8 | buffer[7];
	rawData.gx = buffer[8] << 8 | buffer[9];
 8005786:	7a3b      	ldrb	r3, [r7, #8]
 8005788:	021b      	lsls	r3, r3, #8
 800578a:	b21a      	sxth	r2, r3
 800578c:	7a7b      	ldrb	r3, [r7, #9]
 800578e:	b21b      	sxth	r3, r3
 8005790:	4313      	orrs	r3, r2
 8005792:	b21a      	sxth	r2, r3
 8005794:	4b0d      	ldr	r3, [pc, #52]	; (80057cc <imuPort_readRawData+0xa4>)
 8005796:	80da      	strh	r2, [r3, #6]
	rawData.gy = buffer[10] << 8 | buffer[11];
 8005798:	7abb      	ldrb	r3, [r7, #10]
 800579a:	021b      	lsls	r3, r3, #8
 800579c:	b21a      	sxth	r2, r3
 800579e:	7afb      	ldrb	r3, [r7, #11]
 80057a0:	b21b      	sxth	r3, r3
 80057a2:	4313      	orrs	r3, r2
 80057a4:	b21a      	sxth	r2, r3
 80057a6:	4b09      	ldr	r3, [pc, #36]	; (80057cc <imuPort_readRawData+0xa4>)
 80057a8:	811a      	strh	r2, [r3, #8]
	rawData.gz = buffer[12] << 8 | buffer[13];
 80057aa:	7b3b      	ldrb	r3, [r7, #12]
 80057ac:	021b      	lsls	r3, r3, #8
 80057ae:	b21a      	sxth	r2, r3
 80057b0:	7b7b      	ldrb	r3, [r7, #13]
 80057b2:	b21b      	sxth	r3, r3
 80057b4:	4313      	orrs	r3, r2
 80057b6:	b21a      	sxth	r2, r3
 80057b8:	4b04      	ldr	r3, [pc, #16]	; (80057cc <imuPort_readRawData+0xa4>)
 80057ba:	815a      	strh	r2, [r3, #10]
}
 80057bc:	bf00      	nop
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	20000015 	.word	0x20000015
 80057c8:	20000094 	.word	0x20000094
 80057cc:	2000005c 	.word	0x2000005c

080057d0 <imuPort_readProcessedData>:

static void imuPort_readProcessedData()
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	af00      	add	r7, sp, #0
	// Get raw values from the IMU
	imuPort_readRawData();
 80057d4:	f7ff ffa8 	bl	8005728 <imuPort_readRawData>

	// Convert accelerometer values to g's
	sensorData.ax = rawData.ax / accScaleFactor;
 80057d8:	4b41      	ldr	r3, [pc, #260]	; (80058e0 <imuPort_readProcessedData+0x110>)
 80057da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057de:	ee07 3a90 	vmov	s15, r3
 80057e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80057e6:	4b3f      	ldr	r3, [pc, #252]	; (80058e4 <imuPort_readProcessedData+0x114>)
 80057e8:	ed93 7a00 	vldr	s14, [r3]
 80057ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057f4:	ee17 3a90 	vmov	r3, s15
 80057f8:	b21a      	sxth	r2, r3
 80057fa:	4b3b      	ldr	r3, [pc, #236]	; (80058e8 <imuPort_readProcessedData+0x118>)
 80057fc:	801a      	strh	r2, [r3, #0]
	sensorData.ay = rawData.ay / accScaleFactor;
 80057fe:	4b38      	ldr	r3, [pc, #224]	; (80058e0 <imuPort_readProcessedData+0x110>)
 8005800:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005804:	ee07 3a90 	vmov	s15, r3
 8005808:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800580c:	4b35      	ldr	r3, [pc, #212]	; (80058e4 <imuPort_readProcessedData+0x114>)
 800580e:	ed93 7a00 	vldr	s14, [r3]
 8005812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005816:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800581a:	ee17 3a90 	vmov	r3, s15
 800581e:	b21a      	sxth	r2, r3
 8005820:	4b31      	ldr	r3, [pc, #196]	; (80058e8 <imuPort_readProcessedData+0x118>)
 8005822:	805a      	strh	r2, [r3, #2]
	sensorData.az = rawData.az / accScaleFactor;
 8005824:	4b2e      	ldr	r3, [pc, #184]	; (80058e0 <imuPort_readProcessedData+0x110>)
 8005826:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800582a:	ee07 3a90 	vmov	s15, r3
 800582e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005832:	4b2c      	ldr	r3, [pc, #176]	; (80058e4 <imuPort_readProcessedData+0x114>)
 8005834:	ed93 7a00 	vldr	s14, [r3]
 8005838:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800583c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005840:	ee17 3a90 	vmov	r3, s15
 8005844:	b21a      	sxth	r2, r3
 8005846:	4b28      	ldr	r3, [pc, #160]	; (80058e8 <imuPort_readProcessedData+0x118>)
 8005848:	809a      	strh	r2, [r3, #4]

	// Compensate offset and convert to deg/s
	sensorData.gx = (rawData.gx - gyroCal.gx) / gyroScaleFactor;
 800584a:	4b25      	ldr	r3, [pc, #148]	; (80058e0 <imuPort_readProcessedData+0x110>)
 800584c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005850:	461a      	mov	r2, r3
 8005852:	4b26      	ldr	r3, [pc, #152]	; (80058ec <imuPort_readProcessedData+0x11c>)
 8005854:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	ee07 3a90 	vmov	s15, r3
 800585e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005862:	4b23      	ldr	r3, [pc, #140]	; (80058f0 <imuPort_readProcessedData+0x120>)
 8005864:	ed93 7a00 	vldr	s14, [r3]
 8005868:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800586c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005870:	ee17 3a90 	vmov	r3, s15
 8005874:	b21a      	sxth	r2, r3
 8005876:	4b1c      	ldr	r3, [pc, #112]	; (80058e8 <imuPort_readProcessedData+0x118>)
 8005878:	80da      	strh	r2, [r3, #6]
	sensorData.gy = (rawData.gy - gyroCal.gy) / gyroScaleFactor;
 800587a:	4b19      	ldr	r3, [pc, #100]	; (80058e0 <imuPort_readProcessedData+0x110>)
 800587c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005880:	461a      	mov	r2, r3
 8005882:	4b1a      	ldr	r3, [pc, #104]	; (80058ec <imuPort_readProcessedData+0x11c>)
 8005884:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	ee07 3a90 	vmov	s15, r3
 800588e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005892:	4b17      	ldr	r3, [pc, #92]	; (80058f0 <imuPort_readProcessedData+0x120>)
 8005894:	ed93 7a00 	vldr	s14, [r3]
 8005898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800589c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058a0:	ee17 3a90 	vmov	r3, s15
 80058a4:	b21a      	sxth	r2, r3
 80058a6:	4b10      	ldr	r3, [pc, #64]	; (80058e8 <imuPort_readProcessedData+0x118>)
 80058a8:	811a      	strh	r2, [r3, #8]
	sensorData.gz = (rawData.gz - gyroCal.gz) / gyroScaleFactor;
 80058aa:	4b0d      	ldr	r3, [pc, #52]	; (80058e0 <imuPort_readProcessedData+0x110>)
 80058ac:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80058b0:	461a      	mov	r2, r3
 80058b2:	4b0e      	ldr	r3, [pc, #56]	; (80058ec <imuPort_readProcessedData+0x11c>)
 80058b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	ee07 3a90 	vmov	s15, r3
 80058be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80058c2:	4b0b      	ldr	r3, [pc, #44]	; (80058f0 <imuPort_readProcessedData+0x120>)
 80058c4:	ed93 7a00 	vldr	s14, [r3]
 80058c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058d0:	ee17 3a90 	vmov	r3, s15
 80058d4:	b21a      	sxth	r2, r3
 80058d6:	4b04      	ldr	r3, [pc, #16]	; (80058e8 <imuPort_readProcessedData+0x118>)
 80058d8:	815a      	strh	r2, [r3, #10]
}
 80058da:	bf00      	nop
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	2000005c 	.word	0x2000005c
 80058e4:	2000008c 	.word	0x2000008c
 80058e8:	20000070 	.word	0x20000070
 80058ec:	20000084 	.word	0x20000084
 80058f0:	20000090 	.word	0x20000090

080058f4 <imuPort_writeAccFullScaleRange>:

static void imuPort_writeAccFullScaleRange(uint8_t accScale)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b088      	sub	sp, #32
 80058f8:	af04      	add	r7, sp, #16
 80058fa:	4603      	mov	r3, r0
 80058fc:	71fb      	strb	r3, [r7, #7]
	// Variable init
	uint8_t select;

	// Set the value
	switch (accScale)
 80058fe:	79fb      	ldrb	r3, [r7, #7]
 8005900:	2b03      	cmp	r3, #3
 8005902:	d86f      	bhi.n	80059e4 <imuPort_writeAccFullScaleRange+0xf0>
 8005904:	a201      	add	r2, pc, #4	; (adr r2, 800590c <imuPort_writeAccFullScaleRange+0x18>)
 8005906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590a:	bf00      	nop
 800590c:	0800591d 	.word	0x0800591d
 8005910:	0800594f 	.word	0x0800594f
 8005914:	08005981 	.word	0x08005981
 8005918:	080059b3 	.word	0x080059b3
	{
	case ACC_FSR_2G:
		accScaleFactor = ACC_FSR_2G_FACTOR;
 800591c:	4b40      	ldr	r3, [pc, #256]	; (8005a20 <imuPort_writeAccFullScaleRange+0x12c>)
 800591e:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8005922:	601a      	str	r2, [r3, #0]
		select = 0x00;
 8005924:	2300      	movs	r3, #0
 8005926:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(&hi2c1, imu_i2cAddress << 1, ACCEL_CONFIG, 1, &select,
 8005928:	4b3e      	ldr	r3, [pc, #248]	; (8005a24 <imuPort_writeAccFullScaleRange+0x130>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	b29b      	uxth	r3, r3
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	b299      	uxth	r1, r3
 8005932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005936:	9302      	str	r3, [sp, #8]
 8005938:	2301      	movs	r3, #1
 800593a:	9301      	str	r3, [sp, #4]
 800593c:	f107 030f 	add.w	r3, r7, #15
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	2301      	movs	r3, #1
 8005944:	221c      	movs	r2, #28
 8005946:	4838      	ldr	r0, [pc, #224]	; (8005a28 <imuPort_writeAccFullScaleRange+0x134>)
 8005948:	f7fc fb3e 	bl	8001fc8 <HAL_I2C_Mem_Write>
				1, IMU_I2C_TIMEOUT_MS);
		break;
 800594c:	e063      	b.n	8005a16 <imuPort_writeAccFullScaleRange+0x122>

	case ACC_FSR_4G:
		accScaleFactor = ACC_FSR_4G_FACTOR;
 800594e:	4b34      	ldr	r3, [pc, #208]	; (8005a20 <imuPort_writeAccFullScaleRange+0x12c>)
 8005950:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8005954:	601a      	str	r2, [r3, #0]
		select = 0x08;
 8005956:	2308      	movs	r3, #8
 8005958:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(&hi2c1, imu_i2cAddress << 1, ACCEL_CONFIG, 1, &select,
 800595a:	4b32      	ldr	r3, [pc, #200]	; (8005a24 <imuPort_writeAccFullScaleRange+0x130>)
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	b29b      	uxth	r3, r3
 8005960:	005b      	lsls	r3, r3, #1
 8005962:	b299      	uxth	r1, r3
 8005964:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005968:	9302      	str	r3, [sp, #8]
 800596a:	2301      	movs	r3, #1
 800596c:	9301      	str	r3, [sp, #4]
 800596e:	f107 030f 	add.w	r3, r7, #15
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	2301      	movs	r3, #1
 8005976:	221c      	movs	r2, #28
 8005978:	482b      	ldr	r0, [pc, #172]	; (8005a28 <imuPort_writeAccFullScaleRange+0x134>)
 800597a:	f7fc fb25 	bl	8001fc8 <HAL_I2C_Mem_Write>
				1, IMU_I2C_TIMEOUT_MS);
		break;
 800597e:	e04a      	b.n	8005a16 <imuPort_writeAccFullScaleRange+0x122>

	case ACC_FSR_8G:
		accScaleFactor = ACC_FSR_8G_FACTOR;
 8005980:	4b27      	ldr	r3, [pc, #156]	; (8005a20 <imuPort_writeAccFullScaleRange+0x12c>)
 8005982:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8005986:	601a      	str	r2, [r3, #0]
		select = 0x10;
 8005988:	2310      	movs	r3, #16
 800598a:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(&hi2c1, imu_i2cAddress << 1, ACCEL_CONFIG, 1, &select,
 800598c:	4b25      	ldr	r3, [pc, #148]	; (8005a24 <imuPort_writeAccFullScaleRange+0x130>)
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	b29b      	uxth	r3, r3
 8005992:	005b      	lsls	r3, r3, #1
 8005994:	b299      	uxth	r1, r3
 8005996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800599a:	9302      	str	r3, [sp, #8]
 800599c:	2301      	movs	r3, #1
 800599e:	9301      	str	r3, [sp, #4]
 80059a0:	f107 030f 	add.w	r3, r7, #15
 80059a4:	9300      	str	r3, [sp, #0]
 80059a6:	2301      	movs	r3, #1
 80059a8:	221c      	movs	r2, #28
 80059aa:	481f      	ldr	r0, [pc, #124]	; (8005a28 <imuPort_writeAccFullScaleRange+0x134>)
 80059ac:	f7fc fb0c 	bl	8001fc8 <HAL_I2C_Mem_Write>
				1, IMU_I2C_TIMEOUT_MS);
		break;
 80059b0:	e031      	b.n	8005a16 <imuPort_writeAccFullScaleRange+0x122>

	case ACC_FSR_16G:
		accScaleFactor = ACC_FSR_16G_FACTOR;
 80059b2:	4b1b      	ldr	r3, [pc, #108]	; (8005a20 <imuPort_writeAccFullScaleRange+0x12c>)
 80059b4:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 80059b8:	601a      	str	r2, [r3, #0]
		select = 0x18;
 80059ba:	2318      	movs	r3, #24
 80059bc:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(&hi2c1, imu_i2cAddress << 1, ACCEL_CONFIG, 1, &select,
 80059be:	4b19      	ldr	r3, [pc, #100]	; (8005a24 <imuPort_writeAccFullScaleRange+0x130>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	005b      	lsls	r3, r3, #1
 80059c6:	b299      	uxth	r1, r3
 80059c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059cc:	9302      	str	r3, [sp, #8]
 80059ce:	2301      	movs	r3, #1
 80059d0:	9301      	str	r3, [sp, #4]
 80059d2:	f107 030f 	add.w	r3, r7, #15
 80059d6:	9300      	str	r3, [sp, #0]
 80059d8:	2301      	movs	r3, #1
 80059da:	221c      	movs	r2, #28
 80059dc:	4812      	ldr	r0, [pc, #72]	; (8005a28 <imuPort_writeAccFullScaleRange+0x134>)
 80059de:	f7fc faf3 	bl	8001fc8 <HAL_I2C_Mem_Write>
				1, IMU_I2C_TIMEOUT_MS);
		break;
 80059e2:	e018      	b.n	8005a16 <imuPort_writeAccFullScaleRange+0x122>

	default:
		accScaleFactor = ACC_FSR_4G_FACTOR;
 80059e4:	4b0e      	ldr	r3, [pc, #56]	; (8005a20 <imuPort_writeAccFullScaleRange+0x12c>)
 80059e6:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80059ea:	601a      	str	r2, [r3, #0]
		select = 0x08;
 80059ec:	2308      	movs	r3, #8
 80059ee:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(&hi2c1, imu_i2cAddress << 1, ACCEL_CONFIG, 1, &select,
 80059f0:	4b0c      	ldr	r3, [pc, #48]	; (8005a24 <imuPort_writeAccFullScaleRange+0x130>)
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	005b      	lsls	r3, r3, #1
 80059f8:	b299      	uxth	r1, r3
 80059fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059fe:	9302      	str	r3, [sp, #8]
 8005a00:	2301      	movs	r3, #1
 8005a02:	9301      	str	r3, [sp, #4]
 8005a04:	f107 030f 	add.w	r3, r7, #15
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	221c      	movs	r2, #28
 8005a0e:	4806      	ldr	r0, [pc, #24]	; (8005a28 <imuPort_writeAccFullScaleRange+0x134>)
 8005a10:	f7fc fada 	bl	8001fc8 <HAL_I2C_Mem_Write>
				1, IMU_I2C_TIMEOUT_MS);
		break;
 8005a14:	bf00      	nop
	}
}
 8005a16:	bf00      	nop
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	2000008c 	.word	0x2000008c
 8005a24:	20000015 	.word	0x20000015
 8005a28:	20000094 	.word	0x20000094

08005a2c <imuPort_writeGyroFullScaleRange>:

static void imuPort_writeGyroFullScaleRange(uint8_t gyroScale)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b088      	sub	sp, #32
 8005a30:	af04      	add	r7, sp, #16
 8005a32:	4603      	mov	r3, r0
 8005a34:	71fb      	strb	r3, [r7, #7]
	// Variable init
	uint8_t select;

	// Set the value
	switch (gyroScale)
 8005a36:	79fb      	ldrb	r3, [r7, #7]
 8005a38:	2b03      	cmp	r3, #3
 8005a3a:	d86b      	bhi.n	8005b14 <imuPort_writeGyroFullScaleRange+0xe8>
 8005a3c:	a201      	add	r2, pc, #4	; (adr r2, 8005a44 <imuPort_writeGyroFullScaleRange+0x18>)
 8005a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a42:	bf00      	nop
 8005a44:	08005a55 	.word	0x08005a55
 8005a48:	08005a85 	.word	0x08005a85
 8005a4c:	08005ab5 	.word	0x08005ab5
 8005a50:	08005ae5 	.word	0x08005ae5
	{
	case GYR_FSR_250DPS:
		gyroScaleFactor = GYR_FSR_250DPS_FACTOR;
 8005a54:	4b3d      	ldr	r3, [pc, #244]	; (8005b4c <imuPort_writeGyroFullScaleRange+0x120>)
 8005a56:	4a3e      	ldr	r2, [pc, #248]	; (8005b50 <imuPort_writeGyroFullScaleRange+0x124>)
 8005a58:	601a      	str	r2, [r3, #0]
		select = 0x00;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(&hi2c1, imu_i2cAddress << 1, GYRO_CONFIG, 1, &select,
 8005a5e:	4b3d      	ldr	r3, [pc, #244]	; (8005b54 <imuPort_writeGyroFullScaleRange+0x128>)
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	b299      	uxth	r1, r3
 8005a68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a6c:	9302      	str	r3, [sp, #8]
 8005a6e:	2301      	movs	r3, #1
 8005a70:	9301      	str	r3, [sp, #4]
 8005a72:	f107 030f 	add.w	r3, r7, #15
 8005a76:	9300      	str	r3, [sp, #0]
 8005a78:	2301      	movs	r3, #1
 8005a7a:	221b      	movs	r2, #27
 8005a7c:	4836      	ldr	r0, [pc, #216]	; (8005b58 <imuPort_writeGyroFullScaleRange+0x12c>)
 8005a7e:	f7fc faa3 	bl	8001fc8 <HAL_I2C_Mem_Write>
				1, IMU_I2C_TIMEOUT_MS);
		break;
 8005a82:	e05f      	b.n	8005b44 <imuPort_writeGyroFullScaleRange+0x118>
	case GYR_FSR_500DPS:
		gyroScaleFactor = GYR_FSR_500DPS_FACTOR;
 8005a84:	4b31      	ldr	r3, [pc, #196]	; (8005b4c <imuPort_writeGyroFullScaleRange+0x120>)
 8005a86:	4a35      	ldr	r2, [pc, #212]	; (8005b5c <imuPort_writeGyroFullScaleRange+0x130>)
 8005a88:	601a      	str	r2, [r3, #0]
		select = 0x08;
 8005a8a:	2308      	movs	r3, #8
 8005a8c:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(&hi2c1, imu_i2cAddress << 1, GYRO_CONFIG, 1, &select,
 8005a8e:	4b31      	ldr	r3, [pc, #196]	; (8005b54 <imuPort_writeGyroFullScaleRange+0x128>)
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	b299      	uxth	r1, r3
 8005a98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a9c:	9302      	str	r3, [sp, #8]
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	9301      	str	r3, [sp, #4]
 8005aa2:	f107 030f 	add.w	r3, r7, #15
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	221b      	movs	r2, #27
 8005aac:	482a      	ldr	r0, [pc, #168]	; (8005b58 <imuPort_writeGyroFullScaleRange+0x12c>)
 8005aae:	f7fc fa8b 	bl	8001fc8 <HAL_I2C_Mem_Write>
				1, IMU_I2C_TIMEOUT_MS);
		break;
 8005ab2:	e047      	b.n	8005b44 <imuPort_writeGyroFullScaleRange+0x118>
	case GYR_FSR_1000DPS:
		gyroScaleFactor = GYR_FSR_1000DPS_FACTOR;
 8005ab4:	4b25      	ldr	r3, [pc, #148]	; (8005b4c <imuPort_writeGyroFullScaleRange+0x120>)
 8005ab6:	4a2a      	ldr	r2, [pc, #168]	; (8005b60 <imuPort_writeGyroFullScaleRange+0x134>)
 8005ab8:	601a      	str	r2, [r3, #0]
		select = 0x10;
 8005aba:	2310      	movs	r3, #16
 8005abc:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(&hi2c1, imu_i2cAddress << 1, GYRO_CONFIG, 1, &select,
 8005abe:	4b25      	ldr	r3, [pc, #148]	; (8005b54 <imuPort_writeGyroFullScaleRange+0x128>)
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	005b      	lsls	r3, r3, #1
 8005ac6:	b299      	uxth	r1, r3
 8005ac8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005acc:	9302      	str	r3, [sp, #8]
 8005ace:	2301      	movs	r3, #1
 8005ad0:	9301      	str	r3, [sp, #4]
 8005ad2:	f107 030f 	add.w	r3, r7, #15
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	2301      	movs	r3, #1
 8005ada:	221b      	movs	r2, #27
 8005adc:	481e      	ldr	r0, [pc, #120]	; (8005b58 <imuPort_writeGyroFullScaleRange+0x12c>)
 8005ade:	f7fc fa73 	bl	8001fc8 <HAL_I2C_Mem_Write>
				1, IMU_I2C_TIMEOUT_MS);
		break;
 8005ae2:	e02f      	b.n	8005b44 <imuPort_writeGyroFullScaleRange+0x118>
	case GYR_FSR_2000DPS:
		gyroScaleFactor = GYR_FSR_2000DPS_FACTOR;
 8005ae4:	4b19      	ldr	r3, [pc, #100]	; (8005b4c <imuPort_writeGyroFullScaleRange+0x120>)
 8005ae6:	4a1f      	ldr	r2, [pc, #124]	; (8005b64 <imuPort_writeGyroFullScaleRange+0x138>)
 8005ae8:	601a      	str	r2, [r3, #0]
		select = 0x18;
 8005aea:	2318      	movs	r3, #24
 8005aec:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(&hi2c1, imu_i2cAddress << 1, GYRO_CONFIG, 1, &select,
 8005aee:	4b19      	ldr	r3, [pc, #100]	; (8005b54 <imuPort_writeGyroFullScaleRange+0x128>)
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	005b      	lsls	r3, r3, #1
 8005af6:	b299      	uxth	r1, r3
 8005af8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005afc:	9302      	str	r3, [sp, #8]
 8005afe:	2301      	movs	r3, #1
 8005b00:	9301      	str	r3, [sp, #4]
 8005b02:	f107 030f 	add.w	r3, r7, #15
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	2301      	movs	r3, #1
 8005b0a:	221b      	movs	r2, #27
 8005b0c:	4812      	ldr	r0, [pc, #72]	; (8005b58 <imuPort_writeGyroFullScaleRange+0x12c>)
 8005b0e:	f7fc fa5b 	bl	8001fc8 <HAL_I2C_Mem_Write>
				1, IMU_I2C_TIMEOUT_MS);
		break;
 8005b12:	e017      	b.n	8005b44 <imuPort_writeGyroFullScaleRange+0x118>
	default:
		gyroScaleFactor = GYR_FSR_500DPS_FACTOR;
 8005b14:	4b0d      	ldr	r3, [pc, #52]	; (8005b4c <imuPort_writeGyroFullScaleRange+0x120>)
 8005b16:	4a11      	ldr	r2, [pc, #68]	; (8005b5c <imuPort_writeGyroFullScaleRange+0x130>)
 8005b18:	601a      	str	r2, [r3, #0]
		select = 0x08;
 8005b1a:	2308      	movs	r3, #8
 8005b1c:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(&hi2c1, imu_i2cAddress << 1, GYRO_CONFIG, 1, &select,
 8005b1e:	4b0d      	ldr	r3, [pc, #52]	; (8005b54 <imuPort_writeGyroFullScaleRange+0x128>)
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	005b      	lsls	r3, r3, #1
 8005b26:	b299      	uxth	r1, r3
 8005b28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b2c:	9302      	str	r3, [sp, #8]
 8005b2e:	2301      	movs	r3, #1
 8005b30:	9301      	str	r3, [sp, #4]
 8005b32:	f107 030f 	add.w	r3, r7, #15
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	2301      	movs	r3, #1
 8005b3a:	221b      	movs	r2, #27
 8005b3c:	4806      	ldr	r0, [pc, #24]	; (8005b58 <imuPort_writeGyroFullScaleRange+0x12c>)
 8005b3e:	f7fc fa43 	bl	8001fc8 <HAL_I2C_Mem_Write>
				1, IMU_I2C_TIMEOUT_MS);
		break;
 8005b42:	bf00      	nop
	}
}
 8005b44:	bf00      	nop
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	20000090 	.word	0x20000090
 8005b50:	43030000 	.word	0x43030000
 8005b54:	20000015 	.word	0x20000015
 8005b58:	20000094 	.word	0x20000094
 8005b5c:	42830000 	.word	0x42830000
 8005b60:	42033333 	.word	0x42033333
 8005b64:	41833333 	.word	0x41833333

08005b68 <I2C1_Init>:

static void I2C1_Init(void)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	af00      	add	r7, sp, #0

	hi2c1.Instance = I2C1;
 8005b6c:	4b1b      	ldr	r3, [pc, #108]	; (8005bdc <I2C1_Init+0x74>)
 8005b6e:	4a1c      	ldr	r2, [pc, #112]	; (8005be0 <I2C1_Init+0x78>)
 8005b70:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8005b72:	4b1a      	ldr	r3, [pc, #104]	; (8005bdc <I2C1_Init+0x74>)
 8005b74:	4a1b      	ldr	r2, [pc, #108]	; (8005be4 <I2C1_Init+0x7c>)
 8005b76:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005b78:	4b18      	ldr	r3, [pc, #96]	; (8005bdc <I2C1_Init+0x74>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8005b7e:	4b17      	ldr	r3, [pc, #92]	; (8005bdc <I2C1_Init+0x74>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005b84:	4b15      	ldr	r3, [pc, #84]	; (8005bdc <I2C1_Init+0x74>)
 8005b86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005b8a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005b8c:	4b13      	ldr	r3, [pc, #76]	; (8005bdc <I2C1_Init+0x74>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8005b92:	4b12      	ldr	r3, [pc, #72]	; (8005bdc <I2C1_Init+0x74>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005b98:	4b10      	ldr	r3, [pc, #64]	; (8005bdc <I2C1_Init+0x74>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005b9e:	4b0f      	ldr	r3, [pc, #60]	; (8005bdc <I2C1_Init+0x74>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005ba4:	480d      	ldr	r0, [pc, #52]	; (8005bdc <I2C1_Init+0x74>)
 8005ba6:	f7fc f8cb 	bl	8001d40 <HAL_I2C_Init>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <I2C1_Init+0x4c>
	{
		Error_Handler();
 8005bb0:	f000 f81a 	bl	8005be8 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	4809      	ldr	r0, [pc, #36]	; (8005bdc <I2C1_Init+0x74>)
 8005bb8:	f7fd f8e6 	bl	8002d88 <HAL_I2CEx_ConfigAnalogFilter>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <I2C1_Init+0x5e>
	{
		Error_Handler();
 8005bc2:	f000 f811 	bl	8005be8 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	4804      	ldr	r0, [pc, #16]	; (8005bdc <I2C1_Init+0x74>)
 8005bca:	f7fd f919 	bl	8002e00 <HAL_I2CEx_ConfigDigitalFilter>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d001      	beq.n	8005bd8 <I2C1_Init+0x70>
	{
		Error_Handler();
 8005bd4:	f000 f808 	bl	8005be8 <Error_Handler>
	}
}
 8005bd8:	bf00      	nop
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	20000094 	.word	0x20000094
 8005be0:	40005400 	.word	0x40005400
 8005be4:	00061a80 	.word	0x00061a80

08005be8 <Error_Handler>:

static void Error_Handler(void)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	af00      	add	r7, sp, #0
	/* Turn LED_IMU on */
	BSP_LED_On(LED_IMU);
 8005bec:	2001      	movs	r0, #1
 8005bee:	f7fb f93f 	bl	8000e70 <BSP_LED_On>
	while (1)
 8005bf2:	e7fe      	b.n	8005bf2 <Error_Handler+0xa>

08005bf4 <uartInit>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

bool_t uartInit()
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	af00      	add	r7, sp, #0
	 BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
	 - Stop Bit    = One Stop bit
	 - Parity      = NONE parity
	 - BaudRate    = 9600 baud
	 - Hardware flow control disabled (RTS and CTS signals) */
	UartHandle.Instance = USARTx;
 8005bf8:	4b12      	ldr	r3, [pc, #72]	; (8005c44 <uartInit+0x50>)
 8005bfa:	4a13      	ldr	r2, [pc, #76]	; (8005c48 <uartInit+0x54>)
 8005bfc:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate = 9600;
 8005bfe:	4b11      	ldr	r3, [pc, #68]	; (8005c44 <uartInit+0x50>)
 8005c00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005c04:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8005c06:	4b0f      	ldr	r3, [pc, #60]	; (8005c44 <uartInit+0x50>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits = UART_STOPBITS_1;
 8005c0c:	4b0d      	ldr	r3, [pc, #52]	; (8005c44 <uartInit+0x50>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity = UART_PARITY_NONE;
 8005c12:	4b0c      	ldr	r3, [pc, #48]	; (8005c44 <uartInit+0x50>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c18:	4b0a      	ldr	r3, [pc, #40]	; (8005c44 <uartInit+0x50>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode = UART_MODE_TX_RX;
 8005c1e:	4b09      	ldr	r3, [pc, #36]	; (8005c44 <uartInit+0x50>)
 8005c20:	220c      	movs	r2, #12
 8005c22:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c24:	4b07      	ldr	r3, [pc, #28]	; (8005c44 <uartInit+0x50>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8005c2a:	4806      	ldr	r0, [pc, #24]	; (8005c44 <uartInit+0x50>)
 8005c2c:	f7fe ff5a 	bl	8004ae4 <HAL_UART_Init>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <uartInit+0x4a>
	{
		uartErrorHandler();
 8005c36:	f000 f823 	bl	8005c80 <uartErrorHandler>
		return false;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	e000      	b.n	8005c40 <uartInit+0x4c>
	}
	else
	{
		//uartPrintConfig();
		return true;
 8005c3e:	2301      	movs	r3, #1
	}
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	200000e8 	.word	0x200000e8
 8005c48:	40004800 	.word	0x40004800

08005c4c <uartSendString>:

void uartSendString(uint8_t *pstring)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Transmit(&UartHandle, pstring, strlen((const char*) pstring),
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f7fa fac9 	bl	80001ec <strlen>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c62:	6879      	ldr	r1, [r7, #4]
 8005c64:	4805      	ldr	r0, [pc, #20]	; (8005c7c <uartSendString+0x30>)
 8005c66:	f7fe ff8d 	bl	8004b84 <HAL_UART_Transmit>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d001      	beq.n	8005c74 <uartSendString+0x28>
			UART_TX_TIMEOUT) != HAL_OK)
	{
		uartErrorHandler();
 8005c70:	f000 f806 	bl	8005c80 <uartErrorHandler>
	}
}
 8005c74:	bf00      	nop
 8005c76:	3708      	adds	r7, #8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	200000e8 	.word	0x200000e8

08005c80 <uartErrorHandler>:
//	uartSendString((uint8_t*) motd);
//	uartSendString((uint8_t*) config);
//}

static void uartErrorHandler()
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8005c84:	2001      	movs	r0, #1
 8005c86:	f7fb f8f3 	bl	8000e70 <BSP_LED_On>
	while (1)
 8005c8a:	e7fe      	b.n	8005c8a <uartErrorHandler+0xa>

08005c8c <log_Init>:
 * This function is used to mark the beginning of a new logging session.
 */
static void log_StartMsg();

bool_t log_Init()
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	af00      	add	r7, sp, #0
	if (DEVICE_LOG_ENABLE)
	{
		if (uartInit())
 8005c90:	f7ff ffb0 	bl	8005bf4 <uartInit>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <log_Init+0x16>
		{
			log_StartMsg();
 8005c9a:	f000 f845 	bl	8005d28 <log_StartMsg>
			return true;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e000      	b.n	8005ca4 <log_Init+0x18>
		}
		else
		{
			return false;
 8005ca2:	2300      	movs	r3, #0
	}
	else // log disabled, returns true to avoid error
	{
		return true;
	}
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <log_SendString>:

bool_t log_SendString(logType_t logType, char *pstring)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	4603      	mov	r3, r0
 8005cb0:	6039      	str	r1, [r7, #0]
 8005cb2:	71fb      	strb	r3, [r7, #7]
	if (DEVICE_LOG_ENABLE)
	{
		// check string validity
		if (pstring == NULL)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d104      	bne.n	8005cc4 <log_SendString+0x1c>
		{
			uartSendString((uint8_t*) "<System Error: NULL String >\n\r");
 8005cba:	4815      	ldr	r0, [pc, #84]	; (8005d10 <log_SendString+0x68>)
 8005cbc:	f7ff ffc6 	bl	8005c4c <uartSendString>
			return false;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	e021      	b.n	8005d08 <log_SendString+0x60>
		}

		// log preamble
		switch (logType)
 8005cc4:	79fb      	ldrb	r3, [r7, #7]
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d00e      	beq.n	8005ce8 <log_SendString+0x40>
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	dc10      	bgt.n	8005cf0 <log_SendString+0x48>
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d002      	beq.n	8005cd8 <log_SendString+0x30>
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d004      	beq.n	8005ce0 <log_SendString+0x38>
 8005cd6:	e00b      	b.n	8005cf0 <log_SendString+0x48>
		{
		case LOG_APP_INFO:
			uartSendString((uint8_t*) "<APP Info: ");
 8005cd8:	480e      	ldr	r0, [pc, #56]	; (8005d14 <log_SendString+0x6c>)
 8005cda:	f7ff ffb7 	bl	8005c4c <uartSendString>
			break;
 8005cde:	e00c      	b.n	8005cfa <log_SendString+0x52>

		case LOG_APP_ERROR:
			uartSendString((uint8_t*) "<APP Error: ");
 8005ce0:	480d      	ldr	r0, [pc, #52]	; (8005d18 <log_SendString+0x70>)
 8005ce2:	f7ff ffb3 	bl	8005c4c <uartSendString>
			break;
 8005ce6:	e008      	b.n	8005cfa <log_SendString+0x52>

		case LOG_SYSTEM_ERROR:
			uartSendString((uint8_t*) "<System Error: ");
 8005ce8:	480c      	ldr	r0, [pc, #48]	; (8005d1c <log_SendString+0x74>)
 8005cea:	f7ff ffaf 	bl	8005c4c <uartSendString>
			break;
 8005cee:	e004      	b.n	8005cfa <log_SendString+0x52>

		default:
			uartSendString((uint8_t*) "<System Error: Log Type Unknown");
 8005cf0:	480b      	ldr	r0, [pc, #44]	; (8005d20 <log_SendString+0x78>)
 8005cf2:	f7ff ffab 	bl	8005c4c <uartSendString>
			return false;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	e006      	b.n	8005d08 <log_SendString+0x60>
			//break;
		}

		// string
		uartSendString((uint8_t*) pstring);
 8005cfa:	6838      	ldr	r0, [r7, #0]
 8005cfc:	f7ff ffa6 	bl	8005c4c <uartSendString>

		// log postamble
		uartSendString((uint8_t*) ">\n\r");
 8005d00:	4808      	ldr	r0, [pc, #32]	; (8005d24 <log_SendString+0x7c>)
 8005d02:	f7ff ffa3 	bl	8005c4c <uartSendString>

		return true;
 8005d06:	2301      	movs	r3, #1
	}
	else // log disabled, returns true to avoid error
	{
		return true;
	}
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3708      	adds	r7, #8
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	080062f4 	.word	0x080062f4
 8005d14:	08006314 	.word	0x08006314
 8005d18:	08006320 	.word	0x08006320
 8005d1c:	08006330 	.word	0x08006330
 8005d20:	08006340 	.word	0x08006340
 8005d24:	08006360 	.word	0x08006360

08005d28 <log_StartMsg>:

static void log_StartMsg()
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	af00      	add	r7, sp, #0
	// log start
	uartSendString((uint8_t*) "<Log Start!>\n\r");
 8005d2c:	480b      	ldr	r0, [pc, #44]	; (8005d5c <log_StartMsg+0x34>)
 8005d2e:	f7ff ff8d 	bl	8005c4c <uartSendString>

	//device name
	uartSendString((uint8_t*) "<Device Name: ");
 8005d32:	480b      	ldr	r0, [pc, #44]	; (8005d60 <log_StartMsg+0x38>)
 8005d34:	f7ff ff8a 	bl	8005c4c <uartSendString>
	uartSendString((uint8_t*) DEVICE_NAME);
 8005d38:	480a      	ldr	r0, [pc, #40]	; (8005d64 <log_StartMsg+0x3c>)
 8005d3a:	f7ff ff87 	bl	8005c4c <uartSendString>
	uartSendString((uint8_t*) ">\n\r");
 8005d3e:	480a      	ldr	r0, [pc, #40]	; (8005d68 <log_StartMsg+0x40>)
 8005d40:	f7ff ff84 	bl	8005c4c <uartSendString>

	// device version
	uartSendString((uint8_t*) "<Device Version: ");
 8005d44:	4809      	ldr	r0, [pc, #36]	; (8005d6c <log_StartMsg+0x44>)
 8005d46:	f7ff ff81 	bl	8005c4c <uartSendString>
	uartSendString((uint8_t*) DEVICE_FIRMWARE_VERSION);
 8005d4a:	4809      	ldr	r0, [pc, #36]	; (8005d70 <log_StartMsg+0x48>)
 8005d4c:	f7ff ff7e 	bl	8005c4c <uartSendString>
	uartSendString((uint8_t*) ">\n\r");
 8005d50:	4805      	ldr	r0, [pc, #20]	; (8005d68 <log_StartMsg+0x40>)
 8005d52:	f7ff ff7b 	bl	8005c4c <uartSendString>

}
 8005d56:	bf00      	nop
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	08006364 	.word	0x08006364
 8005d60:	08006374 	.word	0x08006374
 8005d64:	08006384 	.word	0x08006384
 8005d68:	08006360 	.word	0x08006360
 8005d6c:	08006390 	.word	0x08006390
 8005d70:	080063a4 	.word	0x080063a4

08005d74 <npx_Init>:
 * @brief LED brightness
 */
#define NPX_LED_BRIGHTNESS 50

void npx_Init()
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	af00      	add	r7, sp, #0
	npxPort_Init();
 8005d78:	f000 f817 	bl	8005daa <npxPort_Init>
}
 8005d7c:	bf00      	nop
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <npx_SetIdle>:
{
	npxPort_ClearLEDs();
}

void npx_SetIdle()
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	af00      	add	r7, sp, #0
	npxPort_SetGreen(NPX_LED_BRIGHTNESS);
 8005d84:	2032      	movs	r0, #50	; 0x32
 8005d86:	f000 f857 	bl	8005e38 <npxPort_SetGreen>
}
 8005d8a:	bf00      	nop
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <npx_SetPositive>:

void npx_SetPositive()
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	af00      	add	r7, sp, #0
	npxPort_SetRed(NPX_LED_BRIGHTNESS);
 8005d92:	2032      	movs	r0, #50	; 0x32
 8005d94:	f000 f82e 	bl	8005df4 <npxPort_SetRed>
}
 8005d98:	bf00      	nop
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <npx_SetNegative>:

void npx_SetNegative()
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
	npxPort_SetBlue(NPX_LED_BRIGHTNESS);
 8005da0:	2032      	movs	r0, #50	; 0x32
 8005da2:	f000 f86b 	bl	8005e7c <npxPort_SetBlue>
}
 8005da6:	bf00      	nop
 8005da8:	bd80      	pop	{r7, pc}

08005daa <npxPort_Init>:
/**
 * NeoPixels Port Functions
 */

void npxPort_Init()
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	af00      	add	r7, sp, #0
	DMA_Init();
 8005dae:	f000 f9e1 	bl	8006174 <DMA_Init>
	TIM1_Init();
 8005db2:	f000 f8c5 	bl	8005f40 <TIM1_Init>

	npxPort_initialSequence();
 8005db6:	f000 f963 	bl	8006080 <npxPort_initialSequence>
}
 8005dba:	bf00      	nop
 8005dbc:	bd80      	pop	{r7, pc}
	...

08005dc0 <npxPort_ClearLEDs>:

void npxPort_ClearLEDs()
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NEOPIXEL_LED_QTY; i++)
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	607b      	str	r3, [r7, #4]
 8005dca:	e007      	b.n	8005ddc <npxPort_ClearLEDs+0x1c>
	{
		pixels[i].value = 0;
 8005dcc:	4a08      	ldr	r2, [pc, #32]	; (8005df0 <npxPort_ClearLEDs+0x30>)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NEOPIXEL_LED_QTY; i++)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	607b      	str	r3, [r7, #4]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b13      	cmp	r3, #19
 8005de0:	ddf4      	ble.n	8005dcc <npxPort_ClearLEDs+0xc>
	}
	npxPort_SetLEDs();
 8005de2:	f000 f86b 	bl	8005ebc <npxPort_SetLEDs>
}
 8005de6:	bf00      	nop
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	200001d8 	.word	0x200001d8

08005df4 <npxPort_SetRed>:

void npxPort_SetRed(uint8_t bright)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < NEOPIXEL_LED_QTY; i++)
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]
 8005e02:	e00d      	b.n	8005e20 <npxPort_SetRed+0x2c>
	{
		pixels[i].value = 0;
 8005e04:	4a0b      	ldr	r2, [pc, #44]	; (8005e34 <npxPort_SetRed+0x40>)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2100      	movs	r1, #0
 8005e0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		pixels[i].colour.red = bright;
 8005e0e:	4a09      	ldr	r2, [pc, #36]	; (8005e34 <npxPort_SetRed+0x40>)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4413      	add	r3, r2
 8005e16:	79fa      	ldrb	r2, [r7, #7]
 8005e18:	705a      	strb	r2, [r3, #1]
	for (int i = 0; i < NEOPIXEL_LED_QTY; i++)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2b13      	cmp	r3, #19
 8005e24:	ddee      	ble.n	8005e04 <npxPort_SetRed+0x10>
	}
	npxPort_SetLEDs();
 8005e26:	f000 f849 	bl	8005ebc <npxPort_SetLEDs>
}
 8005e2a:	bf00      	nop
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	200001d8 	.word	0x200001d8

08005e38 <npxPort_SetGreen>:

void npxPort_SetGreen(uint8_t bright)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	4603      	mov	r3, r0
 8005e40:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < NEOPIXEL_LED_QTY; i++)
 8005e42:	2300      	movs	r3, #0
 8005e44:	60fb      	str	r3, [r7, #12]
 8005e46:	e00d      	b.n	8005e64 <npxPort_SetGreen+0x2c>
	{
		pixels[i].value = 0;
 8005e48:	4a0b      	ldr	r2, [pc, #44]	; (8005e78 <npxPort_SetGreen+0x40>)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		pixels[i].colour.green = bright;
 8005e52:	4a09      	ldr	r2, [pc, #36]	; (8005e78 <npxPort_SetGreen+0x40>)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	79fa      	ldrb	r2, [r7, #7]
 8005e5c:	709a      	strb	r2, [r3, #2]
	for (int i = 0; i < NEOPIXEL_LED_QTY; i++)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	3301      	adds	r3, #1
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2b13      	cmp	r3, #19
 8005e68:	ddee      	ble.n	8005e48 <npxPort_SetGreen+0x10>
	}
	npxPort_SetLEDs();
 8005e6a:	f000 f827 	bl	8005ebc <npxPort_SetLEDs>
}
 8005e6e:	bf00      	nop
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	200001d8 	.word	0x200001d8

08005e7c <npxPort_SetBlue>:

void npxPort_SetBlue(uint8_t bright)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	4603      	mov	r3, r0
 8005e84:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < NEOPIXEL_LED_QTY; i++)
 8005e86:	2300      	movs	r3, #0
 8005e88:	60fb      	str	r3, [r7, #12]
 8005e8a:	e00c      	b.n	8005ea6 <npxPort_SetBlue+0x2a>
	{
		pixels[i].value = 0;
 8005e8c:	4a0a      	ldr	r2, [pc, #40]	; (8005eb8 <npxPort_SetBlue+0x3c>)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2100      	movs	r1, #0
 8005e92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		pixels[i].colour.blue = bright;
 8005e96:	4908      	ldr	r1, [pc, #32]	; (8005eb8 <npxPort_SetBlue+0x3c>)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	79fa      	ldrb	r2, [r7, #7]
 8005e9c:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < NEOPIXEL_LED_QTY; i++)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	60fb      	str	r3, [r7, #12]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2b13      	cmp	r3, #19
 8005eaa:	ddef      	ble.n	8005e8c <npxPort_SetBlue+0x10>
	}
	npxPort_SetLEDs();
 8005eac:	f000 f806 	bl	8005ebc <npxPort_SetLEDs>
}
 8005eb0:	bf00      	nop
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	200001d8 	.word	0x200001d8

08005ebc <npxPort_SetLEDs>:

void npxPort_SetLEDs(void)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
	uint32_t iPWM = 0;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60fb      	str	r3, [r7, #12]

	// Pixel to bit conversion for serial transmission
	for (int iPix = 0; iPix < NEOPIXEL_LED_QTY; iPix++)
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60bb      	str	r3, [r7, #8]
 8005eca:	e024      	b.n	8005f16 <npxPort_SetLEDs+0x5a>
	{
		for (int iBit = NEOPIXELS_LED_BIT_QTY - 1; iBit >= 0; iBit--)
 8005ecc:	2317      	movs	r3, #23
 8005ece:	607b      	str	r3, [r7, #4]
 8005ed0:	e01b      	b.n	8005f0a <npxPort_SetLEDs+0x4e>
		{
			if (pixels[iPix].value & (1 << iBit))
 8005ed2:	4a18      	ldr	r2, [pc, #96]	; (8005f34 <npxPort_SetLEDs+0x78>)
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eda:	2101      	movs	r1, #1
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	fa01 f202 	lsl.w	r2, r1, r2
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d005      	beq.n	8005ef4 <npxPort_SetLEDs+0x38>
			{
				// Logic 1: Set the equivalent to a 68% of PWMs duty cycle
				dmaData[iPWM] = NEOPIXELS_BIT_SET_TIM_COUNTER;
 8005ee8:	4a13      	ldr	r2, [pc, #76]	; (8005f38 <npxPort_SetLEDs+0x7c>)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	213d      	movs	r1, #61	; 0x3d
 8005eee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8005ef2:	e004      	b.n	8005efe <npxPort_SetLEDs+0x42>
			}
			else
			{
				// Logic 0: Set the equivalent to a 32% of PWMs duty cycle
				dmaData[iPWM] = NEOPIXELS_BIT_RESET_TIM_COUNTER;
 8005ef4:	4a10      	ldr	r2, [pc, #64]	; (8005f38 <npxPort_SetLEDs+0x7c>)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	211d      	movs	r1, #29
 8005efa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			iPWM++;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	3301      	adds	r3, #1
 8005f02:	60fb      	str	r3, [r7, #12]
		for (int iBit = NEOPIXELS_LED_BIT_QTY - 1; iBit >= 0; iBit--)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	3b01      	subs	r3, #1
 8005f08:	607b      	str	r3, [r7, #4]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	dae0      	bge.n	8005ed2 <npxPort_SetLEDs+0x16>
	for (int iPix = 0; iPix < NEOPIXEL_LED_QTY; iPix++)
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	3301      	adds	r3, #1
 8005f14:	60bb      	str	r3, [r7, #8]
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	2b13      	cmp	r3, #19
 8005f1a:	ddd7      	ble.n	8005ecc <npxPort_SetLEDs+0x10>
		}
	}

	// Send PWM signal via DMA controller
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*) dmaData, iPWM);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	4a05      	ldr	r2, [pc, #20]	; (8005f38 <npxPort_SetLEDs+0x7c>)
 8005f22:	2100      	movs	r1, #0
 8005f24:	4805      	ldr	r0, [pc, #20]	; (8005f3c <npxPort_SetLEDs+0x80>)
 8005f26:	f7fd fceb 	bl	8003900 <HAL_TIM_PWM_Start_DMA>
}
 8005f2a:	bf00      	nop
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	200001d8 	.word	0x200001d8
 8005f38:	20000228 	.word	0x20000228
 8005f3c:	20000130 	.word	0x20000130

08005f40 <TIM1_Init>:

static void TIM1_Init(void)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b096      	sub	sp, #88	; 0x58
 8005f44:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig =
 8005f46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	601a      	str	r2, [r3, #0]
 8005f4e:	605a      	str	r2, [r3, #4]
 8005f50:	609a      	str	r2, [r3, #8]
 8005f52:	60da      	str	r2, [r3, #12]
	{ 0 };
	TIM_MasterConfigTypeDef sMasterConfig =
 8005f54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005f58:	2200      	movs	r2, #0
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	605a      	str	r2, [r3, #4]
	{ 0 };
	TIM_OC_InitTypeDef sConfigOC =
 8005f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f62:	2200      	movs	r2, #0
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	605a      	str	r2, [r3, #4]
 8005f68:	609a      	str	r2, [r3, #8]
 8005f6a:	60da      	str	r2, [r3, #12]
 8005f6c:	611a      	str	r2, [r3, #16]
 8005f6e:	615a      	str	r2, [r3, #20]
 8005f70:	619a      	str	r2, [r3, #24]
	{ 0 };
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig =
 8005f72:	1d3b      	adds	r3, r7, #4
 8005f74:	2220      	movs	r2, #32
 8005f76:	2100      	movs	r1, #0
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f000 f92f 	bl	80061dc <memset>
	{ 0 };

	htim1.Instance = TIM1;
 8005f7e:	4b3e      	ldr	r3, [pc, #248]	; (8006078 <TIM1_Init+0x138>)
 8005f80:	4a3e      	ldr	r2, [pc, #248]	; (800607c <TIM1_Init+0x13c>)
 8005f82:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8005f84:	4b3c      	ldr	r3, [pc, #240]	; (8006078 <TIM1_Init+0x138>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f8a:	4b3b      	ldr	r3, [pc, #236]	; (8006078 <TIM1_Init+0x138>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 90 - 1;
 8005f90:	4b39      	ldr	r3, [pc, #228]	; (8006078 <TIM1_Init+0x138>)
 8005f92:	2259      	movs	r2, #89	; 0x59
 8005f94:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f96:	4b38      	ldr	r3, [pc, #224]	; (8006078 <TIM1_Init+0x138>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8005f9c:	4b36      	ldr	r3, [pc, #216]	; (8006078 <TIM1_Init+0x138>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005fa2:	4b35      	ldr	r3, [pc, #212]	; (8006078 <TIM1_Init+0x138>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005fa8:	4833      	ldr	r0, [pc, #204]	; (8006078 <TIM1_Init+0x138>)
 8005faa:	f7fd fc01 	bl	80037b0 <HAL_TIM_Base_Init>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <TIM1_Init+0x78>
	{
		Error_Handler();
 8005fb4:	f000 f90c 	bl	80061d0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fbc:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005fbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	482c      	ldr	r0, [pc, #176]	; (8006078 <TIM1_Init+0x138>)
 8005fc6:	f7fd fff7 	bl	8003fb8 <HAL_TIM_ConfigClockSource>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d001      	beq.n	8005fd4 <TIM1_Init+0x94>
	{
		Error_Handler();
 8005fd0:	f000 f8fe 	bl	80061d0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005fd4:	4828      	ldr	r0, [pc, #160]	; (8006078 <TIM1_Init+0x138>)
 8005fd6:	f7fd fc3a 	bl	800384e <HAL_TIM_PWM_Init>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <TIM1_Init+0xa4>
	{
		Error_Handler();
 8005fe0:	f000 f8f6 	bl	80061d0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005fec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	4821      	ldr	r0, [pc, #132]	; (8006078 <TIM1_Init+0x138>)
 8005ff4:	f7fe fca8 	bl	8004948 <HAL_TIMEx_MasterConfigSynchronization>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <TIM1_Init+0xc2>
	{
		Error_Handler();
 8005ffe:	f000 f8e7 	bl	80061d0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006002:	2360      	movs	r3, #96	; 0x60
 8006004:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8006006:	2300      	movs	r3, #0
 8006008:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800600a:	2300      	movs	r3, #0
 800600c:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800600e:	2300      	movs	r3, #0
 8006010:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006012:	2300      	movs	r3, #0
 8006014:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006016:	2300      	movs	r3, #0
 8006018:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800601a:	2300      	movs	r3, #0
 800601c:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800601e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006022:	2200      	movs	r2, #0
 8006024:	4619      	mov	r1, r3
 8006026:	4814      	ldr	r0, [pc, #80]	; (8006078 <TIM1_Init+0x138>)
 8006028:	f7fd ff04 	bl	8003e34 <HAL_TIM_PWM_ConfigChannel>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d001      	beq.n	8006036 <TIM1_Init+0xf6>
	{
		Error_Handler();
 8006032:	f000 f8cd 	bl	80061d0 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006036:	2300      	movs	r3, #0
 8006038:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800603a:	2300      	movs	r3, #0
 800603c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800603e:	2300      	movs	r3, #0
 8006040:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8006042:	2300      	movs	r3, #0
 8006044:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006046:	2300      	movs	r3, #0
 8006048:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800604a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800604e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006050:	2300      	movs	r3, #0
 8006052:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006054:	1d3b      	adds	r3, r7, #4
 8006056:	4619      	mov	r1, r3
 8006058:	4807      	ldr	r0, [pc, #28]	; (8006078 <TIM1_Init+0x138>)
 800605a:	f7fe fcf1 	bl	8004a40 <HAL_TIMEx_ConfigBreakDeadTime>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d001      	beq.n	8006068 <TIM1_Init+0x128>
	{
		Error_Handler();
 8006064:	f000 f8b4 	bl	80061d0 <Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim1);
 8006068:	4803      	ldr	r0, [pc, #12]	; (8006078 <TIM1_Init+0x138>)
 800606a:	f7fa fdbf 	bl	8000bec <HAL_TIM_MspPostInit>
}
 800606e:	bf00      	nop
 8006070:	3758      	adds	r7, #88	; 0x58
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	20000130 	.word	0x20000130
 800607c:	40010000 	.word	0x40010000

08006080 <npxPort_initialSequence>:

void npxPort_initialSequence()
{
 8006080:	b580      	push	{r7, lr}
 8006082:	af00      	add	r7, sp, #0
	if (DEVICE_NEOPIXEL_INITIAL_SEQUENCE)
	{
		npxPort_ClearLEDs();
 8006084:	f7ff fe9c 	bl	8005dc0 <npxPort_ClearLEDs>
		HAL_Delay(100);
 8006088:	2064      	movs	r0, #100	; 0x64
 800608a:	f7fa ffb1 	bl	8000ff0 <HAL_Delay>

		npxPort_SetRed(0);
 800608e:	2000      	movs	r0, #0
 8006090:	f7ff feb0 	bl	8005df4 <npxPort_SetRed>
		HAL_Delay(100);
 8006094:	2064      	movs	r0, #100	; 0x64
 8006096:	f7fa ffab 	bl	8000ff0 <HAL_Delay>
		npxPort_SetRed(50);
 800609a:	2032      	movs	r0, #50	; 0x32
 800609c:	f7ff feaa 	bl	8005df4 <npxPort_SetRed>
		HAL_Delay(100);
 80060a0:	2064      	movs	r0, #100	; 0x64
 80060a2:	f7fa ffa5 	bl	8000ff0 <HAL_Delay>
		npxPort_SetRed(100);
 80060a6:	2064      	movs	r0, #100	; 0x64
 80060a8:	f7ff fea4 	bl	8005df4 <npxPort_SetRed>
		HAL_Delay(100);
 80060ac:	2064      	movs	r0, #100	; 0x64
 80060ae:	f7fa ff9f 	bl	8000ff0 <HAL_Delay>
		npxPort_SetRed(150);
 80060b2:	2096      	movs	r0, #150	; 0x96
 80060b4:	f7ff fe9e 	bl	8005df4 <npxPort_SetRed>
		HAL_Delay(100);
 80060b8:	2064      	movs	r0, #100	; 0x64
 80060ba:	f7fa ff99 	bl	8000ff0 <HAL_Delay>
		npxPort_SetRed(200);
 80060be:	20c8      	movs	r0, #200	; 0xc8
 80060c0:	f7ff fe98 	bl	8005df4 <npxPort_SetRed>
		HAL_Delay(100);
 80060c4:	2064      	movs	r0, #100	; 0x64
 80060c6:	f7fa ff93 	bl	8000ff0 <HAL_Delay>
		npxPort_SetRed(250);
 80060ca:	20fa      	movs	r0, #250	; 0xfa
 80060cc:	f7ff fe92 	bl	8005df4 <npxPort_SetRed>
		HAL_Delay(100);
 80060d0:	2064      	movs	r0, #100	; 0x64
 80060d2:	f7fa ff8d 	bl	8000ff0 <HAL_Delay>

		npxPort_SetGreen(0);
 80060d6:	2000      	movs	r0, #0
 80060d8:	f7ff feae 	bl	8005e38 <npxPort_SetGreen>
		HAL_Delay(100);
 80060dc:	2064      	movs	r0, #100	; 0x64
 80060de:	f7fa ff87 	bl	8000ff0 <HAL_Delay>
		npxPort_SetGreen(50);
 80060e2:	2032      	movs	r0, #50	; 0x32
 80060e4:	f7ff fea8 	bl	8005e38 <npxPort_SetGreen>
		HAL_Delay(100);
 80060e8:	2064      	movs	r0, #100	; 0x64
 80060ea:	f7fa ff81 	bl	8000ff0 <HAL_Delay>
		npxPort_SetGreen(100);
 80060ee:	2064      	movs	r0, #100	; 0x64
 80060f0:	f7ff fea2 	bl	8005e38 <npxPort_SetGreen>
		HAL_Delay(100);
 80060f4:	2064      	movs	r0, #100	; 0x64
 80060f6:	f7fa ff7b 	bl	8000ff0 <HAL_Delay>
		npxPort_SetGreen(150);
 80060fa:	2096      	movs	r0, #150	; 0x96
 80060fc:	f7ff fe9c 	bl	8005e38 <npxPort_SetGreen>
		HAL_Delay(100);
 8006100:	2064      	movs	r0, #100	; 0x64
 8006102:	f7fa ff75 	bl	8000ff0 <HAL_Delay>
		npxPort_SetGreen(200);
 8006106:	20c8      	movs	r0, #200	; 0xc8
 8006108:	f7ff fe96 	bl	8005e38 <npxPort_SetGreen>
		HAL_Delay(100);
 800610c:	2064      	movs	r0, #100	; 0x64
 800610e:	f7fa ff6f 	bl	8000ff0 <HAL_Delay>
		npxPort_SetGreen(250);
 8006112:	20fa      	movs	r0, #250	; 0xfa
 8006114:	f7ff fe90 	bl	8005e38 <npxPort_SetGreen>
		HAL_Delay(100);
 8006118:	2064      	movs	r0, #100	; 0x64
 800611a:	f7fa ff69 	bl	8000ff0 <HAL_Delay>

		npxPort_SetBlue(0);
 800611e:	2000      	movs	r0, #0
 8006120:	f7ff feac 	bl	8005e7c <npxPort_SetBlue>
		HAL_Delay(100);
 8006124:	2064      	movs	r0, #100	; 0x64
 8006126:	f7fa ff63 	bl	8000ff0 <HAL_Delay>
		npxPort_SetBlue(50);
 800612a:	2032      	movs	r0, #50	; 0x32
 800612c:	f7ff fea6 	bl	8005e7c <npxPort_SetBlue>
		HAL_Delay(100);
 8006130:	2064      	movs	r0, #100	; 0x64
 8006132:	f7fa ff5d 	bl	8000ff0 <HAL_Delay>
		npxPort_SetBlue(100);
 8006136:	2064      	movs	r0, #100	; 0x64
 8006138:	f7ff fea0 	bl	8005e7c <npxPort_SetBlue>
		HAL_Delay(100);
 800613c:	2064      	movs	r0, #100	; 0x64
 800613e:	f7fa ff57 	bl	8000ff0 <HAL_Delay>
		npxPort_SetBlue(150);
 8006142:	2096      	movs	r0, #150	; 0x96
 8006144:	f7ff fe9a 	bl	8005e7c <npxPort_SetBlue>
		HAL_Delay(100);
 8006148:	2064      	movs	r0, #100	; 0x64
 800614a:	f7fa ff51 	bl	8000ff0 <HAL_Delay>
		npxPort_SetBlue(200);
 800614e:	20c8      	movs	r0, #200	; 0xc8
 8006150:	f7ff fe94 	bl	8005e7c <npxPort_SetBlue>
		HAL_Delay(100);
 8006154:	2064      	movs	r0, #100	; 0x64
 8006156:	f7fa ff4b 	bl	8000ff0 <HAL_Delay>
		npxPort_SetBlue(250);
 800615a:	20fa      	movs	r0, #250	; 0xfa
 800615c:	f7ff fe8e 	bl	8005e7c <npxPort_SetBlue>
		HAL_Delay(100);
 8006160:	2064      	movs	r0, #100	; 0x64
 8006162:	f7fa ff45 	bl	8000ff0 <HAL_Delay>

		npxPort_ClearLEDs();
 8006166:	f7ff fe2b 	bl	8005dc0 <npxPort_ClearLEDs>
		HAL_Delay(100);
 800616a:	2064      	movs	r0, #100	; 0x64
 800616c:	f7fa ff40 	bl	8000ff0 <HAL_Delay>
	}
}
 8006170:	bf00      	nop
 8006172:	bd80      	pop	{r7, pc}

08006174 <DMA_Init>:

static void DMA_Init(void)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800617a:	2300      	movs	r3, #0
 800617c:	607b      	str	r3, [r7, #4]
 800617e:	4b0c      	ldr	r3, [pc, #48]	; (80061b0 <DMA_Init+0x3c>)
 8006180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006182:	4a0b      	ldr	r2, [pc, #44]	; (80061b0 <DMA_Init+0x3c>)
 8006184:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006188:	6313      	str	r3, [r2, #48]	; 0x30
 800618a:	4b09      	ldr	r3, [pc, #36]	; (80061b0 <DMA_Init+0x3c>)
 800618c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006192:	607b      	str	r3, [r7, #4]
 8006194:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8006196:	2200      	movs	r2, #0
 8006198:	2100      	movs	r1, #0
 800619a:	2039      	movs	r0, #57	; 0x39
 800619c:	f7fb f827 	bl	80011ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80061a0:	2039      	movs	r0, #57	; 0x39
 80061a2:	f7fb f840 	bl	8001226 <HAL_NVIC_EnableIRQ>

}
 80061a6:	bf00      	nop
 80061a8:	3708      	adds	r7, #8
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	40023800 	.word	0x40023800

080061b4 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80061bc:	2100      	movs	r1, #0
 80061be:	4803      	ldr	r0, [pc, #12]	; (80061cc <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 80061c0:	f7fd fd66 	bl	8003c90 <HAL_TIM_PWM_Stop_DMA>
}
 80061c4:	bf00      	nop
 80061c6:	3708      	adds	r7, #8
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	20000130 	.word	0x20000130

080061d0 <Error_Handler>:

static void Error_Handler(void)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	af00      	add	r7, sp, #0
	/* Turn LED_NPX on */
	BSP_LED_On(LED_NPX);
 80061d4:	2002      	movs	r0, #2
 80061d6:	f7fa fe4b 	bl	8000e70 <BSP_LED_On>
	while (1)
 80061da:	e7fe      	b.n	80061da <Error_Handler+0xa>

080061dc <memset>:
 80061dc:	4402      	add	r2, r0
 80061de:	4603      	mov	r3, r0
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d100      	bne.n	80061e6 <memset+0xa>
 80061e4:	4770      	bx	lr
 80061e6:	f803 1b01 	strb.w	r1, [r3], #1
 80061ea:	e7f9      	b.n	80061e0 <memset+0x4>

080061ec <__libc_init_array>:
 80061ec:	b570      	push	{r4, r5, r6, lr}
 80061ee:	4d0d      	ldr	r5, [pc, #52]	; (8006224 <__libc_init_array+0x38>)
 80061f0:	4c0d      	ldr	r4, [pc, #52]	; (8006228 <__libc_init_array+0x3c>)
 80061f2:	1b64      	subs	r4, r4, r5
 80061f4:	10a4      	asrs	r4, r4, #2
 80061f6:	2600      	movs	r6, #0
 80061f8:	42a6      	cmp	r6, r4
 80061fa:	d109      	bne.n	8006210 <__libc_init_array+0x24>
 80061fc:	4d0b      	ldr	r5, [pc, #44]	; (800622c <__libc_init_array+0x40>)
 80061fe:	4c0c      	ldr	r4, [pc, #48]	; (8006230 <__libc_init_array+0x44>)
 8006200:	f000 f818 	bl	8006234 <_init>
 8006204:	1b64      	subs	r4, r4, r5
 8006206:	10a4      	asrs	r4, r4, #2
 8006208:	2600      	movs	r6, #0
 800620a:	42a6      	cmp	r6, r4
 800620c:	d105      	bne.n	800621a <__libc_init_array+0x2e>
 800620e:	bd70      	pop	{r4, r5, r6, pc}
 8006210:	f855 3b04 	ldr.w	r3, [r5], #4
 8006214:	4798      	blx	r3
 8006216:	3601      	adds	r6, #1
 8006218:	e7ee      	b.n	80061f8 <__libc_init_array+0xc>
 800621a:	f855 3b04 	ldr.w	r3, [r5], #4
 800621e:	4798      	blx	r3
 8006220:	3601      	adds	r6, #1
 8006222:	e7f2      	b.n	800620a <__libc_init_array+0x1e>
 8006224:	080063d8 	.word	0x080063d8
 8006228:	080063d8 	.word	0x080063d8
 800622c:	080063d8 	.word	0x080063d8
 8006230:	080063dc 	.word	0x080063dc

08006234 <_init>:
 8006234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006236:	bf00      	nop
 8006238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800623a:	bc08      	pop	{r3}
 800623c:	469e      	mov	lr, r3
 800623e:	4770      	bx	lr

08006240 <_fini>:
 8006240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006242:	bf00      	nop
 8006244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006246:	bc08      	pop	{r3}
 8006248:	469e      	mov	lr, r3
 800624a:	4770      	bx	lr
