
spinflow.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006098  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08006244  08006244  00016244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006454  08006454  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08006454  08006454  00016454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800645c  0800645c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800645c  0800645c  0001645c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006460  08006460  00016460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08006464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          000005d0  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005e8  200005e8  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 14 .debug_info   000127ac  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002e3a  00000000  00000000  00032837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011d8  00000000  00000000  00035678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000df2  00000000  00000000  00036850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026257  00000000  00000000  00037642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001876d  00000000  00000000  0005d899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000df917  00000000  00000000  00076006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000499c  00000000  00000000  00155920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0015a2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800622c 	.word	0x0800622c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	0800622c 	.word	0x0800622c

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
 * Application
 *
 */

int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	/* System initialization */
	HAL_Init();
 80004fc:	f000 fd08 	bl	8000f10 <HAL_Init>
	SystemClock_Config();
 8000500:	f000 f92a 	bl	8000758 <SystemClock_Config>
	GPIO_Init();
 8000504:	f000 f994 	bl	8000830 <GPIO_Init>

	/*BSP LEDs init*/
	led_init();
 8000508:	f000 fa92 	bl	8000a30 <led_init>

	/* Initialize App */
	app_Init();
 800050c:	f000 f804 	bl	8000518 <app_Init>


	/* Infinite loop */
	while (1)
	{
		app_Tasks();
 8000510:	f000 f81e 	bl	8000550 <app_Tasks>
 8000514:	e7fc      	b.n	8000510 <main+0x18>
	...

08000518 <app_Init>:
	}
}


static void app_Init()
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	// init peripherals
	npx_Init();
 800051c:	f005 fc26 	bl	8005d6c <npx_Init>
	imu_Init();
 8000520:	f004 ff4b 	bl	80053ba <imu_Init>
	log_Init();
 8000524:	f005 fbc4 	bl	8005cb0 <log_Init>

	// start app
	appState = APP_START;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <app_Init+0x2c>)
 800052a:	2200      	movs	r2, #0
 800052c:	701a      	strb	r2, [r3, #0]
	log_SendString(LOG_APP_INFO,"App start");
 800052e:	4906      	ldr	r1, [pc, #24]	; (8000548 <app_Init+0x30>)
 8000530:	2000      	movs	r0, #0
 8000532:	f005 fbcb 	bl	8005ccc <log_SendString>
	delayInit(&appTimer, APP_START_DELAY_MS);
 8000536:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800053a:	4804      	ldr	r0, [pc, #16]	; (800054c <app_Init+0x34>)
 800053c:	f004 fee0 	bl	8005300 <delayInit>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000040 	.word	0x20000040
 8000548:	08006244 	.word	0x08006244
 800054c:	20000034 	.word	0x20000034

08000550 <app_Tasks>:

static void app_Tasks()
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
    switch (appState)
 8000554:	4b63      	ldr	r3, [pc, #396]	; (80006e4 <app_Tasks+0x194>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b06      	cmp	r3, #6
 800055a:	f200 80b4 	bhi.w	80006c6 <app_Tasks+0x176>
 800055e:	a201      	add	r2, pc, #4	; (adr r2, 8000564 <app_Tasks+0x14>)
 8000560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000564:	08000581 	.word	0x08000581
 8000568:	080005bf 	.word	0x080005bf
 800056c:	080005d5 	.word	0x080005d5
 8000570:	08000623 	.word	0x08000623
 8000574:	08000683 	.word	0x08000683
 8000578:	08000699 	.word	0x08000699
 800057c:	080006af 	.word	0x080006af
    {
        case APP_START:
            if (imu_Check())
 8000580:	f004 ff29 	bl	80053d6 <imu_Check>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d00e      	beq.n	80005a8 <app_Tasks+0x58>
            {
            	log_SendString(LOG_APP_INFO,"IMU ok");
 800058a:	4957      	ldr	r1, [pc, #348]	; (80006e8 <app_Tasks+0x198>)
 800058c:	2000      	movs	r0, #0
 800058e:	f005 fb9d 	bl	8005ccc <log_SendString>
            	BSP_LED_Off(LED_IMU); // reset LED to indicate success
 8000592:	2001      	movs	r0, #1
 8000594:	f000 fc88 	bl	8000ea8 <BSP_LED_Off>

            	appState = APP_IDLE;
 8000598:	4b52      	ldr	r3, [pc, #328]	; (80006e4 <app_Tasks+0x194>)
 800059a:	2202      	movs	r2, #2
 800059c:	701a      	strb	r2, [r3, #0]
            	delayWrite(&appTimer, APP_IDLE_DELAY_MS);
 800059e:	21c8      	movs	r1, #200	; 0xc8
 80005a0:	4852      	ldr	r0, [pc, #328]	; (80006ec <app_Tasks+0x19c>)
 80005a2:	f004 fef8 	bl	8005396 <delayWrite>
            	log_SendString(LOG_APP_INFO,"IMU error");
            	BSP_LED_On(LED_IMU); // set LED to indicate error

            	appState = APP_START_DELAY;
            }
            break;
 80005a6:	e09a      	b.n	80006de <app_Tasks+0x18e>
            	log_SendString(LOG_APP_INFO,"IMU error");
 80005a8:	4951      	ldr	r1, [pc, #324]	; (80006f0 <app_Tasks+0x1a0>)
 80005aa:	2000      	movs	r0, #0
 80005ac:	f005 fb8e 	bl	8005ccc <log_SendString>
            	BSP_LED_On(LED_IMU); // set LED to indicate error
 80005b0:	2001      	movs	r0, #1
 80005b2:	f000 fc5f 	bl	8000e74 <BSP_LED_On>
            	appState = APP_START_DELAY;
 80005b6:	4b4b      	ldr	r3, [pc, #300]	; (80006e4 <app_Tasks+0x194>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	701a      	strb	r2, [r3, #0]
            break;
 80005bc:	e08f      	b.n	80006de <app_Tasks+0x18e>

        case APP_START_DELAY:
			if (delayRead(&appTimer))
 80005be:	484b      	ldr	r0, [pc, #300]	; (80006ec <app_Tasks+0x19c>)
 80005c0:	f004 feb6 	bl	8005330 <delayRead>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	f000 8084 	beq.w	80006d4 <app_Tasks+0x184>
			{
				appState = APP_START;
 80005cc:	4b45      	ldr	r3, [pc, #276]	; (80006e4 <app_Tasks+0x194>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
			}
            break;
 80005d2:	e07f      	b.n	80006d4 <app_Tasks+0x184>

        case APP_IDLE:
			if (delayRead(&appTimer))
 80005d4:	4845      	ldr	r0, [pc, #276]	; (80006ec <app_Tasks+0x19c>)
 80005d6:	f004 feab 	bl	8005330 <delayRead>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d07b      	beq.n	80006d8 <app_Tasks+0x188>
			{
				imu_GetData();
 80005e0:	f004 ff00 	bl	80053e4 <imu_GetData>
				switch(imu_State())
 80005e4:	f004 ff1e 	bl	8005424 <imu_State>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d002      	beq.n	80005f4 <app_Tasks+0xa4>
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d007      	beq.n	8000602 <app_Tasks+0xb2>
 80005f2:	e00e      	b.n	8000612 <app_Tasks+0xc2>
				{
					case IMU_IDLE:
						log_SendString(LOG_APP_INFO,"Idle");
 80005f4:	493f      	ldr	r1, [pc, #252]	; (80006f4 <app_Tasks+0x1a4>)
 80005f6:	2000      	movs	r0, #0
 80005f8:	f005 fb68 	bl	8005ccc <log_SendString>
						//appState = APP_IDLE;
						app_noSpinDetected();
 80005fc:	f000 f88a 	bl	8000714 <app_noSpinDetected>
						break;
 8000600:	e00e      	b.n	8000620 <app_Tasks+0xd0>

					case IMU_ACTIVE:
						log_SendString(LOG_APP_INFO,"Active");
 8000602:	493d      	ldr	r1, [pc, #244]	; (80006f8 <app_Tasks+0x1a8>)
 8000604:	2000      	movs	r0, #0
 8000606:	f005 fb61 	bl	8005ccc <log_SendString>
						appState = APP_ACTIVE;
 800060a:	4b36      	ldr	r3, [pc, #216]	; (80006e4 <app_Tasks+0x194>)
 800060c:	2203      	movs	r2, #3
 800060e:	701a      	strb	r2, [r3, #0]
						break;
 8000610:	e006      	b.n	8000620 <app_Tasks+0xd0>

					default:
						log_SendString(LOG_APP_ERROR,"IMU state error");
 8000612:	493a      	ldr	r1, [pc, #232]	; (80006fc <app_Tasks+0x1ac>)
 8000614:	2001      	movs	r0, #1
 8000616:	f005 fb59 	bl	8005ccc <log_SendString>
						Error_Handler();
 800061a:	f000 f896 	bl	800074a <Error_Handler>
						break;
 800061e:	bf00      	nop
				}
			}
            break;
 8000620:	e05a      	b.n	80006d8 <app_Tasks+0x188>

        case APP_ACTIVE:
        	switch(imu_SpinDirection())
 8000622:	f004 ff0b 	bl	800543c <imu_SpinDirection>
 8000626:	4603      	mov	r3, r0
 8000628:	2b02      	cmp	r3, #2
 800062a:	d01a      	beq.n	8000662 <app_Tasks+0x112>
 800062c:	2b02      	cmp	r3, #2
 800062e:	dc20      	bgt.n	8000672 <app_Tasks+0x122>
 8000630:	2b00      	cmp	r3, #0
 8000632:	d002      	beq.n	800063a <app_Tasks+0xea>
 8000634:	2b01      	cmp	r3, #1
 8000636:	d00c      	beq.n	8000652 <app_Tasks+0x102>
 8000638:	e01b      	b.n	8000672 <app_Tasks+0x122>
        	{
        		case IMU_NO_SPIN:
        			log_SendString(LOG_APP_INFO,"No spin detected");
 800063a:	4931      	ldr	r1, [pc, #196]	; (8000700 <app_Tasks+0x1b0>)
 800063c:	2000      	movs	r0, #0
 800063e:	f005 fb45 	bl	8005ccc <log_SendString>
					appState = APP_IDLE;
 8000642:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <app_Tasks+0x194>)
 8000644:	2202      	movs	r2, #2
 8000646:	701a      	strb	r2, [r3, #0]
					delayWrite(&appTimer, APP_IDLE_DELAY_MS);
 8000648:	21c8      	movs	r1, #200	; 0xc8
 800064a:	4828      	ldr	r0, [pc, #160]	; (80006ec <app_Tasks+0x19c>)
 800064c:	f004 fea3 	bl	8005396 <delayWrite>
					break;
 8000650:	e016      	b.n	8000680 <app_Tasks+0x130>

        		case IMU_POS_SPIN:
        			log_SendString(LOG_APP_INFO,"Positive spin detected");
 8000652:	492c      	ldr	r1, [pc, #176]	; (8000704 <app_Tasks+0x1b4>)
 8000654:	2000      	movs	r0, #0
 8000656:	f005 fb39 	bl	8005ccc <log_SendString>
					appState = APP_POS_SPIN;
 800065a:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <app_Tasks+0x194>)
 800065c:	2204      	movs	r2, #4
 800065e:	701a      	strb	r2, [r3, #0]
					break;
 8000660:	e00e      	b.n	8000680 <app_Tasks+0x130>

        		case IMU_NEG_SPIN:
        			log_SendString(LOG_APP_INFO,"Negative spin detected");
 8000662:	4929      	ldr	r1, [pc, #164]	; (8000708 <app_Tasks+0x1b8>)
 8000664:	2000      	movs	r0, #0
 8000666:	f005 fb31 	bl	8005ccc <log_SendString>
					appState = APP_NEG_SPIN;
 800066a:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <app_Tasks+0x194>)
 800066c:	2205      	movs	r2, #5
 800066e:	701a      	strb	r2, [r3, #0]
					break;
 8000670:	e006      	b.n	8000680 <app_Tasks+0x130>

        		default:
        			log_SendString(LOG_APP_ERROR,"IMU spin error");
 8000672:	4926      	ldr	r1, [pc, #152]	; (800070c <app_Tasks+0x1bc>)
 8000674:	2001      	movs	r0, #1
 8000676:	f005 fb29 	bl	8005ccc <log_SendString>
        			Error_Handler();
 800067a:	f000 f866 	bl	800074a <Error_Handler>
        			break;
 800067e:	bf00      	nop
        	}
            break;
 8000680:	e02d      	b.n	80006de <app_Tasks+0x18e>

        case APP_POS_SPIN:
        	app_positiveSpinDetected();
 8000682:	f000 f850 	bl	8000726 <app_positiveSpinDetected>
        	appState = APP_DELAY;
 8000686:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <app_Tasks+0x194>)
 8000688:	2206      	movs	r2, #6
 800068a:	701a      	strb	r2, [r3, #0]
        	delayWrite(&appTimer, APP_CONFIG_DELAY_MS);
 800068c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000690:	4816      	ldr	r0, [pc, #88]	; (80006ec <app_Tasks+0x19c>)
 8000692:	f004 fe80 	bl	8005396 <delayWrite>
            break;
 8000696:	e022      	b.n	80006de <app_Tasks+0x18e>

        case APP_NEG_SPIN:
        	app_negativeSpinDetected();
 8000698:	f000 f84e 	bl	8000738 <app_negativeSpinDetected>
        	appState = APP_DELAY;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <app_Tasks+0x194>)
 800069e:	2206      	movs	r2, #6
 80006a0:	701a      	strb	r2, [r3, #0]
        	delayWrite(&appTimer, APP_CONFIG_DELAY_MS);
 80006a2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80006a6:	4811      	ldr	r0, [pc, #68]	; (80006ec <app_Tasks+0x19c>)
 80006a8:	f004 fe75 	bl	8005396 <delayWrite>
            break;
 80006ac:	e017      	b.n	80006de <app_Tasks+0x18e>

        case APP_DELAY:
			if (delayRead(&appTimer))
 80006ae:	480f      	ldr	r0, [pc, #60]	; (80006ec <app_Tasks+0x19c>)
 80006b0:	f004 fe3e 	bl	8005330 <delayRead>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d010      	beq.n	80006dc <app_Tasks+0x18c>
			{
				appState = APP_ACTIVE;
 80006ba:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <app_Tasks+0x194>)
 80006bc:	2203      	movs	r2, #3
 80006be:	701a      	strb	r2, [r3, #0]
				imu_GetData();
 80006c0:	f004 fe90 	bl	80053e4 <imu_GetData>
			}
			break;
 80006c4:	e00a      	b.n	80006dc <app_Tasks+0x18c>

        default:
        	log_SendString(LOG_APP_ERROR,"App unknown state!");
 80006c6:	4912      	ldr	r1, [pc, #72]	; (8000710 <app_Tasks+0x1c0>)
 80006c8:	2001      	movs	r0, #1
 80006ca:	f005 faff 	bl	8005ccc <log_SendString>
        	Error_Handler();
 80006ce:	f000 f83c 	bl	800074a <Error_Handler>
            break;
 80006d2:	e004      	b.n	80006de <app_Tasks+0x18e>
            break;
 80006d4:	bf00      	nop
 80006d6:	e002      	b.n	80006de <app_Tasks+0x18e>
            break;
 80006d8:	bf00      	nop
 80006da:	e000      	b.n	80006de <app_Tasks+0x18e>
			break;
 80006dc:	bf00      	nop
    }
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000040 	.word	0x20000040
 80006e8:	08006250 	.word	0x08006250
 80006ec:	20000034 	.word	0x20000034
 80006f0:	08006258 	.word	0x08006258
 80006f4:	08006264 	.word	0x08006264
 80006f8:	0800626c 	.word	0x0800626c
 80006fc:	08006274 	.word	0x08006274
 8000700:	08006284 	.word	0x08006284
 8000704:	08006298 	.word	0x08006298
 8000708:	080062b0 	.word	0x080062b0
 800070c:	080062c8 	.word	0x080062c8
 8000710:	080062d8 	.word	0x080062d8

08000714 <app_noSpinDetected>:

static void app_noSpinDetected()
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	npx_SetIdle();
 8000718:	f005 fb2e 	bl	8005d78 <npx_SetIdle>
	BSP_LED_Off(LED_NPX);  // reset LED to indicate inactivity
 800071c:	2002      	movs	r0, #2
 800071e:	f000 fbc3 	bl	8000ea8 <BSP_LED_Off>
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}

08000726 <app_positiveSpinDetected>:

static void app_positiveSpinDetected()
{
 8000726:	b580      	push	{r7, lr}
 8000728:	af00      	add	r7, sp, #0
	npx_SetPositive();
 800072a:	f005 fb2c 	bl	8005d86 <npx_SetPositive>
	BSP_LED_Toggle(LED_NPX); // toggle LED to indicate activity
 800072e:	2002      	movs	r0, #2
 8000730:	f000 fbd4 	bl	8000edc <BSP_LED_Toggle>
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}

08000738 <app_negativeSpinDetected>:

static void app_negativeSpinDetected()
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	npx_SetNegative();
 800073c:	f005 fb2a 	bl	8005d94 <npx_SetNegative>
	BSP_LED_Toggle(LED_NPX); // toggle LED to indicate activity
 8000740:	2002      	movs	r0, #2
 8000742:	f000 fbcb 	bl	8000edc <BSP_LED_Toggle>
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}

0800074a <Error_Handler>:
/**
 * System
 */

static void Error_Handler(void)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	af00      	add	r7, sp, #0
	/* Turn LED_APP on */
	BSP_LED_On(LED_APP);
 800074e:	2000      	movs	r0, #0
 8000750:	f000 fb90 	bl	8000e74 <BSP_LED_On>
	while (1)
 8000754:	e7fe      	b.n	8000754 <Error_Handler+0xa>
	...

08000758 <SystemClock_Config>:
	{
	}
}

void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b094      	sub	sp, #80	; 0x50
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 0320 	add.w	r3, r7, #32
 8000762:	2230      	movs	r2, #48	; 0x30
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f005 fd34 	bl	80061d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	4b29      	ldr	r3, [pc, #164]	; (8000828 <SystemClock_Config+0xd0>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000784:	4a28      	ldr	r2, [pc, #160]	; (8000828 <SystemClock_Config+0xd0>)
 8000786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078a:	6413      	str	r3, [r2, #64]	; 0x40
 800078c:	4b26      	ldr	r3, [pc, #152]	; (8000828 <SystemClock_Config+0xd0>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000798:	2300      	movs	r3, #0
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	4b23      	ldr	r3, [pc, #140]	; (800082c <SystemClock_Config+0xd4>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007a4:	4a21      	ldr	r2, [pc, #132]	; (800082c <SystemClock_Config+0xd4>)
 80007a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	4b1f      	ldr	r3, [pc, #124]	; (800082c <SystemClock_Config+0xd4>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b8:	2301      	movs	r3, #1
 80007ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c2:	2302      	movs	r3, #2
 80007c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007cc:	2304      	movs	r3, #4
 80007ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80007d0:	2348      	movs	r3, #72	; 0x48
 80007d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80007d8:	2303      	movs	r3, #3
 80007da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007dc:	f107 0320 	add.w	r3, r7, #32
 80007e0:	4618      	mov	r0, r3
 80007e2:	f002 fb4f 	bl	8002e84 <HAL_RCC_OscConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007ec:	f7ff ffad 	bl	800074a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f0:	230f      	movs	r3, #15
 80007f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f4:	2302      	movs	r3, #2
 80007f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000800:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000806:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	2102      	movs	r1, #2
 800080e:	4618      	mov	r0, r3
 8000810:	f002 fdb0 	bl	8003374 <HAL_RCC_ClockConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800081a:	f7ff ff96 	bl	800074a <Error_Handler>
  }
}
 800081e:	bf00      	nop
 8000820:	3750      	adds	r7, #80	; 0x50
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800
 800082c:	40007000 	.word	0x40007000

08000830 <GPIO_Init>:

static void GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08c      	sub	sp, #48	; 0x30
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
 800084a:	4b74      	ldr	r3, [pc, #464]	; (8000a1c <GPIO_Init+0x1ec>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a73      	ldr	r2, [pc, #460]	; (8000a1c <GPIO_Init+0x1ec>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b71      	ldr	r3, [pc, #452]	; (8000a1c <GPIO_Init+0x1ec>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	61bb      	str	r3, [r7, #24]
 8000860:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	4b6d      	ldr	r3, [pc, #436]	; (8000a1c <GPIO_Init+0x1ec>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a6c      	ldr	r2, [pc, #432]	; (8000a1c <GPIO_Init+0x1ec>)
 800086c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b6a      	ldr	r3, [pc, #424]	; (8000a1c <GPIO_Init+0x1ec>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b66      	ldr	r3, [pc, #408]	; (8000a1c <GPIO_Init+0x1ec>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a65      	ldr	r2, [pc, #404]	; (8000a1c <GPIO_Init+0x1ec>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b63      	ldr	r3, [pc, #396]	; (8000a1c <GPIO_Init+0x1ec>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b5f      	ldr	r3, [pc, #380]	; (8000a1c <GPIO_Init+0x1ec>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a5e      	ldr	r2, [pc, #376]	; (8000a1c <GPIO_Init+0x1ec>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b5c      	ldr	r3, [pc, #368]	; (8000a1c <GPIO_Init+0x1ec>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	4b58      	ldr	r3, [pc, #352]	; (8000a1c <GPIO_Init+0x1ec>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a57      	ldr	r2, [pc, #348]	; (8000a1c <GPIO_Init+0x1ec>)
 80008c0:	f043 0310 	orr.w	r3, r3, #16
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b55      	ldr	r3, [pc, #340]	; (8000a1c <GPIO_Init+0x1ec>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0310 	and.w	r3, r3, #16
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b51      	ldr	r3, [pc, #324]	; (8000a1c <GPIO_Init+0x1ec>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a50      	ldr	r2, [pc, #320]	; (8000a1c <GPIO_Init+0x1ec>)
 80008dc:	f043 0308 	orr.w	r3, r3, #8
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b4e      	ldr	r3, [pc, #312]	; (8000a1c <GPIO_Init+0x1ec>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0308 	and.w	r3, r3, #8
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	4b4a      	ldr	r3, [pc, #296]	; (8000a1c <GPIO_Init+0x1ec>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a49      	ldr	r2, [pc, #292]	; (8000a1c <GPIO_Init+0x1ec>)
 80008f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b47      	ldr	r3, [pc, #284]	; (8000a1c <GPIO_Init+0x1ec>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000910:	4843      	ldr	r0, [pc, #268]	; (8000a20 <GPIO_Init+0x1f0>)
 8000912:	f001 f9e3 	bl	8001cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2140      	movs	r1, #64	; 0x40
 800091a:	4842      	ldr	r0, [pc, #264]	; (8000a24 <GPIO_Init+0x1f4>)
 800091c:	f001 f9de 	bl	8001cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000920:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000926:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	483c      	ldr	r0, [pc, #240]	; (8000a28 <GPIO_Init+0x1f8>)
 8000938:	f001 f824 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800093c:	2332      	movs	r3, #50	; 0x32
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000948:	2303      	movs	r3, #3
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800094c:	230b      	movs	r3, #11
 800094e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4834      	ldr	r0, [pc, #208]	; (8000a28 <GPIO_Init+0x1f8>)
 8000958:	f001 f814 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800095c:	2386      	movs	r3, #134	; 0x86
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000968:	2303      	movs	r3, #3
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800096c:	230b      	movs	r3, #11
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	482d      	ldr	r0, [pc, #180]	; (8000a2c <GPIO_Init+0x1fc>)
 8000978:	f001 f804 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800097c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4822      	ldr	r0, [pc, #136]	; (8000a20 <GPIO_Init+0x1f0>)
 8000996:	f000 fff5 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800099a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a8:	2303      	movs	r3, #3
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ac:	230b      	movs	r3, #11
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	481a      	ldr	r0, [pc, #104]	; (8000a20 <GPIO_Init+0x1f0>)
 80009b8:	f000 ffe4 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009bc:	2340      	movs	r3, #64	; 0x40
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4814      	ldr	r0, [pc, #80]	; (8000a24 <GPIO_Init+0x1f4>)
 80009d4:	f000 ffd6 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009d8:	2380      	movs	r3, #128	; 0x80
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	480e      	ldr	r0, [pc, #56]	; (8000a24 <GPIO_Init+0x1f4>)
 80009ec:	f000 ffca 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009f0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a02:	230b      	movs	r3, #11
 8000a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	; (8000a24 <GPIO_Init+0x1f4>)
 8000a0e:	f000 ffb9 	bl	8001984 <HAL_GPIO_Init>
}
 8000a12:	bf00      	nop
 8000a14:	3730      	adds	r7, #48	; 0x30
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020400 	.word	0x40020400
 8000a24:	40021800 	.word	0x40021800
 8000a28:	40020800 	.word	0x40020800
 8000a2c:	40020000 	.word	0x40020000

08000a30 <led_init>:

static void led_init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	BSP_LED_Init(LED_APP);
 8000a34:	2000      	movs	r0, #0
 8000a36:	f000 f9cd 	bl	8000dd4 <BSP_LED_Init>
	BSP_LED_Init(LED_IMU);
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	f000 f9ca 	bl	8000dd4 <BSP_LED_Init>
	BSP_LED_Init(LED_NPX);
 8000a40:	2002      	movs	r0, #2
 8000a42:	f000 f9c7 	bl	8000dd4 <BSP_LED_Init>

	BSP_LED_Off(LED_APP);
 8000a46:	2000      	movs	r0, #0
 8000a48:	f000 fa2e 	bl	8000ea8 <BSP_LED_Off>
	BSP_LED_Off(LED_IMU);
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f000 fa2b 	bl	8000ea8 <BSP_LED_Off>
	BSP_LED_Off(LED_NPX);
 8000a52:	2002      	movs	r0, #2
 8000a54:	f000 fa28 	bl	8000ea8 <BSP_LED_Off>
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
static void Error_Handler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8000a60:	2001      	movs	r0, #1
 8000a62:	f000 fa07 	bl	8000e74 <BSP_LED_On>
	while (1)
 8000a66:	e7fe      	b.n	8000a66 <Error_Handler+0xa>

08000a68 <HAL_MspInit>:
//void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	4a0f      	ldr	r2, [pc, #60]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a98:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	; 0x28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a19      	ldr	r2, [pc, #100]	; (8000b3c <HAL_I2C_MspInit+0x84>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d12c      	bne.n	8000b34 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <HAL_I2C_MspInit+0x88>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a17      	ldr	r2, [pc, #92]	; (8000b40 <HAL_I2C_MspInit+0x88>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <HAL_I2C_MspInit+0x88>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000af6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000afc:	2312      	movs	r3, #18
 8000afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b08:	2304      	movs	r3, #4
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	480c      	ldr	r0, [pc, #48]	; (8000b44 <HAL_I2C_MspInit+0x8c>)
 8000b14:	f000 ff36 	bl	8001984 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <HAL_I2C_MspInit+0x88>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <HAL_I2C_MspInit+0x88>)
 8000b22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b26:	6413      	str	r3, [r2, #64]	; 0x40
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <HAL_I2C_MspInit+0x88>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b34:	bf00      	nop
 8000b36:	3728      	adds	r7, #40	; 0x28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40005400 	.word	0x40005400
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020400 	.word	0x40020400

08000b48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a22      	ldr	r2, [pc, #136]	; (8000be0 <HAL_TIM_Base_MspInit+0x98>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d13d      	bne.n	8000bd6 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	4b21      	ldr	r3, [pc, #132]	; (8000be4 <HAL_TIM_Base_MspInit+0x9c>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	4a20      	ldr	r2, [pc, #128]	; (8000be4 <HAL_TIM_Base_MspInit+0x9c>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6a:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <HAL_TIM_Base_MspInit+0x9c>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000b76:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <HAL_TIM_Base_MspInit+0xa0>)
 8000b78:	4a1c      	ldr	r2, [pc, #112]	; (8000bec <HAL_TIM_Base_MspInit+0xa4>)
 8000b7a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <HAL_TIM_Base_MspInit+0xa0>)
 8000b7e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000b82:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b84:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <HAL_TIM_Base_MspInit+0xa0>)
 8000b86:	2240      	movs	r2, #64	; 0x40
 8000b88:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <HAL_TIM_Base_MspInit+0xa0>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <HAL_TIM_Base_MspInit+0xa0>)
 8000b92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b96:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b98:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <HAL_TIM_Base_MspInit+0xa0>)
 8000b9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b9e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <HAL_TIM_Base_MspInit+0xa0>)
 8000ba2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ba6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <HAL_TIM_Base_MspInit+0xa0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <HAL_TIM_Base_MspInit+0xa0>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <HAL_TIM_Base_MspInit+0xa0>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000bba:	480b      	ldr	r0, [pc, #44]	; (8000be8 <HAL_TIM_Base_MspInit+0xa0>)
 8000bbc:	f000 fb50 	bl	8001260 <HAL_DMA_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8000bc6:	f7ff ff49 	bl	8000a5c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a06      	ldr	r2, [pc, #24]	; (8000be8 <HAL_TIM_Base_MspInit+0xa0>)
 8000bce:	625a      	str	r2, [r3, #36]	; 0x24
 8000bd0:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <HAL_TIM_Base_MspInit+0xa0>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000bd6:	bf00      	nop
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40010000 	.word	0x40010000
 8000be4:	40023800 	.word	0x40023800
 8000be8:	20000178 	.word	0x20000178
 8000bec:	40026428 	.word	0x40026428

08000bf0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 030c 	add.w	r3, r7, #12
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <HAL_TIM_MspPostInit+0x68>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d11e      	bne.n	8000c50 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <HAL_TIM_MspPostInit+0x6c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a10      	ldr	r2, [pc, #64]	; (8000c5c <HAL_TIM_MspPostInit+0x6c>)
 8000c1c:	f043 0310 	orr.w	r3, r3, #16
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <HAL_TIM_MspPostInit+0x6c>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0310 	and.w	r3, r3, #16
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c32:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c40:	2301      	movs	r3, #1
 8000c42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c44:	f107 030c 	add.w	r3, r7, #12
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4805      	ldr	r0, [pc, #20]	; (8000c60 <HAL_TIM_MspPostInit+0x70>)
 8000c4c:	f000 fe9a 	bl	8001984 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c50:	bf00      	nop
 8000c52:	3720      	adds	r7, #32
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40010000 	.word	0x40010000
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40021000 	.word	0x40021000

08000c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	; 0x28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a19      	ldr	r2, [pc, #100]	; (8000ce8 <HAL_UART_MspInit+0x84>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d12c      	bne.n	8000ce0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <HAL_UART_MspInit+0x88>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	4a17      	ldr	r2, [pc, #92]	; (8000cec <HAL_UART_MspInit+0x88>)
 8000c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c94:	6413      	str	r3, [r2, #64]	; 0x40
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <HAL_UART_MspInit+0x88>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <HAL_UART_MspInit+0x88>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a10      	ldr	r2, [pc, #64]	; (8000cec <HAL_UART_MspInit+0x88>)
 8000cac:	f043 0308 	orr.w	r3, r3, #8
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <HAL_UART_MspInit+0x88>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0308 	and.w	r3, r3, #8
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cd0:	2307      	movs	r3, #7
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <HAL_UART_MspInit+0x8c>)
 8000cdc:	f000 fe52 	bl	8001984 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ce0:	bf00      	nop
 8000ce2:	3728      	adds	r7, #40	; 0x28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40004800 	.word	0x40004800
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020c00 	.word	0x40020c00

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <NMI_Handler+0x4>

08000cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <HardFault_Handler+0x4>

08000d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <MemManage_Handler+0x4>

08000d06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <BusFault_Handler+0x4>

08000d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <UsageFault_Handler+0x4>

08000d12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d40:	f000 f938 	bl	8000fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000d4c:	4802      	ldr	r0, [pc, #8]	; (8000d58 <DMA2_Stream1_IRQHandler+0x10>)
 8000d4e:	f000 fbaf 	bl	80014b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000178 	.word	0x20000178

08000d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <SystemInit+0x20>)
 8000d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <SystemInit+0x20>)
 8000d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d84:	f7ff ffea 	bl	8000d5c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d88:	480c      	ldr	r0, [pc, #48]	; (8000dbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d8a:	490d      	ldr	r1, [pc, #52]	; (8000dc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d90:	e002      	b.n	8000d98 <LoopCopyDataInit>

08000d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d96:	3304      	adds	r3, #4

08000d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d9c:	d3f9      	bcc.n	8000d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000da0:	4c0a      	ldr	r4, [pc, #40]	; (8000dcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da4:	e001      	b.n	8000daa <LoopFillZerobss>

08000da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da8:	3204      	adds	r2, #4

08000daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dac:	d3fb      	bcc.n	8000da6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dae:	f005 fa19 	bl	80061e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000db2:	f7ff fba1 	bl	80004f8 <main>
  bx  lr    
 8000db6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000db8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000dc4:	08006464 	.word	0x08006464
  ldr r2, =_sbss
 8000dc8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000dcc:	200005e8 	.word	0x200005e8

08000dd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC_IRQHandler>
	...

08000dd4 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d10e      	bne.n	8000e02 <BSP_LED_Init+0x2e>
 8000de4:	2300      	movs	r3, #0
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <BSP_LED_Init+0x94>)
 8000dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dec:	4a1e      	ldr	r2, [pc, #120]	; (8000e68 <BSP_LED_Init+0x94>)
 8000dee:	f043 0302 	orr.w	r3, r3, #2
 8000df2:	6313      	str	r3, [r2, #48]	; 0x30
 8000df4:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <BSP_LED_Init+0x94>)
 8000df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df8:	f003 0302 	and.w	r3, r3, #2
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	e00d      	b.n	8000e1e <BSP_LED_Init+0x4a>
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <BSP_LED_Init+0x94>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a17      	ldr	r2, [pc, #92]	; (8000e68 <BSP_LED_Init+0x94>)
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <BSP_LED_Init+0x94>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	4a12      	ldr	r2, [pc, #72]	; (8000e6c <BSP_LED_Init+0x98>)
 8000e22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000e30:	2302      	movs	r3, #2
 8000e32:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	4a0e      	ldr	r2, [pc, #56]	; (8000e70 <BSP_LED_Init+0x9c>)
 8000e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3c:	f107 0214 	add.w	r2, r7, #20
 8000e40:	4611      	mov	r1, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 fd9e 	bl	8001984 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	4a09      	ldr	r2, [pc, #36]	; (8000e70 <BSP_LED_Init+0x9c>)
 8000e4c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	4a06      	ldr	r2, [pc, #24]	; (8000e6c <BSP_LED_Init+0x98>)
 8000e54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	f000 ff3e 	bl	8001cdc <HAL_GPIO_WritePin>
}
 8000e60:	bf00      	nop
 8000e62:	3728      	adds	r7, #40	; 0x28
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	08006384 	.word	0x08006384
 8000e70:	20000004 	.word	0x20000004

08000e74 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <BSP_LED_On+0x2c>)
 8000e82:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	4a06      	ldr	r2, [pc, #24]	; (8000ea4 <BSP_LED_On+0x30>)
 8000e8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	4619      	mov	r1, r3
 8000e92:	f000 ff23 	bl	8001cdc <HAL_GPIO_WritePin>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000004 	.word	0x20000004
 8000ea4:	08006384 	.word	0x08006384

08000ea8 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <BSP_LED_Off+0x2c>)
 8000eb6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	4a06      	ldr	r2, [pc, #24]	; (8000ed8 <BSP_LED_Off+0x30>)
 8000ebe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f000 ff09 	bl	8001cdc <HAL_GPIO_WritePin>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000004 	.word	0x20000004
 8000ed8:	08006384 	.word	0x08006384

08000edc <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <BSP_LED_Toggle+0x2c>)
 8000eea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	4906      	ldr	r1, [pc, #24]	; (8000f0c <BSP_LED_Toggle+0x30>)
 8000ef2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4610      	mov	r0, r2
 8000efa:	f000 ff08 	bl	8001d0e <HAL_GPIO_TogglePin>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000004 	.word	0x20000004
 8000f0c:	08006384 	.word	0x08006384

08000f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f14:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0d      	ldr	r2, [pc, #52]	; (8000f50 <HAL_Init+0x40>)
 8000f1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f20:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0a      	ldr	r2, [pc, #40]	; (8000f50 <HAL_Init+0x40>)
 8000f26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a07      	ldr	r2, [pc, #28]	; (8000f50 <HAL_Init+0x40>)
 8000f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f38:	2003      	movs	r0, #3
 8000f3a:	f000 f94f 	bl	80011dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f000 f808 	bl	8000f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f44:	f7ff fd90 	bl	8000a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40023c00 	.word	0x40023c00

08000f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_InitTick+0x54>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <HAL_InitTick+0x58>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4619      	mov	r1, r3
 8000f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f967 	bl	8001246 <HAL_SYSTICK_Config>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00e      	b.n	8000fa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b0f      	cmp	r3, #15
 8000f86:	d80a      	bhi.n	8000f9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f90:	f000 f92f 	bl	80011f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f94:	4a06      	ldr	r2, [pc, #24]	; (8000fb0 <HAL_InitTick+0x5c>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e000      	b.n	8000fa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	20000014 	.word	0x20000014
 8000fb0:	20000010 	.word	0x20000010

08000fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_IncTick+0x20>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_IncTick+0x24>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <HAL_IncTick+0x24>)
 8000fc6:	6013      	str	r3, [r2, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000014 	.word	0x20000014
 8000fd8:	20000044 	.word	0x20000044

08000fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe0:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <HAL_GetTick+0x14>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000044 	.word	0x20000044

08000ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ffc:	f7ff ffee 	bl	8000fdc <HAL_GetTick>
 8001000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800100c:	d005      	beq.n	800101a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <HAL_Delay+0x44>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4413      	add	r3, r2
 8001018:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800101a:	bf00      	nop
 800101c:	f7ff ffde 	bl	8000fdc <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	429a      	cmp	r2, r3
 800102a:	d8f7      	bhi.n	800101c <HAL_Delay+0x28>
  {
  }
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000014 	.word	0x20000014

0800103c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <__NVIC_SetPriorityGrouping+0x44>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001058:	4013      	ands	r3, r2
 800105a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800106c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800106e:	4a04      	ldr	r2, [pc, #16]	; (8001080 <__NVIC_SetPriorityGrouping+0x44>)
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	60d3      	str	r3, [r2, #12]
}
 8001074:	bf00      	nop
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001088:	4b04      	ldr	r3, [pc, #16]	; (800109c <__NVIC_GetPriorityGrouping+0x18>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	0a1b      	lsrs	r3, r3, #8
 800108e:	f003 0307 	and.w	r3, r3, #7
}
 8001092:	4618      	mov	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	db0b      	blt.n	80010ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	f003 021f 	and.w	r2, r3, #31
 80010b8:	4907      	ldr	r1, [pc, #28]	; (80010d8 <__NVIC_EnableIRQ+0x38>)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	095b      	lsrs	r3, r3, #5
 80010c0:	2001      	movs	r0, #1
 80010c2:	fa00 f202 	lsl.w	r2, r0, r2
 80010c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000e100 	.word	0xe000e100

080010dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	6039      	str	r1, [r7, #0]
 80010e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	db0a      	blt.n	8001106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	490c      	ldr	r1, [pc, #48]	; (8001128 <__NVIC_SetPriority+0x4c>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	0112      	lsls	r2, r2, #4
 80010fc:	b2d2      	uxtb	r2, r2
 80010fe:	440b      	add	r3, r1
 8001100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001104:	e00a      	b.n	800111c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4908      	ldr	r1, [pc, #32]	; (800112c <__NVIC_SetPriority+0x50>)
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	f003 030f 	and.w	r3, r3, #15
 8001112:	3b04      	subs	r3, #4
 8001114:	0112      	lsls	r2, r2, #4
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	440b      	add	r3, r1
 800111a:	761a      	strb	r2, [r3, #24]
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000e100 	.word	0xe000e100
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001130:	b480      	push	{r7}
 8001132:	b089      	sub	sp, #36	; 0x24
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	f1c3 0307 	rsb	r3, r3, #7
 800114a:	2b04      	cmp	r3, #4
 800114c:	bf28      	it	cs
 800114e:	2304      	movcs	r3, #4
 8001150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3304      	adds	r3, #4
 8001156:	2b06      	cmp	r3, #6
 8001158:	d902      	bls.n	8001160 <NVIC_EncodePriority+0x30>
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3b03      	subs	r3, #3
 800115e:	e000      	b.n	8001162 <NVIC_EncodePriority+0x32>
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	f04f 32ff 	mov.w	r2, #4294967295
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43da      	mvns	r2, r3
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	401a      	ands	r2, r3
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001178:	f04f 31ff 	mov.w	r1, #4294967295
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	fa01 f303 	lsl.w	r3, r1, r3
 8001182:	43d9      	mvns	r1, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001188:	4313      	orrs	r3, r2
         );
}
 800118a:	4618      	mov	r0, r3
 800118c:	3724      	adds	r7, #36	; 0x24
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011a8:	d301      	bcc.n	80011ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011aa:	2301      	movs	r3, #1
 80011ac:	e00f      	b.n	80011ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ae:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <SysTick_Config+0x40>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011b6:	210f      	movs	r1, #15
 80011b8:	f04f 30ff 	mov.w	r0, #4294967295
 80011bc:	f7ff ff8e 	bl	80010dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <SysTick_Config+0x40>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c6:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <SysTick_Config+0x40>)
 80011c8:	2207      	movs	r2, #7
 80011ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	e000e010 	.word	0xe000e010

080011dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ff29 	bl	800103c <__NVIC_SetPriorityGrouping>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b086      	sub	sp, #24
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	60b9      	str	r1, [r7, #8]
 80011fc:	607a      	str	r2, [r7, #4]
 80011fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001204:	f7ff ff3e 	bl	8001084 <__NVIC_GetPriorityGrouping>
 8001208:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	68b9      	ldr	r1, [r7, #8]
 800120e:	6978      	ldr	r0, [r7, #20]
 8001210:	f7ff ff8e 	bl	8001130 <NVIC_EncodePriority>
 8001214:	4602      	mov	r2, r0
 8001216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121a:	4611      	mov	r1, r2
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff5d 	bl	80010dc <__NVIC_SetPriority>
}
 8001222:	bf00      	nop
 8001224:	3718      	adds	r7, #24
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff31 	bl	80010a0 <__NVIC_EnableIRQ>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ffa2 	bl	8001198 <SysTick_Config>
 8001254:	4603      	mov	r3, r0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800126c:	f7ff feb6 	bl	8000fdc <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d101      	bne.n	800127c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e099      	b.n	80013b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2202      	movs	r2, #2
 8001280:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 0201 	bic.w	r2, r2, #1
 800129a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800129c:	e00f      	b.n	80012be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800129e:	f7ff fe9d 	bl	8000fdc <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b05      	cmp	r3, #5
 80012aa:	d908      	bls.n	80012be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2220      	movs	r2, #32
 80012b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2203      	movs	r2, #3
 80012b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e078      	b.n	80013b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1e8      	bne.n	800129e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012d4:	697a      	ldr	r2, [r7, #20]
 80012d6:	4b38      	ldr	r3, [pc, #224]	; (80013b8 <HAL_DMA_Init+0x158>)
 80012d8:	4013      	ands	r3, r2
 80012da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001302:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a1b      	ldr	r3, [r3, #32]
 8001308:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	4313      	orrs	r3, r2
 800130e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001314:	2b04      	cmp	r3, #4
 8001316:	d107      	bne.n	8001328 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001320:	4313      	orrs	r3, r2
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	4313      	orrs	r3, r2
 8001326:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	697a      	ldr	r2, [r7, #20]
 800132e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	f023 0307 	bic.w	r3, r3, #7
 800133e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	4313      	orrs	r3, r2
 8001348:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134e:	2b04      	cmp	r3, #4
 8001350:	d117      	bne.n	8001382 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	4313      	orrs	r3, r2
 800135a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001360:	2b00      	cmp	r3, #0
 8001362:	d00e      	beq.n	8001382 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f000 fa91 	bl	800188c <DMA_CheckFifoParam>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d008      	beq.n	8001382 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2240      	movs	r2, #64	; 0x40
 8001374:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2201      	movs	r2, #1
 800137a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800137e:	2301      	movs	r3, #1
 8001380:	e016      	b.n	80013b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 fa48 	bl	8001820 <DMA_CalcBaseAndBitshift>
 8001390:	4603      	mov	r3, r0
 8001392:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001398:	223f      	movs	r2, #63	; 0x3f
 800139a:	409a      	lsls	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2201      	movs	r2, #1
 80013aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	f010803f 	.word	0xf010803f

080013bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
 80013c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013ca:	2300      	movs	r3, #0
 80013cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d101      	bne.n	80013e2 <HAL_DMA_Start_IT+0x26>
 80013de:	2302      	movs	r3, #2
 80013e0:	e040      	b.n	8001464 <HAL_DMA_Start_IT+0xa8>
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2201      	movs	r2, #1
 80013e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d12f      	bne.n	8001456 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2202      	movs	r2, #2
 80013fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2200      	movs	r2, #0
 8001402:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	68b9      	ldr	r1, [r7, #8]
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	f000 f9da 	bl	80017c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001414:	223f      	movs	r2, #63	; 0x3f
 8001416:	409a      	lsls	r2, r3
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f042 0216 	orr.w	r2, r2, #22
 800142a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	2b00      	cmp	r3, #0
 8001432:	d007      	beq.n	8001444 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f042 0208 	orr.w	r2, r2, #8
 8001442:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0201 	orr.w	r2, r2, #1
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	e005      	b.n	8001462 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800145e:	2302      	movs	r3, #2
 8001460:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001462:	7dfb      	ldrb	r3, [r7, #23]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d004      	beq.n	800148a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2280      	movs	r2, #128	; 0x80
 8001484:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e00c      	b.n	80014a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2205      	movs	r2, #5
 800148e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 0201 	bic.w	r2, r2, #1
 80014a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014bc:	4b8e      	ldr	r3, [pc, #568]	; (80016f8 <HAL_DMA_IRQHandler+0x248>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a8e      	ldr	r2, [pc, #568]	; (80016fc <HAL_DMA_IRQHandler+0x24c>)
 80014c2:	fba2 2303 	umull	r2, r3, r2, r3
 80014c6:	0a9b      	lsrs	r3, r3, #10
 80014c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014da:	2208      	movs	r2, #8
 80014dc:	409a      	lsls	r2, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4013      	ands	r3, r2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d01a      	beq.n	800151c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d013      	beq.n	800151c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0204 	bic.w	r2, r2, #4
 8001502:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001508:	2208      	movs	r2, #8
 800150a:	409a      	lsls	r2, r3
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001514:	f043 0201 	orr.w	r2, r3, #1
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001520:	2201      	movs	r2, #1
 8001522:	409a      	lsls	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4013      	ands	r3, r2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d012      	beq.n	8001552 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00b      	beq.n	8001552 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800153e:	2201      	movs	r2, #1
 8001540:	409a      	lsls	r2, r3
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800154a:	f043 0202 	orr.w	r2, r3, #2
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001556:	2204      	movs	r2, #4
 8001558:	409a      	lsls	r2, r3
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4013      	ands	r3, r2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d012      	beq.n	8001588 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d00b      	beq.n	8001588 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001574:	2204      	movs	r2, #4
 8001576:	409a      	lsls	r2, r3
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001580:	f043 0204 	orr.w	r2, r3, #4
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800158c:	2210      	movs	r2, #16
 800158e:	409a      	lsls	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4013      	ands	r3, r2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d043      	beq.n	8001620 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d03c      	beq.n	8001620 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015aa:	2210      	movs	r2, #16
 80015ac:	409a      	lsls	r2, r3
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d018      	beq.n	80015f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d108      	bne.n	80015e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d024      	beq.n	8001620 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	4798      	blx	r3
 80015de:	e01f      	b.n	8001620 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d01b      	beq.n	8001620 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	4798      	blx	r3
 80015f0:	e016      	b.n	8001620 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d107      	bne.n	8001610 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 0208 	bic.w	r2, r2, #8
 800160e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001624:	2220      	movs	r2, #32
 8001626:	409a      	lsls	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4013      	ands	r3, r2
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 808f 	beq.w	8001750 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0310 	and.w	r3, r3, #16
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 8087 	beq.w	8001750 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001646:	2220      	movs	r2, #32
 8001648:	409a      	lsls	r2, r3
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b05      	cmp	r3, #5
 8001658:	d136      	bne.n	80016c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 0216 	bic.w	r2, r2, #22
 8001668:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	695a      	ldr	r2, [r3, #20]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001678:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	2b00      	cmp	r3, #0
 8001680:	d103      	bne.n	800168a <HAL_DMA_IRQHandler+0x1da>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001686:	2b00      	cmp	r3, #0
 8001688:	d007      	beq.n	800169a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 0208 	bic.w	r2, r2, #8
 8001698:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169e:	223f      	movs	r2, #63	; 0x3f
 80016a0:	409a      	lsls	r2, r3
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d07e      	beq.n	80017bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	4798      	blx	r3
        }
        return;
 80016c6:	e079      	b.n	80017bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d01d      	beq.n	8001712 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d10d      	bne.n	8001700 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d031      	beq.n	8001750 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	4798      	blx	r3
 80016f4:	e02c      	b.n	8001750 <HAL_DMA_IRQHandler+0x2a0>
 80016f6:	bf00      	nop
 80016f8:	20000000 	.word	0x20000000
 80016fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001704:	2b00      	cmp	r3, #0
 8001706:	d023      	beq.n	8001750 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	4798      	blx	r3
 8001710:	e01e      	b.n	8001750 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171c:	2b00      	cmp	r3, #0
 800171e:	d10f      	bne.n	8001740 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0210 	bic.w	r2, r2, #16
 800172e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001754:	2b00      	cmp	r3, #0
 8001756:	d032      	beq.n	80017be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	2b00      	cmp	r3, #0
 8001762:	d022      	beq.n	80017aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2205      	movs	r2, #5
 8001768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 0201 	bic.w	r2, r2, #1
 800177a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	3301      	adds	r3, #1
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	429a      	cmp	r2, r3
 8001786:	d307      	bcc.n	8001798 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f2      	bne.n	800177c <HAL_DMA_IRQHandler+0x2cc>
 8001796:	e000      	b.n	800179a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001798:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d005      	beq.n	80017be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	4798      	blx	r3
 80017ba:	e000      	b.n	80017be <HAL_DMA_IRQHandler+0x30e>
        return;
 80017bc:	bf00      	nop
    }
  }
}
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
 80017d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	2b40      	cmp	r3, #64	; 0x40
 80017f0:	d108      	bne.n	8001804 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001802:	e007      	b.n	8001814 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68ba      	ldr	r2, [r7, #8]
 800180a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	60da      	str	r2, [r3, #12]
}
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	3b10      	subs	r3, #16
 8001830:	4a14      	ldr	r2, [pc, #80]	; (8001884 <DMA_CalcBaseAndBitshift+0x64>)
 8001832:	fba2 2303 	umull	r2, r3, r2, r3
 8001836:	091b      	lsrs	r3, r3, #4
 8001838:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800183a:	4a13      	ldr	r2, [pc, #76]	; (8001888 <DMA_CalcBaseAndBitshift+0x68>)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4413      	add	r3, r2
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	461a      	mov	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2b03      	cmp	r3, #3
 800184c:	d909      	bls.n	8001862 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001856:	f023 0303 	bic.w	r3, r3, #3
 800185a:	1d1a      	adds	r2, r3, #4
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	659a      	str	r2, [r3, #88]	; 0x58
 8001860:	e007      	b.n	8001872 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800186a:	f023 0303 	bic.w	r3, r3, #3
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001876:	4618      	mov	r0, r3
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	aaaaaaab 	.word	0xaaaaaaab
 8001888:	0800638c 	.word	0x0800638c

0800188c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d11f      	bne.n	80018e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	2b03      	cmp	r3, #3
 80018aa:	d856      	bhi.n	800195a <DMA_CheckFifoParam+0xce>
 80018ac:	a201      	add	r2, pc, #4	; (adr r2, 80018b4 <DMA_CheckFifoParam+0x28>)
 80018ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b2:	bf00      	nop
 80018b4:	080018c5 	.word	0x080018c5
 80018b8:	080018d7 	.word	0x080018d7
 80018bc:	080018c5 	.word	0x080018c5
 80018c0:	0800195b 	.word	0x0800195b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d046      	beq.n	800195e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018d4:	e043      	b.n	800195e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018de:	d140      	bne.n	8001962 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018e4:	e03d      	b.n	8001962 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018ee:	d121      	bne.n	8001934 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	d837      	bhi.n	8001966 <DMA_CheckFifoParam+0xda>
 80018f6:	a201      	add	r2, pc, #4	; (adr r2, 80018fc <DMA_CheckFifoParam+0x70>)
 80018f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018fc:	0800190d 	.word	0x0800190d
 8001900:	08001913 	.word	0x08001913
 8001904:	0800190d 	.word	0x0800190d
 8001908:	08001925 	.word	0x08001925
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	73fb      	strb	r3, [r7, #15]
      break;
 8001910:	e030      	b.n	8001974 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001916:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d025      	beq.n	800196a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001922:	e022      	b.n	800196a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001928:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800192c:	d11f      	bne.n	800196e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001932:	e01c      	b.n	800196e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	2b02      	cmp	r3, #2
 8001938:	d903      	bls.n	8001942 <DMA_CheckFifoParam+0xb6>
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	2b03      	cmp	r3, #3
 800193e:	d003      	beq.n	8001948 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001940:	e018      	b.n	8001974 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	73fb      	strb	r3, [r7, #15]
      break;
 8001946:	e015      	b.n	8001974 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00e      	beq.n	8001972 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	73fb      	strb	r3, [r7, #15]
      break;
 8001958:	e00b      	b.n	8001972 <DMA_CheckFifoParam+0xe6>
      break;
 800195a:	bf00      	nop
 800195c:	e00a      	b.n	8001974 <DMA_CheckFifoParam+0xe8>
      break;
 800195e:	bf00      	nop
 8001960:	e008      	b.n	8001974 <DMA_CheckFifoParam+0xe8>
      break;
 8001962:	bf00      	nop
 8001964:	e006      	b.n	8001974 <DMA_CheckFifoParam+0xe8>
      break;
 8001966:	bf00      	nop
 8001968:	e004      	b.n	8001974 <DMA_CheckFifoParam+0xe8>
      break;
 800196a:	bf00      	nop
 800196c:	e002      	b.n	8001974 <DMA_CheckFifoParam+0xe8>
      break;   
 800196e:	bf00      	nop
 8001970:	e000      	b.n	8001974 <DMA_CheckFifoParam+0xe8>
      break;
 8001972:	bf00      	nop
    }
  } 
  
  return status; 
 8001974:	7bfb      	ldrb	r3, [r7, #15]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop

08001984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001984:	b480      	push	{r7}
 8001986:	b089      	sub	sp, #36	; 0x24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001996:	2300      	movs	r3, #0
 8001998:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
 800199e:	e177      	b.n	8001c90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019a0:	2201      	movs	r2, #1
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	4013      	ands	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	f040 8166 	bne.w	8001c8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d005      	beq.n	80019d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d130      	bne.n	8001a38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	2203      	movs	r2, #3
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4013      	ands	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	091b      	lsrs	r3, r3, #4
 8001a22:	f003 0201 	and.w	r2, r3, #1
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	2b03      	cmp	r3, #3
 8001a42:	d017      	beq.n	8001a74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	2203      	movs	r2, #3
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d123      	bne.n	8001ac8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	08da      	lsrs	r2, r3, #3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3208      	adds	r2, #8
 8001a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	220f      	movs	r2, #15
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	691a      	ldr	r2, [r3, #16]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	08da      	lsrs	r2, r3, #3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3208      	adds	r2, #8
 8001ac2:	69b9      	ldr	r1, [r7, #24]
 8001ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0203 	and.w	r2, r3, #3
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 80c0 	beq.w	8001c8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	4b66      	ldr	r3, [pc, #408]	; (8001ca8 <HAL_GPIO_Init+0x324>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	4a65      	ldr	r2, [pc, #404]	; (8001ca8 <HAL_GPIO_Init+0x324>)
 8001b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b18:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1a:	4b63      	ldr	r3, [pc, #396]	; (8001ca8 <HAL_GPIO_Init+0x324>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b26:	4a61      	ldr	r2, [pc, #388]	; (8001cac <HAL_GPIO_Init+0x328>)
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	089b      	lsrs	r3, r3, #2
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f003 0303 	and.w	r3, r3, #3
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	220f      	movs	r2, #15
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4013      	ands	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a58      	ldr	r2, [pc, #352]	; (8001cb0 <HAL_GPIO_Init+0x32c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d037      	beq.n	8001bc2 <HAL_GPIO_Init+0x23e>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a57      	ldr	r2, [pc, #348]	; (8001cb4 <HAL_GPIO_Init+0x330>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d031      	beq.n	8001bbe <HAL_GPIO_Init+0x23a>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a56      	ldr	r2, [pc, #344]	; (8001cb8 <HAL_GPIO_Init+0x334>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d02b      	beq.n	8001bba <HAL_GPIO_Init+0x236>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a55      	ldr	r2, [pc, #340]	; (8001cbc <HAL_GPIO_Init+0x338>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d025      	beq.n	8001bb6 <HAL_GPIO_Init+0x232>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a54      	ldr	r2, [pc, #336]	; (8001cc0 <HAL_GPIO_Init+0x33c>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d01f      	beq.n	8001bb2 <HAL_GPIO_Init+0x22e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a53      	ldr	r2, [pc, #332]	; (8001cc4 <HAL_GPIO_Init+0x340>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d019      	beq.n	8001bae <HAL_GPIO_Init+0x22a>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a52      	ldr	r2, [pc, #328]	; (8001cc8 <HAL_GPIO_Init+0x344>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d013      	beq.n	8001baa <HAL_GPIO_Init+0x226>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a51      	ldr	r2, [pc, #324]	; (8001ccc <HAL_GPIO_Init+0x348>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d00d      	beq.n	8001ba6 <HAL_GPIO_Init+0x222>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a50      	ldr	r2, [pc, #320]	; (8001cd0 <HAL_GPIO_Init+0x34c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d007      	beq.n	8001ba2 <HAL_GPIO_Init+0x21e>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4f      	ldr	r2, [pc, #316]	; (8001cd4 <HAL_GPIO_Init+0x350>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d101      	bne.n	8001b9e <HAL_GPIO_Init+0x21a>
 8001b9a:	2309      	movs	r3, #9
 8001b9c:	e012      	b.n	8001bc4 <HAL_GPIO_Init+0x240>
 8001b9e:	230a      	movs	r3, #10
 8001ba0:	e010      	b.n	8001bc4 <HAL_GPIO_Init+0x240>
 8001ba2:	2308      	movs	r3, #8
 8001ba4:	e00e      	b.n	8001bc4 <HAL_GPIO_Init+0x240>
 8001ba6:	2307      	movs	r3, #7
 8001ba8:	e00c      	b.n	8001bc4 <HAL_GPIO_Init+0x240>
 8001baa:	2306      	movs	r3, #6
 8001bac:	e00a      	b.n	8001bc4 <HAL_GPIO_Init+0x240>
 8001bae:	2305      	movs	r3, #5
 8001bb0:	e008      	b.n	8001bc4 <HAL_GPIO_Init+0x240>
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	e006      	b.n	8001bc4 <HAL_GPIO_Init+0x240>
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e004      	b.n	8001bc4 <HAL_GPIO_Init+0x240>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e002      	b.n	8001bc4 <HAL_GPIO_Init+0x240>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <HAL_GPIO_Init+0x240>
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	69fa      	ldr	r2, [r7, #28]
 8001bc6:	f002 0203 	and.w	r2, r2, #3
 8001bca:	0092      	lsls	r2, r2, #2
 8001bcc:	4093      	lsls	r3, r2
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bd4:	4935      	ldr	r1, [pc, #212]	; (8001cac <HAL_GPIO_Init+0x328>)
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	089b      	lsrs	r3, r3, #2
 8001bda:	3302      	adds	r3, #2
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001be2:	4b3d      	ldr	r3, [pc, #244]	; (8001cd8 <HAL_GPIO_Init+0x354>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c06:	4a34      	ldr	r2, [pc, #208]	; (8001cd8 <HAL_GPIO_Init+0x354>)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c0c:	4b32      	ldr	r3, [pc, #200]	; (8001cd8 <HAL_GPIO_Init+0x354>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c30:	4a29      	ldr	r2, [pc, #164]	; (8001cd8 <HAL_GPIO_Init+0x354>)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c36:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <HAL_GPIO_Init+0x354>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c5a:	4a1f      	ldr	r2, [pc, #124]	; (8001cd8 <HAL_GPIO_Init+0x354>)
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c60:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <HAL_GPIO_Init+0x354>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c84:	4a14      	ldr	r2, [pc, #80]	; (8001cd8 <HAL_GPIO_Init+0x354>)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	61fb      	str	r3, [r7, #28]
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	2b0f      	cmp	r3, #15
 8001c94:	f67f ae84 	bls.w	80019a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
 8001c9c:	3724      	adds	r7, #36	; 0x24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40013800 	.word	0x40013800
 8001cb0:	40020000 	.word	0x40020000
 8001cb4:	40020400 	.word	0x40020400
 8001cb8:	40020800 	.word	0x40020800
 8001cbc:	40020c00 	.word	0x40020c00
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40021400 	.word	0x40021400
 8001cc8:	40021800 	.word	0x40021800
 8001ccc:	40021c00 	.word	0x40021c00
 8001cd0:	40022000 	.word	0x40022000
 8001cd4:	40022400 	.word	0x40022400
 8001cd8:	40013c00 	.word	0x40013c00

08001cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	807b      	strh	r3, [r7, #2]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cec:	787b      	ldrb	r3, [r7, #1]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cf2:	887a      	ldrh	r2, [r7, #2]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cf8:	e003      	b.n	8001d02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cfa:	887b      	ldrh	r3, [r7, #2]
 8001cfc:	041a      	lsls	r2, r3, #16
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	619a      	str	r2, [r3, #24]
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b085      	sub	sp, #20
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	460b      	mov	r3, r1
 8001d18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d20:	887a      	ldrh	r2, [r7, #2]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4013      	ands	r3, r2
 8001d26:	041a      	lsls	r2, r3, #16
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	43d9      	mvns	r1, r3
 8001d2c:	887b      	ldrh	r3, [r7, #2]
 8001d2e:	400b      	ands	r3, r1
 8001d30:	431a      	orrs	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	619a      	str	r2, [r3, #24]
}
 8001d36:	bf00      	nop
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
	...

08001d44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e12b      	b.n	8001fae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d106      	bne.n	8001d70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7fe fea4 	bl	8000ab8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2224      	movs	r2, #36	; 0x24
 8001d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0201 	bic.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001da6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001da8:	f001 fcdc 	bl	8003764 <HAL_RCC_GetPCLK1Freq>
 8001dac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	4a81      	ldr	r2, [pc, #516]	; (8001fb8 <HAL_I2C_Init+0x274>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d807      	bhi.n	8001dc8 <HAL_I2C_Init+0x84>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4a80      	ldr	r2, [pc, #512]	; (8001fbc <HAL_I2C_Init+0x278>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	bf94      	ite	ls
 8001dc0:	2301      	movls	r3, #1
 8001dc2:	2300      	movhi	r3, #0
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	e006      	b.n	8001dd6 <HAL_I2C_Init+0x92>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4a7d      	ldr	r2, [pc, #500]	; (8001fc0 <HAL_I2C_Init+0x27c>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	bf94      	ite	ls
 8001dd0:	2301      	movls	r3, #1
 8001dd2:	2300      	movhi	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e0e7      	b.n	8001fae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4a78      	ldr	r2, [pc, #480]	; (8001fc4 <HAL_I2C_Init+0x280>)
 8001de2:	fba2 2303 	umull	r2, r3, r2, r3
 8001de6:	0c9b      	lsrs	r3, r3, #18
 8001de8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	4a6a      	ldr	r2, [pc, #424]	; (8001fb8 <HAL_I2C_Init+0x274>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d802      	bhi.n	8001e18 <HAL_I2C_Init+0xd4>
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	3301      	adds	r3, #1
 8001e16:	e009      	b.n	8001e2c <HAL_I2C_Init+0xe8>
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e1e:	fb02 f303 	mul.w	r3, r2, r3
 8001e22:	4a69      	ldr	r2, [pc, #420]	; (8001fc8 <HAL_I2C_Init+0x284>)
 8001e24:	fba2 2303 	umull	r2, r3, r2, r3
 8001e28:	099b      	lsrs	r3, r3, #6
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	430b      	orrs	r3, r1
 8001e32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	495c      	ldr	r1, [pc, #368]	; (8001fb8 <HAL_I2C_Init+0x274>)
 8001e48:	428b      	cmp	r3, r1
 8001e4a:	d819      	bhi.n	8001e80 <HAL_I2C_Init+0x13c>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	1e59      	subs	r1, r3, #1
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e5a:	1c59      	adds	r1, r3, #1
 8001e5c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e60:	400b      	ands	r3, r1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00a      	beq.n	8001e7c <HAL_I2C_Init+0x138>
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	1e59      	subs	r1, r3, #1
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e74:	3301      	adds	r3, #1
 8001e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e7a:	e051      	b.n	8001f20 <HAL_I2C_Init+0x1dc>
 8001e7c:	2304      	movs	r3, #4
 8001e7e:	e04f      	b.n	8001f20 <HAL_I2C_Init+0x1dc>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d111      	bne.n	8001eac <HAL_I2C_Init+0x168>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	1e58      	subs	r0, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6859      	ldr	r1, [r3, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	440b      	add	r3, r1
 8001e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	bf0c      	ite	eq
 8001ea4:	2301      	moveq	r3, #1
 8001ea6:	2300      	movne	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	e012      	b.n	8001ed2 <HAL_I2C_Init+0x18e>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	1e58      	subs	r0, r3, #1
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6859      	ldr	r1, [r3, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	0099      	lsls	r1, r3, #2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	bf0c      	ite	eq
 8001ecc:	2301      	moveq	r3, #1
 8001ece:	2300      	movne	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_I2C_Init+0x196>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e022      	b.n	8001f20 <HAL_I2C_Init+0x1dc>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10e      	bne.n	8001f00 <HAL_I2C_Init+0x1bc>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1e58      	subs	r0, r3, #1
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6859      	ldr	r1, [r3, #4]
 8001eea:	460b      	mov	r3, r1
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	440b      	add	r3, r1
 8001ef0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001efe:	e00f      	b.n	8001f20 <HAL_I2C_Init+0x1dc>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	1e58      	subs	r0, r3, #1
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6859      	ldr	r1, [r3, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	0099      	lsls	r1, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f16:	3301      	adds	r3, #1
 8001f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	6809      	ldr	r1, [r1, #0]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69da      	ldr	r2, [r3, #28]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6911      	ldr	r1, [r2, #16]
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	68d2      	ldr	r2, [r2, #12]
 8001f5a:	4311      	orrs	r1, r2
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	430b      	orrs	r3, r1
 8001f62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695a      	ldr	r2, [r3, #20]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 0201 	orr.w	r2, r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	000186a0 	.word	0x000186a0
 8001fbc:	001e847f 	.word	0x001e847f
 8001fc0:	003d08ff 	.word	0x003d08ff
 8001fc4:	431bde83 	.word	0x431bde83
 8001fc8:	10624dd3 	.word	0x10624dd3

08001fcc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af02      	add	r7, sp, #8
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	4608      	mov	r0, r1
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4603      	mov	r3, r0
 8001fdc:	817b      	strh	r3, [r7, #10]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	813b      	strh	r3, [r7, #8]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fe6:	f7fe fff9 	bl	8000fdc <HAL_GetTick>
 8001fea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b20      	cmp	r3, #32
 8001ff6:	f040 80d9 	bne.w	80021ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	2319      	movs	r3, #25
 8002000:	2201      	movs	r2, #1
 8002002:	496d      	ldr	r1, [pc, #436]	; (80021b8 <HAL_I2C_Mem_Write+0x1ec>)
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 fc8b 	bl	8002920 <I2C_WaitOnFlagUntilTimeout>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002010:	2302      	movs	r3, #2
 8002012:	e0cc      	b.n	80021ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800201a:	2b01      	cmp	r3, #1
 800201c:	d101      	bne.n	8002022 <HAL_I2C_Mem_Write+0x56>
 800201e:	2302      	movs	r3, #2
 8002020:	e0c5      	b.n	80021ae <HAL_I2C_Mem_Write+0x1e2>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b01      	cmp	r3, #1
 8002036:	d007      	beq.n	8002048 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0201 	orr.w	r2, r2, #1
 8002046:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002056:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2221      	movs	r2, #33	; 0x21
 800205c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2240      	movs	r2, #64	; 0x40
 8002064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6a3a      	ldr	r2, [r7, #32]
 8002072:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002078:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207e:	b29a      	uxth	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4a4d      	ldr	r2, [pc, #308]	; (80021bc <HAL_I2C_Mem_Write+0x1f0>)
 8002088:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800208a:	88f8      	ldrh	r0, [r7, #6]
 800208c:	893a      	ldrh	r2, [r7, #8]
 800208e:	8979      	ldrh	r1, [r7, #10]
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	9301      	str	r3, [sp, #4]
 8002094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	4603      	mov	r3, r0
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 fac2 	bl	8002624 <I2C_RequestMemoryWrite>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d052      	beq.n	800214c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e081      	b.n	80021ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f000 fd50 	bl	8002b54 <I2C_WaitOnTXEFlagUntilTimeout>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00d      	beq.n	80020d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d107      	bne.n	80020d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e06b      	b.n	80021ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	781a      	ldrb	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f0:	3b01      	subs	r3, #1
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	3b01      	subs	r3, #1
 8002100:	b29a      	uxth	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b04      	cmp	r3, #4
 8002112:	d11b      	bne.n	800214c <HAL_I2C_Mem_Write+0x180>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002118:	2b00      	cmp	r3, #0
 800211a:	d017      	beq.n	800214c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	781a      	ldrb	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	1c5a      	adds	r2, r3, #1
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002136:	3b01      	subs	r3, #1
 8002138:	b29a      	uxth	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002142:	b29b      	uxth	r3, r3
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1aa      	bne.n	80020aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 fd43 	bl	8002be4 <I2C_WaitOnBTFFlagUntilTimeout>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00d      	beq.n	8002180 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	2b04      	cmp	r3, #4
 800216a:	d107      	bne.n	800217c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800217a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e016      	b.n	80021ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800218e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2220      	movs	r2, #32
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	e000      	b.n	80021ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80021ac:	2302      	movs	r3, #2
  }
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	00100002 	.word	0x00100002
 80021bc:	ffff0000 	.word	0xffff0000

080021c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08c      	sub	sp, #48	; 0x30
 80021c4:	af02      	add	r7, sp, #8
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	4608      	mov	r0, r1
 80021ca:	4611      	mov	r1, r2
 80021cc:	461a      	mov	r2, r3
 80021ce:	4603      	mov	r3, r0
 80021d0:	817b      	strh	r3, [r7, #10]
 80021d2:	460b      	mov	r3, r1
 80021d4:	813b      	strh	r3, [r7, #8]
 80021d6:	4613      	mov	r3, r2
 80021d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021da:	f7fe feff 	bl	8000fdc <HAL_GetTick>
 80021de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b20      	cmp	r3, #32
 80021ea:	f040 8214 	bne.w	8002616 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	2319      	movs	r3, #25
 80021f4:	2201      	movs	r2, #1
 80021f6:	497b      	ldr	r1, [pc, #492]	; (80023e4 <HAL_I2C_Mem_Read+0x224>)
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 fb91 	bl	8002920 <I2C_WaitOnFlagUntilTimeout>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002204:	2302      	movs	r3, #2
 8002206:	e207      	b.n	8002618 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800220e:	2b01      	cmp	r3, #1
 8002210:	d101      	bne.n	8002216 <HAL_I2C_Mem_Read+0x56>
 8002212:	2302      	movs	r3, #2
 8002214:	e200      	b.n	8002618 <HAL_I2C_Mem_Read+0x458>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b01      	cmp	r3, #1
 800222a:	d007      	beq.n	800223c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0201 	orr.w	r2, r2, #1
 800223a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800224a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2222      	movs	r2, #34	; 0x22
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2240      	movs	r2, #64	; 0x40
 8002258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002266:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800226c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002272:	b29a      	uxth	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4a5b      	ldr	r2, [pc, #364]	; (80023e8 <HAL_I2C_Mem_Read+0x228>)
 800227c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800227e:	88f8      	ldrh	r0, [r7, #6]
 8002280:	893a      	ldrh	r2, [r7, #8]
 8002282:	8979      	ldrh	r1, [r7, #10]
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	9301      	str	r3, [sp, #4]
 8002288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	4603      	mov	r3, r0
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 fa5e 	bl	8002750 <I2C_RequestMemoryRead>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e1bc      	b.n	8002618 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d113      	bne.n	80022ce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022a6:	2300      	movs	r3, #0
 80022a8:	623b      	str	r3, [r7, #32]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	623b      	str	r3, [r7, #32]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	623b      	str	r3, [r7, #32]
 80022ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	e190      	b.n	80025f0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d11b      	bne.n	800230e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	61fb      	str	r3, [r7, #28]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	e170      	b.n	80025f0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002312:	2b02      	cmp	r3, #2
 8002314:	d11b      	bne.n	800234e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002324:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002334:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002336:	2300      	movs	r3, #0
 8002338:	61bb      	str	r3, [r7, #24]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	61bb      	str	r3, [r7, #24]
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	e150      	b.n	80025f0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002364:	e144      	b.n	80025f0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236a:	2b03      	cmp	r3, #3
 800236c:	f200 80f1 	bhi.w	8002552 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002374:	2b01      	cmp	r3, #1
 8002376:	d123      	bne.n	80023c0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800237a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 fc79 	bl	8002c74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e145      	b.n	8002618 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691a      	ldr	r2, [r3, #16]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023be:	e117      	b.n	80025f0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d14e      	bne.n	8002466 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ce:	2200      	movs	r2, #0
 80023d0:	4906      	ldr	r1, [pc, #24]	; (80023ec <HAL_I2C_Mem_Read+0x22c>)
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 faa4 	bl	8002920 <I2C_WaitOnFlagUntilTimeout>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d008      	beq.n	80023f0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e11a      	b.n	8002618 <HAL_I2C_Mem_Read+0x458>
 80023e2:	bf00      	nop
 80023e4:	00100002 	.word	0x00100002
 80023e8:	ffff0000 	.word	0xffff0000
 80023ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	691a      	ldr	r2, [r3, #16]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	1c5a      	adds	r2, r3, #1
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241c:	3b01      	subs	r3, #1
 800241e:	b29a      	uxth	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002428:	b29b      	uxth	r3, r3
 800242a:	3b01      	subs	r3, #1
 800242c:	b29a      	uxth	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244e:	3b01      	subs	r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245a:	b29b      	uxth	r3, r3
 800245c:	3b01      	subs	r3, #1
 800245e:	b29a      	uxth	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002464:	e0c4      	b.n	80025f0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800246c:	2200      	movs	r2, #0
 800246e:	496c      	ldr	r1, [pc, #432]	; (8002620 <HAL_I2C_Mem_Read+0x460>)
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 fa55 	bl	8002920 <I2C_WaitOnFlagUntilTimeout>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e0cb      	b.n	8002618 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800248e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691a      	ldr	r2, [r3, #16]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ac:	3b01      	subs	r3, #1
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c8:	2200      	movs	r2, #0
 80024ca:	4955      	ldr	r1, [pc, #340]	; (8002620 <HAL_I2C_Mem_Read+0x460>)
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 fa27 	bl	8002920 <I2C_WaitOnFlagUntilTimeout>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e09d      	b.n	8002618 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691a      	ldr	r2, [r3, #16]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002508:	3b01      	subs	r3, #1
 800250a:	b29a      	uxth	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002514:	b29b      	uxth	r3, r3
 8002516:	3b01      	subs	r3, #1
 8002518:	b29a      	uxth	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	691a      	ldr	r2, [r3, #16]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253a:	3b01      	subs	r3, #1
 800253c:	b29a      	uxth	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002546:	b29b      	uxth	r3, r3
 8002548:	3b01      	subs	r3, #1
 800254a:	b29a      	uxth	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002550:	e04e      	b.n	80025f0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002554:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 fb8c 	bl	8002c74 <I2C_WaitOnRXNEFlagUntilTimeout>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e058      	b.n	8002618 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	1c5a      	adds	r2, r3, #1
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002582:	3b01      	subs	r3, #1
 8002584:	b29a      	uxth	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258e:	b29b      	uxth	r3, r3
 8002590:	3b01      	subs	r3, #1
 8002592:	b29a      	uxth	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d124      	bne.n	80025f0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	d107      	bne.n	80025be <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025bc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	1c5a      	adds	r2, r3, #1
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025da:	3b01      	subs	r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f47f aeb6 	bne.w	8002366 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2220      	movs	r2, #32
 80025fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	e000      	b.n	8002618 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002616:	2302      	movs	r3, #2
  }
}
 8002618:	4618      	mov	r0, r3
 800261a:	3728      	adds	r7, #40	; 0x28
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	00010004 	.word	0x00010004

08002624 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af02      	add	r7, sp, #8
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	4608      	mov	r0, r1
 800262e:	4611      	mov	r1, r2
 8002630:	461a      	mov	r2, r3
 8002632:	4603      	mov	r3, r0
 8002634:	817b      	strh	r3, [r7, #10]
 8002636:	460b      	mov	r3, r1
 8002638:	813b      	strh	r3, [r7, #8]
 800263a:	4613      	mov	r3, r2
 800263c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800264c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	2200      	movs	r2, #0
 8002656:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 f960 	bl	8002920 <I2C_WaitOnFlagUntilTimeout>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00d      	beq.n	8002682 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002674:	d103      	bne.n	800267e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800267c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e05f      	b.n	8002742 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002682:	897b      	ldrh	r3, [r7, #10]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002690:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	6a3a      	ldr	r2, [r7, #32]
 8002696:	492d      	ldr	r1, [pc, #180]	; (800274c <I2C_RequestMemoryWrite+0x128>)
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 f9bb 	bl	8002a14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e04c      	b.n	8002742 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c0:	6a39      	ldr	r1, [r7, #32]
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 fa46 	bl	8002b54 <I2C_WaitOnTXEFlagUntilTimeout>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00d      	beq.n	80026ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d107      	bne.n	80026e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e02b      	b.n	8002742 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026ea:	88fb      	ldrh	r3, [r7, #6]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d105      	bne.n	80026fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026f0:	893b      	ldrh	r3, [r7, #8]
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	611a      	str	r2, [r3, #16]
 80026fa:	e021      	b.n	8002740 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026fc:	893b      	ldrh	r3, [r7, #8]
 80026fe:	0a1b      	lsrs	r3, r3, #8
 8002700:	b29b      	uxth	r3, r3
 8002702:	b2da      	uxtb	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800270a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800270c:	6a39      	ldr	r1, [r7, #32]
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 fa20 	bl	8002b54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00d      	beq.n	8002736 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	2b04      	cmp	r3, #4
 8002720:	d107      	bne.n	8002732 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002730:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e005      	b.n	8002742 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002736:	893b      	ldrh	r3, [r7, #8]
 8002738:	b2da      	uxtb	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3718      	adds	r7, #24
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	00010002 	.word	0x00010002

08002750 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b088      	sub	sp, #32
 8002754:	af02      	add	r7, sp, #8
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	4608      	mov	r0, r1
 800275a:	4611      	mov	r1, r2
 800275c:	461a      	mov	r2, r3
 800275e:	4603      	mov	r3, r0
 8002760:	817b      	strh	r3, [r7, #10]
 8002762:	460b      	mov	r3, r1
 8002764:	813b      	strh	r3, [r7, #8]
 8002766:	4613      	mov	r3, r2
 8002768:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002778:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002788:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	2200      	movs	r2, #0
 8002792:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 f8c2 	bl	8002920 <I2C_WaitOnFlagUntilTimeout>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00d      	beq.n	80027be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027b0:	d103      	bne.n	80027ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e0aa      	b.n	8002914 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027be:	897b      	ldrh	r3, [r7, #10]
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	461a      	mov	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	6a3a      	ldr	r2, [r7, #32]
 80027d2:	4952      	ldr	r1, [pc, #328]	; (800291c <I2C_RequestMemoryRead+0x1cc>)
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 f91d 	bl	8002a14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e097      	b.n	8002914 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fc:	6a39      	ldr	r1, [r7, #32]
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 f9a8 	bl	8002b54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00d      	beq.n	8002826 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	2b04      	cmp	r3, #4
 8002810:	d107      	bne.n	8002822 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002820:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e076      	b.n	8002914 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002826:	88fb      	ldrh	r3, [r7, #6]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d105      	bne.n	8002838 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800282c:	893b      	ldrh	r3, [r7, #8]
 800282e:	b2da      	uxtb	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	611a      	str	r2, [r3, #16]
 8002836:	e021      	b.n	800287c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002838:	893b      	ldrh	r3, [r7, #8]
 800283a:	0a1b      	lsrs	r3, r3, #8
 800283c:	b29b      	uxth	r3, r3
 800283e:	b2da      	uxtb	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002848:	6a39      	ldr	r1, [r7, #32]
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 f982 	bl	8002b54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00d      	beq.n	8002872 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	2b04      	cmp	r3, #4
 800285c:	d107      	bne.n	800286e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800286c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e050      	b.n	8002914 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002872:	893b      	ldrh	r3, [r7, #8]
 8002874:	b2da      	uxtb	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800287c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287e:	6a39      	ldr	r1, [r7, #32]
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 f967 	bl	8002b54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00d      	beq.n	80028a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	2b04      	cmp	r3, #4
 8002892:	d107      	bne.n	80028a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e035      	b.n	8002914 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	2200      	movs	r2, #0
 80028c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 f82b 	bl	8002920 <I2C_WaitOnFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00d      	beq.n	80028ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028de:	d103      	bne.n	80028e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e013      	b.n	8002914 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80028ec:	897b      	ldrh	r3, [r7, #10]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	6a3a      	ldr	r2, [r7, #32]
 8002900:	4906      	ldr	r1, [pc, #24]	; (800291c <I2C_RequestMemoryRead+0x1cc>)
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 f886 	bl	8002a14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	00010002 	.word	0x00010002

08002920 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	4613      	mov	r3, r2
 800292e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002930:	e048      	b.n	80029c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002938:	d044      	beq.n	80029c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800293a:	f7fe fb4f 	bl	8000fdc <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d302      	bcc.n	8002950 <I2C_WaitOnFlagUntilTimeout+0x30>
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d139      	bne.n	80029c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	0c1b      	lsrs	r3, r3, #16
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b01      	cmp	r3, #1
 8002958:	d10d      	bne.n	8002976 <I2C_WaitOnFlagUntilTimeout+0x56>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	43da      	mvns	r2, r3
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	4013      	ands	r3, r2
 8002966:	b29b      	uxth	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	bf0c      	ite	eq
 800296c:	2301      	moveq	r3, #1
 800296e:	2300      	movne	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	461a      	mov	r2, r3
 8002974:	e00c      	b.n	8002990 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	43da      	mvns	r2, r3
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	4013      	ands	r3, r2
 8002982:	b29b      	uxth	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	bf0c      	ite	eq
 8002988:	2301      	moveq	r3, #1
 800298a:	2300      	movne	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	461a      	mov	r2, r3
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	429a      	cmp	r2, r3
 8002994:	d116      	bne.n	80029c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2220      	movs	r2, #32
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	f043 0220 	orr.w	r2, r3, #32
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e023      	b.n	8002a0c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	0c1b      	lsrs	r3, r3, #16
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d10d      	bne.n	80029ea <I2C_WaitOnFlagUntilTimeout+0xca>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	43da      	mvns	r2, r3
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	4013      	ands	r3, r2
 80029da:	b29b      	uxth	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	bf0c      	ite	eq
 80029e0:	2301      	moveq	r3, #1
 80029e2:	2300      	movne	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	461a      	mov	r2, r3
 80029e8:	e00c      	b.n	8002a04 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	43da      	mvns	r2, r3
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	4013      	ands	r3, r2
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	bf0c      	ite	eq
 80029fc:	2301      	moveq	r3, #1
 80029fe:	2300      	movne	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	461a      	mov	r2, r3
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d093      	beq.n	8002932 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
 8002a20:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a22:	e071      	b.n	8002b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a32:	d123      	bne.n	8002a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a42:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2220      	movs	r2, #32
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	f043 0204 	orr.w	r2, r3, #4
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e067      	b.n	8002b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a82:	d041      	beq.n	8002b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a84:	f7fe faaa 	bl	8000fdc <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d302      	bcc.n	8002a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d136      	bne.n	8002b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	0c1b      	lsrs	r3, r3, #16
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d10c      	bne.n	8002abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	43da      	mvns	r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	bf14      	ite	ne
 8002ab6:	2301      	movne	r3, #1
 8002ab8:	2300      	moveq	r3, #0
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	e00b      	b.n	8002ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	43da      	mvns	r2, r3
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	bf14      	ite	ne
 8002ad0:	2301      	movne	r3, #1
 8002ad2:	2300      	moveq	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d016      	beq.n	8002b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	f043 0220 	orr.w	r2, r3, #32
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e021      	b.n	8002b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	0c1b      	lsrs	r3, r3, #16
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d10c      	bne.n	8002b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	43da      	mvns	r2, r3
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	bf14      	ite	ne
 8002b24:	2301      	movne	r3, #1
 8002b26:	2300      	moveq	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	e00b      	b.n	8002b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	43da      	mvns	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	4013      	ands	r3, r2
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	bf14      	ite	ne
 8002b3e:	2301      	movne	r3, #1
 8002b40:	2300      	moveq	r3, #0
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f47f af6d 	bne.w	8002a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b60:	e034      	b.n	8002bcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f000 f8e3 	bl	8002d2e <I2C_IsAcknowledgeFailed>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e034      	b.n	8002bdc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b78:	d028      	beq.n	8002bcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b7a:	f7fe fa2f 	bl	8000fdc <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d302      	bcc.n	8002b90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d11d      	bne.n	8002bcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9a:	2b80      	cmp	r3, #128	; 0x80
 8002b9c:	d016      	beq.n	8002bcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	f043 0220 	orr.w	r2, r3, #32
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e007      	b.n	8002bdc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd6:	2b80      	cmp	r3, #128	; 0x80
 8002bd8:	d1c3      	bne.n	8002b62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bf0:	e034      	b.n	8002c5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 f89b 	bl	8002d2e <I2C_IsAcknowledgeFailed>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e034      	b.n	8002c6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c08:	d028      	beq.n	8002c5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c0a:	f7fe f9e7 	bl	8000fdc <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d302      	bcc.n	8002c20 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d11d      	bne.n	8002c5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d016      	beq.n	8002c5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	f043 0220 	orr.w	r2, r3, #32
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e007      	b.n	8002c6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	d1c3      	bne.n	8002bf2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c80:	e049      	b.n	8002d16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	f003 0310 	and.w	r3, r3, #16
 8002c8c:	2b10      	cmp	r3, #16
 8002c8e:	d119      	bne.n	8002cc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f06f 0210 	mvn.w	r2, #16
 8002c98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e030      	b.n	8002d26 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc4:	f7fe f98a 	bl	8000fdc <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d302      	bcc.n	8002cda <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d11d      	bne.n	8002d16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce4:	2b40      	cmp	r3, #64	; 0x40
 8002ce6:	d016      	beq.n	8002d16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f043 0220 	orr.w	r2, r3, #32
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e007      	b.n	8002d26 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d20:	2b40      	cmp	r3, #64	; 0x40
 8002d22:	d1ae      	bne.n	8002c82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d44:	d11b      	bne.n	8002d7e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d4e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	f043 0204 	orr.w	r2, r3, #4
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b20      	cmp	r3, #32
 8002da0:	d129      	bne.n	8002df6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2224      	movs	r2, #36	; 0x24
 8002da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0201 	bic.w	r2, r2, #1
 8002db8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0210 	bic.w	r2, r2, #16
 8002dc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f042 0201 	orr.w	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	e000      	b.n	8002df8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002df6:	2302      	movs	r3, #2
  }
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b20      	cmp	r3, #32
 8002e1c:	d12a      	bne.n	8002e74 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2224      	movs	r2, #36	; 0x24
 8002e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0201 	bic.w	r2, r2, #1
 8002e34:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002e3e:	89fb      	ldrh	r3, [r7, #14]
 8002e40:	f023 030f 	bic.w	r3, r3, #15
 8002e44:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	89fb      	ldrh	r3, [r7, #14]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	89fa      	ldrh	r2, [r7, #14]
 8002e56:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e70:	2300      	movs	r3, #0
 8002e72:	e000      	b.n	8002e76 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002e74:	2302      	movs	r3, #2
  }
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
	...

08002e84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e267      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d075      	beq.n	8002f8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ea2:	4b88      	ldr	r3, [pc, #544]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 030c 	and.w	r3, r3, #12
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d00c      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eae:	4b85      	ldr	r3, [pc, #532]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d112      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eba:	4b82      	ldr	r3, [pc, #520]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ec6:	d10b      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec8:	4b7e      	ldr	r3, [pc, #504]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d05b      	beq.n	8002f8c <HAL_RCC_OscConfig+0x108>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d157      	bne.n	8002f8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e242      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee8:	d106      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x74>
 8002eea:	4b76      	ldr	r3, [pc, #472]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a75      	ldr	r2, [pc, #468]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	e01d      	b.n	8002f34 <HAL_RCC_OscConfig+0xb0>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f00:	d10c      	bne.n	8002f1c <HAL_RCC_OscConfig+0x98>
 8002f02:	4b70      	ldr	r3, [pc, #448]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a6f      	ldr	r2, [pc, #444]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	4b6d      	ldr	r3, [pc, #436]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a6c      	ldr	r2, [pc, #432]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	e00b      	b.n	8002f34 <HAL_RCC_OscConfig+0xb0>
 8002f1c:	4b69      	ldr	r3, [pc, #420]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a68      	ldr	r2, [pc, #416]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f26:	6013      	str	r3, [r2, #0]
 8002f28:	4b66      	ldr	r3, [pc, #408]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a65      	ldr	r2, [pc, #404]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d013      	beq.n	8002f64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3c:	f7fe f84e 	bl	8000fdc <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f44:	f7fe f84a 	bl	8000fdc <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b64      	cmp	r3, #100	; 0x64
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e207      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f56:	4b5b      	ldr	r3, [pc, #364]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCC_OscConfig+0xc0>
 8002f62:	e014      	b.n	8002f8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f64:	f7fe f83a 	bl	8000fdc <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f6c:	f7fe f836 	bl	8000fdc <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b64      	cmp	r3, #100	; 0x64
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e1f3      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7e:	4b51      	ldr	r3, [pc, #324]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0xe8>
 8002f8a:	e000      	b.n	8002f8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d063      	beq.n	8003062 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f9a:	4b4a      	ldr	r3, [pc, #296]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00b      	beq.n	8002fbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fa6:	4b47      	ldr	r3, [pc, #284]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d11c      	bne.n	8002fec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fb2:	4b44      	ldr	r3, [pc, #272]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d116      	bne.n	8002fec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fbe:	4b41      	ldr	r3, [pc, #260]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d005      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x152>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d001      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e1c7      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd6:	4b3b      	ldr	r3, [pc, #236]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4937      	ldr	r1, [pc, #220]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fea:	e03a      	b.n	8003062 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d020      	beq.n	8003036 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ff4:	4b34      	ldr	r3, [pc, #208]	; (80030c8 <HAL_RCC_OscConfig+0x244>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffa:	f7fd ffef 	bl	8000fdc <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003002:	f7fd ffeb 	bl	8000fdc <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e1a8      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003014:	4b2b      	ldr	r3, [pc, #172]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0f0      	beq.n	8003002 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003020:	4b28      	ldr	r3, [pc, #160]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	4925      	ldr	r1, [pc, #148]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8003030:	4313      	orrs	r3, r2
 8003032:	600b      	str	r3, [r1, #0]
 8003034:	e015      	b.n	8003062 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003036:	4b24      	ldr	r3, [pc, #144]	; (80030c8 <HAL_RCC_OscConfig+0x244>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303c:	f7fd ffce 	bl	8000fdc <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003044:	f7fd ffca 	bl	8000fdc <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e187      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003056:	4b1b      	ldr	r3, [pc, #108]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b00      	cmp	r3, #0
 800306c:	d036      	beq.n	80030dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d016      	beq.n	80030a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003076:	4b15      	ldr	r3, [pc, #84]	; (80030cc <HAL_RCC_OscConfig+0x248>)
 8003078:	2201      	movs	r2, #1
 800307a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307c:	f7fd ffae 	bl	8000fdc <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003084:	f7fd ffaa 	bl	8000fdc <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e167      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003096:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <HAL_RCC_OscConfig+0x240>)
 8003098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0f0      	beq.n	8003084 <HAL_RCC_OscConfig+0x200>
 80030a2:	e01b      	b.n	80030dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a4:	4b09      	ldr	r3, [pc, #36]	; (80030cc <HAL_RCC_OscConfig+0x248>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030aa:	f7fd ff97 	bl	8000fdc <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b0:	e00e      	b.n	80030d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030b2:	f7fd ff93 	bl	8000fdc <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d907      	bls.n	80030d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e150      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
 80030c4:	40023800 	.word	0x40023800
 80030c8:	42470000 	.word	0x42470000
 80030cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d0:	4b88      	ldr	r3, [pc, #544]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 80030d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1ea      	bne.n	80030b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 8097 	beq.w	8003218 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ea:	2300      	movs	r3, #0
 80030ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ee:	4b81      	ldr	r3, [pc, #516]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10f      	bne.n	800311a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	4b7d      	ldr	r3, [pc, #500]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	4a7c      	ldr	r2, [pc, #496]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 8003104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003108:	6413      	str	r3, [r2, #64]	; 0x40
 800310a:	4b7a      	ldr	r3, [pc, #488]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003112:	60bb      	str	r3, [r7, #8]
 8003114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003116:	2301      	movs	r3, #1
 8003118:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311a:	4b77      	ldr	r3, [pc, #476]	; (80032f8 <HAL_RCC_OscConfig+0x474>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003122:	2b00      	cmp	r3, #0
 8003124:	d118      	bne.n	8003158 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003126:	4b74      	ldr	r3, [pc, #464]	; (80032f8 <HAL_RCC_OscConfig+0x474>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a73      	ldr	r2, [pc, #460]	; (80032f8 <HAL_RCC_OscConfig+0x474>)
 800312c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003130:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003132:	f7fd ff53 	bl	8000fdc <HAL_GetTick>
 8003136:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800313a:	f7fd ff4f 	bl	8000fdc <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e10c      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314c:	4b6a      	ldr	r3, [pc, #424]	; (80032f8 <HAL_RCC_OscConfig+0x474>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0f0      	beq.n	800313a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d106      	bne.n	800316e <HAL_RCC_OscConfig+0x2ea>
 8003160:	4b64      	ldr	r3, [pc, #400]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 8003162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003164:	4a63      	ldr	r2, [pc, #396]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 8003166:	f043 0301 	orr.w	r3, r3, #1
 800316a:	6713      	str	r3, [r2, #112]	; 0x70
 800316c:	e01c      	b.n	80031a8 <HAL_RCC_OscConfig+0x324>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	2b05      	cmp	r3, #5
 8003174:	d10c      	bne.n	8003190 <HAL_RCC_OscConfig+0x30c>
 8003176:	4b5f      	ldr	r3, [pc, #380]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 8003178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317a:	4a5e      	ldr	r2, [pc, #376]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 800317c:	f043 0304 	orr.w	r3, r3, #4
 8003180:	6713      	str	r3, [r2, #112]	; 0x70
 8003182:	4b5c      	ldr	r3, [pc, #368]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 8003184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003186:	4a5b      	ldr	r2, [pc, #364]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	6713      	str	r3, [r2, #112]	; 0x70
 800318e:	e00b      	b.n	80031a8 <HAL_RCC_OscConfig+0x324>
 8003190:	4b58      	ldr	r3, [pc, #352]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 8003192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003194:	4a57      	ldr	r2, [pc, #348]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 8003196:	f023 0301 	bic.w	r3, r3, #1
 800319a:	6713      	str	r3, [r2, #112]	; 0x70
 800319c:	4b55      	ldr	r3, [pc, #340]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 800319e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a0:	4a54      	ldr	r2, [pc, #336]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 80031a2:	f023 0304 	bic.w	r3, r3, #4
 80031a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d015      	beq.n	80031dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b0:	f7fd ff14 	bl	8000fdc <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b6:	e00a      	b.n	80031ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b8:	f7fd ff10 	bl	8000fdc <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e0cb      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ce:	4b49      	ldr	r3, [pc, #292]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0ee      	beq.n	80031b8 <HAL_RCC_OscConfig+0x334>
 80031da:	e014      	b.n	8003206 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031dc:	f7fd fefe 	bl	8000fdc <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e2:	e00a      	b.n	80031fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e4:	f7fd fefa 	bl	8000fdc <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e0b5      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031fa:	4b3e      	ldr	r3, [pc, #248]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 80031fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1ee      	bne.n	80031e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003206:	7dfb      	ldrb	r3, [r7, #23]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d105      	bne.n	8003218 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800320c:	4b39      	ldr	r3, [pc, #228]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	4a38      	ldr	r2, [pc, #224]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 8003212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003216:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 80a1 	beq.w	8003364 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003222:	4b34      	ldr	r3, [pc, #208]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 030c 	and.w	r3, r3, #12
 800322a:	2b08      	cmp	r3, #8
 800322c:	d05c      	beq.n	80032e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	2b02      	cmp	r3, #2
 8003234:	d141      	bne.n	80032ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003236:	4b31      	ldr	r3, [pc, #196]	; (80032fc <HAL_RCC_OscConfig+0x478>)
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323c:	f7fd fece 	bl	8000fdc <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003244:	f7fd feca 	bl	8000fdc <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e087      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003256:	4b27      	ldr	r3, [pc, #156]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f0      	bne.n	8003244 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69da      	ldr	r2, [r3, #28]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	019b      	lsls	r3, r3, #6
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003278:	085b      	lsrs	r3, r3, #1
 800327a:	3b01      	subs	r3, #1
 800327c:	041b      	lsls	r3, r3, #16
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003284:	061b      	lsls	r3, r3, #24
 8003286:	491b      	ldr	r1, [pc, #108]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 8003288:	4313      	orrs	r3, r2
 800328a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800328c:	4b1b      	ldr	r3, [pc, #108]	; (80032fc <HAL_RCC_OscConfig+0x478>)
 800328e:	2201      	movs	r2, #1
 8003290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003292:	f7fd fea3 	bl	8000fdc <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800329a:	f7fd fe9f 	bl	8000fdc <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e05c      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ac:	4b11      	ldr	r3, [pc, #68]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0f0      	beq.n	800329a <HAL_RCC_OscConfig+0x416>
 80032b8:	e054      	b.n	8003364 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ba:	4b10      	ldr	r3, [pc, #64]	; (80032fc <HAL_RCC_OscConfig+0x478>)
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c0:	f7fd fe8c 	bl	8000fdc <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c8:	f7fd fe88 	bl	8000fdc <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e045      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032da:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <HAL_RCC_OscConfig+0x470>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x444>
 80032e6:	e03d      	b.n	8003364 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d107      	bne.n	8003300 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e038      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
 80032f4:	40023800 	.word	0x40023800
 80032f8:	40007000 	.word	0x40007000
 80032fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003300:	4b1b      	ldr	r3, [pc, #108]	; (8003370 <HAL_RCC_OscConfig+0x4ec>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d028      	beq.n	8003360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003318:	429a      	cmp	r2, r3
 800331a:	d121      	bne.n	8003360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003326:	429a      	cmp	r2, r3
 8003328:	d11a      	bne.n	8003360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003330:	4013      	ands	r3, r2
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003336:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003338:	4293      	cmp	r3, r2
 800333a:	d111      	bne.n	8003360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003346:	085b      	lsrs	r3, r3, #1
 8003348:	3b01      	subs	r3, #1
 800334a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800334c:	429a      	cmp	r2, r3
 800334e:	d107      	bne.n	8003360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800335c:	429a      	cmp	r2, r3
 800335e:	d001      	beq.n	8003364 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40023800 	.word	0x40023800

08003374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e0cc      	b.n	8003522 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003388:	4b68      	ldr	r3, [pc, #416]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d90c      	bls.n	80033b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003396:	4b65      	ldr	r3, [pc, #404]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800339e:	4b63      	ldr	r3, [pc, #396]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d001      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e0b8      	b.n	8003522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d020      	beq.n	80033fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d005      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033c8:	4b59      	ldr	r3, [pc, #356]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	4a58      	ldr	r2, [pc, #352]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0308 	and.w	r3, r3, #8
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d005      	beq.n	80033ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033e0:	4b53      	ldr	r3, [pc, #332]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	4a52      	ldr	r2, [pc, #328]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033ec:	4b50      	ldr	r3, [pc, #320]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	494d      	ldr	r1, [pc, #308]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d044      	beq.n	8003494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d107      	bne.n	8003422 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003412:	4b47      	ldr	r3, [pc, #284]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d119      	bne.n	8003452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e07f      	b.n	8003522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d003      	beq.n	8003432 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800342e:	2b03      	cmp	r3, #3
 8003430:	d107      	bne.n	8003442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003432:	4b3f      	ldr	r3, [pc, #252]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d109      	bne.n	8003452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e06f      	b.n	8003522 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003442:	4b3b      	ldr	r3, [pc, #236]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e067      	b.n	8003522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003452:	4b37      	ldr	r3, [pc, #220]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f023 0203 	bic.w	r2, r3, #3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	4934      	ldr	r1, [pc, #208]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 8003460:	4313      	orrs	r3, r2
 8003462:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003464:	f7fd fdba 	bl	8000fdc <HAL_GetTick>
 8003468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346a:	e00a      	b.n	8003482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800346c:	f7fd fdb6 	bl	8000fdc <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	f241 3288 	movw	r2, #5000	; 0x1388
 800347a:	4293      	cmp	r3, r2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e04f      	b.n	8003522 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003482:	4b2b      	ldr	r3, [pc, #172]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 020c 	and.w	r2, r3, #12
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	429a      	cmp	r2, r3
 8003492:	d1eb      	bne.n	800346c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003494:	4b25      	ldr	r3, [pc, #148]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 030f 	and.w	r3, r3, #15
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d20c      	bcs.n	80034bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a2:	4b22      	ldr	r3, [pc, #136]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034aa:	4b20      	ldr	r3, [pc, #128]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d001      	beq.n	80034bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e032      	b.n	8003522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034c8:	4b19      	ldr	r3, [pc, #100]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	4916      	ldr	r1, [pc, #88]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d009      	beq.n	80034fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034e6:	4b12      	ldr	r3, [pc, #72]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	490e      	ldr	r1, [pc, #56]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034fa:	f000 f821 	bl	8003540 <HAL_RCC_GetSysClockFreq>
 80034fe:	4602      	mov	r2, r0
 8003500:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	091b      	lsrs	r3, r3, #4
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	490a      	ldr	r1, [pc, #40]	; (8003534 <HAL_RCC_ClockConfig+0x1c0>)
 800350c:	5ccb      	ldrb	r3, [r1, r3]
 800350e:	fa22 f303 	lsr.w	r3, r2, r3
 8003512:	4a09      	ldr	r2, [pc, #36]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 8003514:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003516:	4b09      	ldr	r3, [pc, #36]	; (800353c <HAL_RCC_ClockConfig+0x1c8>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f7fd fd1a 	bl	8000f54 <HAL_InitTick>

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40023c00 	.word	0x40023c00
 8003530:	40023800 	.word	0x40023800
 8003534:	0800636c 	.word	0x0800636c
 8003538:	20000000 	.word	0x20000000
 800353c:	20000010 	.word	0x20000010

08003540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003544:	b094      	sub	sp, #80	; 0x50
 8003546:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	647b      	str	r3, [r7, #68]	; 0x44
 800354c:	2300      	movs	r3, #0
 800354e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003550:	2300      	movs	r3, #0
 8003552:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003558:	4b79      	ldr	r3, [pc, #484]	; (8003740 <HAL_RCC_GetSysClockFreq+0x200>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 030c 	and.w	r3, r3, #12
 8003560:	2b08      	cmp	r3, #8
 8003562:	d00d      	beq.n	8003580 <HAL_RCC_GetSysClockFreq+0x40>
 8003564:	2b08      	cmp	r3, #8
 8003566:	f200 80e1 	bhi.w	800372c <HAL_RCC_GetSysClockFreq+0x1ec>
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <HAL_RCC_GetSysClockFreq+0x34>
 800356e:	2b04      	cmp	r3, #4
 8003570:	d003      	beq.n	800357a <HAL_RCC_GetSysClockFreq+0x3a>
 8003572:	e0db      	b.n	800372c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003574:	4b73      	ldr	r3, [pc, #460]	; (8003744 <HAL_RCC_GetSysClockFreq+0x204>)
 8003576:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003578:	e0db      	b.n	8003732 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800357a:	4b73      	ldr	r3, [pc, #460]	; (8003748 <HAL_RCC_GetSysClockFreq+0x208>)
 800357c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800357e:	e0d8      	b.n	8003732 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003580:	4b6f      	ldr	r3, [pc, #444]	; (8003740 <HAL_RCC_GetSysClockFreq+0x200>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003588:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800358a:	4b6d      	ldr	r3, [pc, #436]	; (8003740 <HAL_RCC_GetSysClockFreq+0x200>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d063      	beq.n	800365e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003596:	4b6a      	ldr	r3, [pc, #424]	; (8003740 <HAL_RCC_GetSysClockFreq+0x200>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	099b      	lsrs	r3, r3, #6
 800359c:	2200      	movs	r2, #0
 800359e:	63bb      	str	r3, [r7, #56]	; 0x38
 80035a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035a8:	633b      	str	r3, [r7, #48]	; 0x30
 80035aa:	2300      	movs	r3, #0
 80035ac:	637b      	str	r3, [r7, #52]	; 0x34
 80035ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035b2:	4622      	mov	r2, r4
 80035b4:	462b      	mov	r3, r5
 80035b6:	f04f 0000 	mov.w	r0, #0
 80035ba:	f04f 0100 	mov.w	r1, #0
 80035be:	0159      	lsls	r1, r3, #5
 80035c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035c4:	0150      	lsls	r0, r2, #5
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	4621      	mov	r1, r4
 80035cc:	1a51      	subs	r1, r2, r1
 80035ce:	6139      	str	r1, [r7, #16]
 80035d0:	4629      	mov	r1, r5
 80035d2:	eb63 0301 	sbc.w	r3, r3, r1
 80035d6:	617b      	str	r3, [r7, #20]
 80035d8:	f04f 0200 	mov.w	r2, #0
 80035dc:	f04f 0300 	mov.w	r3, #0
 80035e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035e4:	4659      	mov	r1, fp
 80035e6:	018b      	lsls	r3, r1, #6
 80035e8:	4651      	mov	r1, sl
 80035ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035ee:	4651      	mov	r1, sl
 80035f0:	018a      	lsls	r2, r1, #6
 80035f2:	4651      	mov	r1, sl
 80035f4:	ebb2 0801 	subs.w	r8, r2, r1
 80035f8:	4659      	mov	r1, fp
 80035fa:	eb63 0901 	sbc.w	r9, r3, r1
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	f04f 0300 	mov.w	r3, #0
 8003606:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800360a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800360e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003612:	4690      	mov	r8, r2
 8003614:	4699      	mov	r9, r3
 8003616:	4623      	mov	r3, r4
 8003618:	eb18 0303 	adds.w	r3, r8, r3
 800361c:	60bb      	str	r3, [r7, #8]
 800361e:	462b      	mov	r3, r5
 8003620:	eb49 0303 	adc.w	r3, r9, r3
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	f04f 0300 	mov.w	r3, #0
 800362e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003632:	4629      	mov	r1, r5
 8003634:	024b      	lsls	r3, r1, #9
 8003636:	4621      	mov	r1, r4
 8003638:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800363c:	4621      	mov	r1, r4
 800363e:	024a      	lsls	r2, r1, #9
 8003640:	4610      	mov	r0, r2
 8003642:	4619      	mov	r1, r3
 8003644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003646:	2200      	movs	r2, #0
 8003648:	62bb      	str	r3, [r7, #40]	; 0x28
 800364a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800364c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003650:	f7fc fdd4 	bl	80001fc <__aeabi_uldivmod>
 8003654:	4602      	mov	r2, r0
 8003656:	460b      	mov	r3, r1
 8003658:	4613      	mov	r3, r2
 800365a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800365c:	e058      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800365e:	4b38      	ldr	r3, [pc, #224]	; (8003740 <HAL_RCC_GetSysClockFreq+0x200>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	099b      	lsrs	r3, r3, #6
 8003664:	2200      	movs	r2, #0
 8003666:	4618      	mov	r0, r3
 8003668:	4611      	mov	r1, r2
 800366a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800366e:	623b      	str	r3, [r7, #32]
 8003670:	2300      	movs	r3, #0
 8003672:	627b      	str	r3, [r7, #36]	; 0x24
 8003674:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003678:	4642      	mov	r2, r8
 800367a:	464b      	mov	r3, r9
 800367c:	f04f 0000 	mov.w	r0, #0
 8003680:	f04f 0100 	mov.w	r1, #0
 8003684:	0159      	lsls	r1, r3, #5
 8003686:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800368a:	0150      	lsls	r0, r2, #5
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	4641      	mov	r1, r8
 8003692:	ebb2 0a01 	subs.w	sl, r2, r1
 8003696:	4649      	mov	r1, r9
 8003698:	eb63 0b01 	sbc.w	fp, r3, r1
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036b0:	ebb2 040a 	subs.w	r4, r2, sl
 80036b4:	eb63 050b 	sbc.w	r5, r3, fp
 80036b8:	f04f 0200 	mov.w	r2, #0
 80036bc:	f04f 0300 	mov.w	r3, #0
 80036c0:	00eb      	lsls	r3, r5, #3
 80036c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036c6:	00e2      	lsls	r2, r4, #3
 80036c8:	4614      	mov	r4, r2
 80036ca:	461d      	mov	r5, r3
 80036cc:	4643      	mov	r3, r8
 80036ce:	18e3      	adds	r3, r4, r3
 80036d0:	603b      	str	r3, [r7, #0]
 80036d2:	464b      	mov	r3, r9
 80036d4:	eb45 0303 	adc.w	r3, r5, r3
 80036d8:	607b      	str	r3, [r7, #4]
 80036da:	f04f 0200 	mov.w	r2, #0
 80036de:	f04f 0300 	mov.w	r3, #0
 80036e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036e6:	4629      	mov	r1, r5
 80036e8:	028b      	lsls	r3, r1, #10
 80036ea:	4621      	mov	r1, r4
 80036ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036f0:	4621      	mov	r1, r4
 80036f2:	028a      	lsls	r2, r1, #10
 80036f4:	4610      	mov	r0, r2
 80036f6:	4619      	mov	r1, r3
 80036f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036fa:	2200      	movs	r2, #0
 80036fc:	61bb      	str	r3, [r7, #24]
 80036fe:	61fa      	str	r2, [r7, #28]
 8003700:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003704:	f7fc fd7a 	bl	80001fc <__aeabi_uldivmod>
 8003708:	4602      	mov	r2, r0
 800370a:	460b      	mov	r3, r1
 800370c:	4613      	mov	r3, r2
 800370e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003710:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <HAL_RCC_GetSysClockFreq+0x200>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	0c1b      	lsrs	r3, r3, #16
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	3301      	adds	r3, #1
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003720:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003724:	fbb2 f3f3 	udiv	r3, r2, r3
 8003728:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800372a:	e002      	b.n	8003732 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800372c:	4b05      	ldr	r3, [pc, #20]	; (8003744 <HAL_RCC_GetSysClockFreq+0x204>)
 800372e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003730:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003734:	4618      	mov	r0, r3
 8003736:	3750      	adds	r7, #80	; 0x50
 8003738:	46bd      	mov	sp, r7
 800373a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800373e:	bf00      	nop
 8003740:	40023800 	.word	0x40023800
 8003744:	00f42400 	.word	0x00f42400
 8003748:	007a1200 	.word	0x007a1200

0800374c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003750:	4b03      	ldr	r3, [pc, #12]	; (8003760 <HAL_RCC_GetHCLKFreq+0x14>)
 8003752:	681b      	ldr	r3, [r3, #0]
}
 8003754:	4618      	mov	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	20000000 	.word	0x20000000

08003764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003768:	f7ff fff0 	bl	800374c <HAL_RCC_GetHCLKFreq>
 800376c:	4602      	mov	r2, r0
 800376e:	4b05      	ldr	r3, [pc, #20]	; (8003784 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	0a9b      	lsrs	r3, r3, #10
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	4903      	ldr	r1, [pc, #12]	; (8003788 <HAL_RCC_GetPCLK1Freq+0x24>)
 800377a:	5ccb      	ldrb	r3, [r1, r3]
 800377c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003780:	4618      	mov	r0, r3
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40023800 	.word	0x40023800
 8003788:	0800637c 	.word	0x0800637c

0800378c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003790:	f7ff ffdc 	bl	800374c <HAL_RCC_GetHCLKFreq>
 8003794:	4602      	mov	r2, r0
 8003796:	4b05      	ldr	r3, [pc, #20]	; (80037ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	0b5b      	lsrs	r3, r3, #13
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	4903      	ldr	r1, [pc, #12]	; (80037b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037a2:	5ccb      	ldrb	r3, [r1, r3]
 80037a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40023800 	.word	0x40023800
 80037b0:	0800637c 	.word	0x0800637c

080037b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e041      	b.n	800384a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7fd f9b4 	bl	8000b48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3304      	adds	r3, #4
 80037f0:	4619      	mov	r1, r3
 80037f2:	4610      	mov	r0, r2
 80037f4:	f000 fd8e 	bl	8004314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b082      	sub	sp, #8
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e041      	b.n	80038e8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	d106      	bne.n	800387e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 f839 	bl	80038f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2202      	movs	r2, #2
 8003882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3304      	adds	r3, #4
 800388e:	4619      	mov	r1, r3
 8003890:	4610      	mov	r0, r2
 8003892:	f000 fd3f 	bl	8004314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
 8003910:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d109      	bne.n	8003930 <HAL_TIM_PWM_Start_DMA+0x2c>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	bf0c      	ite	eq
 8003928:	2301      	moveq	r3, #1
 800392a:	2300      	movne	r3, #0
 800392c:	b2db      	uxtb	r3, r3
 800392e:	e022      	b.n	8003976 <HAL_TIM_PWM_Start_DMA+0x72>
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	2b04      	cmp	r3, #4
 8003934:	d109      	bne.n	800394a <HAL_TIM_PWM_Start_DMA+0x46>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	bf0c      	ite	eq
 8003942:	2301      	moveq	r3, #1
 8003944:	2300      	movne	r3, #0
 8003946:	b2db      	uxtb	r3, r3
 8003948:	e015      	b.n	8003976 <HAL_TIM_PWM_Start_DMA+0x72>
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2b08      	cmp	r3, #8
 800394e:	d109      	bne.n	8003964 <HAL_TIM_PWM_Start_DMA+0x60>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	bf0c      	ite	eq
 800395c:	2301      	moveq	r3, #1
 800395e:	2300      	movne	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	e008      	b.n	8003976 <HAL_TIM_PWM_Start_DMA+0x72>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	bf0c      	ite	eq
 8003970:	2301      	moveq	r3, #1
 8003972:	2300      	movne	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800397a:	2302      	movs	r3, #2
 800397c:	e171      	b.n	8003c62 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d109      	bne.n	8003998 <HAL_TIM_PWM_Start_DMA+0x94>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b01      	cmp	r3, #1
 800398e:	bf0c      	ite	eq
 8003990:	2301      	moveq	r3, #1
 8003992:	2300      	movne	r3, #0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	e022      	b.n	80039de <HAL_TIM_PWM_Start_DMA+0xda>
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2b04      	cmp	r3, #4
 800399c:	d109      	bne.n	80039b2 <HAL_TIM_PWM_Start_DMA+0xae>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	bf0c      	ite	eq
 80039aa:	2301      	moveq	r3, #1
 80039ac:	2300      	movne	r3, #0
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	e015      	b.n	80039de <HAL_TIM_PWM_Start_DMA+0xda>
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d109      	bne.n	80039cc <HAL_TIM_PWM_Start_DMA+0xc8>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	bf0c      	ite	eq
 80039c4:	2301      	moveq	r3, #1
 80039c6:	2300      	movne	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	e008      	b.n	80039de <HAL_TIM_PWM_Start_DMA+0xda>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	bf0c      	ite	eq
 80039d8:	2301      	moveq	r3, #1
 80039da:	2300      	movne	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d024      	beq.n	8003a2c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <HAL_TIM_PWM_Start_DMA+0xea>
 80039e8:	887b      	ldrh	r3, [r7, #2]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e137      	b.n	8003c62 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d104      	bne.n	8003a02 <HAL_TIM_PWM_Start_DMA+0xfe>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a00:	e016      	b.n	8003a30 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d104      	bne.n	8003a12 <HAL_TIM_PWM_Start_DMA+0x10e>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a10:	e00e      	b.n	8003a30 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	d104      	bne.n	8003a22 <HAL_TIM_PWM_Start_DMA+0x11e>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a20:	e006      	b.n	8003a30 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2202      	movs	r2, #2
 8003a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a2a:	e001      	b.n	8003a30 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e118      	b.n	8003c62 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	2b0c      	cmp	r3, #12
 8003a34:	f200 80ae 	bhi.w	8003b94 <HAL_TIM_PWM_Start_DMA+0x290>
 8003a38:	a201      	add	r2, pc, #4	; (adr r2, 8003a40 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8003a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3e:	bf00      	nop
 8003a40:	08003a75 	.word	0x08003a75
 8003a44:	08003b95 	.word	0x08003b95
 8003a48:	08003b95 	.word	0x08003b95
 8003a4c:	08003b95 	.word	0x08003b95
 8003a50:	08003abd 	.word	0x08003abd
 8003a54:	08003b95 	.word	0x08003b95
 8003a58:	08003b95 	.word	0x08003b95
 8003a5c:	08003b95 	.word	0x08003b95
 8003a60:	08003b05 	.word	0x08003b05
 8003a64:	08003b95 	.word	0x08003b95
 8003a68:	08003b95 	.word	0x08003b95
 8003a6c:	08003b95 	.word	0x08003b95
 8003a70:	08003b4d 	.word	0x08003b4d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	4a7c      	ldr	r2, [pc, #496]	; (8003c6c <HAL_TIM_PWM_Start_DMA+0x368>)
 8003a7a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	4a7b      	ldr	r2, [pc, #492]	; (8003c70 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003a82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	4a7a      	ldr	r2, [pc, #488]	; (8003c74 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003a8a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	3334      	adds	r3, #52	; 0x34
 8003a98:	461a      	mov	r2, r3
 8003a9a:	887b      	ldrh	r3, [r7, #2]
 8003a9c:	f7fd fc8e 	bl	80013bc <HAL_DMA_Start_IT>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e0db      	b.n	8003c62 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68da      	ldr	r2, [r3, #12]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ab8:	60da      	str	r2, [r3, #12]
      break;
 8003aba:	e06e      	b.n	8003b9a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac0:	4a6a      	ldr	r2, [pc, #424]	; (8003c6c <HAL_TIM_PWM_Start_DMA+0x368>)
 8003ac2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac8:	4a69      	ldr	r2, [pc, #420]	; (8003c70 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003aca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad0:	4a68      	ldr	r2, [pc, #416]	; (8003c74 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003ad2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3338      	adds	r3, #56	; 0x38
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	887b      	ldrh	r3, [r7, #2]
 8003ae4:	f7fd fc6a 	bl	80013bc <HAL_DMA_Start_IT>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e0b7      	b.n	8003c62 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b00:	60da      	str	r2, [r3, #12]
      break;
 8003b02:	e04a      	b.n	8003b9a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b08:	4a58      	ldr	r2, [pc, #352]	; (8003c6c <HAL_TIM_PWM_Start_DMA+0x368>)
 8003b0a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b10:	4a57      	ldr	r2, [pc, #348]	; (8003c70 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003b12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b18:	4a56      	ldr	r2, [pc, #344]	; (8003c74 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003b1a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	333c      	adds	r3, #60	; 0x3c
 8003b28:	461a      	mov	r2, r3
 8003b2a:	887b      	ldrh	r3, [r7, #2]
 8003b2c:	f7fd fc46 	bl	80013bc <HAL_DMA_Start_IT>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e093      	b.n	8003c62 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b48:	60da      	str	r2, [r3, #12]
      break;
 8003b4a:	e026      	b.n	8003b9a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b50:	4a46      	ldr	r2, [pc, #280]	; (8003c6c <HAL_TIM_PWM_Start_DMA+0x368>)
 8003b52:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b58:	4a45      	ldr	r2, [pc, #276]	; (8003c70 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003b5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b60:	4a44      	ldr	r2, [pc, #272]	; (8003c74 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003b62:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	3340      	adds	r3, #64	; 0x40
 8003b70:	461a      	mov	r2, r3
 8003b72:	887b      	ldrh	r3, [r7, #2]
 8003b74:	f7fd fc22 	bl	80013bc <HAL_DMA_Start_IT>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e06f      	b.n	8003c62 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68da      	ldr	r2, [r3, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b90:	60da      	str	r2, [r3, #12]
      break;
 8003b92:	e002      	b.n	8003b9a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	75fb      	strb	r3, [r7, #23]
      break;
 8003b98:	bf00      	nop
  }

  if (status == HAL_OK)
 8003b9a:	7dfb      	ldrb	r3, [r7, #23]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d15f      	bne.n	8003c60 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	68b9      	ldr	r1, [r7, #8]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 fea9 	bl	8004900 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a31      	ldr	r2, [pc, #196]	; (8003c78 <HAL_TIM_PWM_Start_DMA+0x374>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d004      	beq.n	8003bc2 <HAL_TIM_PWM_Start_DMA+0x2be>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a2f      	ldr	r2, [pc, #188]	; (8003c7c <HAL_TIM_PWM_Start_DMA+0x378>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d101      	bne.n	8003bc6 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e000      	b.n	8003bc8 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d007      	beq.n	8003bdc <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bda:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a25      	ldr	r2, [pc, #148]	; (8003c78 <HAL_TIM_PWM_Start_DMA+0x374>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d022      	beq.n	8003c2c <HAL_TIM_PWM_Start_DMA+0x328>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bee:	d01d      	beq.n	8003c2c <HAL_TIM_PWM_Start_DMA+0x328>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a22      	ldr	r2, [pc, #136]	; (8003c80 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d018      	beq.n	8003c2c <HAL_TIM_PWM_Start_DMA+0x328>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a21      	ldr	r2, [pc, #132]	; (8003c84 <HAL_TIM_PWM_Start_DMA+0x380>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d013      	beq.n	8003c2c <HAL_TIM_PWM_Start_DMA+0x328>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a1f      	ldr	r2, [pc, #124]	; (8003c88 <HAL_TIM_PWM_Start_DMA+0x384>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00e      	beq.n	8003c2c <HAL_TIM_PWM_Start_DMA+0x328>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a1a      	ldr	r2, [pc, #104]	; (8003c7c <HAL_TIM_PWM_Start_DMA+0x378>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d009      	beq.n	8003c2c <HAL_TIM_PWM_Start_DMA+0x328>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a1b      	ldr	r2, [pc, #108]	; (8003c8c <HAL_TIM_PWM_Start_DMA+0x388>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d004      	beq.n	8003c2c <HAL_TIM_PWM_Start_DMA+0x328>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a1a      	ldr	r2, [pc, #104]	; (8003c90 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d111      	bne.n	8003c50 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	2b06      	cmp	r3, #6
 8003c3c:	d010      	beq.n	8003c60 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f042 0201 	orr.w	r2, r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c4e:	e007      	b.n	8003c60 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0201 	orr.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	08004205 	.word	0x08004205
 8003c70:	080042ad 	.word	0x080042ad
 8003c74:	08004173 	.word	0x08004173
 8003c78:	40010000 	.word	0x40010000
 8003c7c:	40010400 	.word	0x40010400
 8003c80:	40000400 	.word	0x40000400
 8003c84:	40000800 	.word	0x40000800
 8003c88:	40000c00 	.word	0x40000c00
 8003c8c:	40014000 	.word	0x40014000
 8003c90:	40001800 	.word	0x40001800

08003c94 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b0c      	cmp	r3, #12
 8003ca6:	d855      	bhi.n	8003d54 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003ca8:	a201      	add	r2, pc, #4	; (adr r2, 8003cb0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cae:	bf00      	nop
 8003cb0:	08003ce5 	.word	0x08003ce5
 8003cb4:	08003d55 	.word	0x08003d55
 8003cb8:	08003d55 	.word	0x08003d55
 8003cbc:	08003d55 	.word	0x08003d55
 8003cc0:	08003d01 	.word	0x08003d01
 8003cc4:	08003d55 	.word	0x08003d55
 8003cc8:	08003d55 	.word	0x08003d55
 8003ccc:	08003d55 	.word	0x08003d55
 8003cd0:	08003d1d 	.word	0x08003d1d
 8003cd4:	08003d55 	.word	0x08003d55
 8003cd8:	08003d55 	.word	0x08003d55
 8003cdc:	08003d55 	.word	0x08003d55
 8003ce0:	08003d39 	.word	0x08003d39
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003cf2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fd fbb7 	bl	800146c <HAL_DMA_Abort_IT>
      break;
 8003cfe:	e02c      	b.n	8003d5a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d0e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fd fba9 	bl	800146c <HAL_DMA_Abort_IT>
      break;
 8003d1a:	e01e      	b.n	8003d5a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d2a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fd fb9b 	bl	800146c <HAL_DMA_Abort_IT>
      break;
 8003d36:	e010      	b.n	8003d5a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d46:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7fd fb8d 	bl	800146c <HAL_DMA_Abort_IT>
      break;
 8003d52:	e002      	b.n	8003d5a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	73fb      	strb	r3, [r7, #15]
      break;
 8003d58:	bf00      	nop
  }

  if (status == HAL_OK)
 8003d5a:	7bfb      	ldrb	r3, [r7, #15]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d161      	bne.n	8003e24 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2200      	movs	r2, #0
 8003d66:	6839      	ldr	r1, [r7, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fdc9 	bl	8004900 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a2f      	ldr	r2, [pc, #188]	; (8003e30 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d004      	beq.n	8003d82 <HAL_TIM_PWM_Stop_DMA+0xee>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a2d      	ldr	r2, [pc, #180]	; (8003e34 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d101      	bne.n	8003d86 <HAL_TIM_PWM_Stop_DMA+0xf2>
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8003d86:	2300      	movs	r3, #0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d017      	beq.n	8003dbc <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6a1a      	ldr	r2, [r3, #32]
 8003d92:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d96:	4013      	ands	r3, r2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10f      	bne.n	8003dbc <HAL_TIM_PWM_Stop_DMA+0x128>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6a1a      	ldr	r2, [r3, #32]
 8003da2:	f240 4344 	movw	r3, #1092	; 0x444
 8003da6:	4013      	ands	r3, r2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d107      	bne.n	8003dbc <HAL_TIM_PWM_Stop_DMA+0x128>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dba:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6a1a      	ldr	r2, [r3, #32]
 8003dc2:	f241 1311 	movw	r3, #4369	; 0x1111
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10f      	bne.n	8003dec <HAL_TIM_PWM_Stop_DMA+0x158>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6a1a      	ldr	r2, [r3, #32]
 8003dd2:	f240 4344 	movw	r3, #1092	; 0x444
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d107      	bne.n	8003dec <HAL_TIM_PWM_Stop_DMA+0x158>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0201 	bic.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d104      	bne.n	8003dfc <HAL_TIM_PWM_Stop_DMA+0x168>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dfa:	e013      	b.n	8003e24 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d104      	bne.n	8003e0c <HAL_TIM_PWM_Stop_DMA+0x178>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e0a:	e00b      	b.n	8003e24 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	2b08      	cmp	r3, #8
 8003e10:	d104      	bne.n	8003e1c <HAL_TIM_PWM_Stop_DMA+0x188>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e1a:	e003      	b.n	8003e24 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	40010000 	.word	0x40010000
 8003e34:	40010400 	.word	0x40010400

08003e38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e44:	2300      	movs	r3, #0
 8003e46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d101      	bne.n	8003e56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e52:	2302      	movs	r3, #2
 8003e54:	e0ae      	b.n	8003fb4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b0c      	cmp	r3, #12
 8003e62:	f200 809f 	bhi.w	8003fa4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e66:	a201      	add	r2, pc, #4	; (adr r2, 8003e6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6c:	08003ea1 	.word	0x08003ea1
 8003e70:	08003fa5 	.word	0x08003fa5
 8003e74:	08003fa5 	.word	0x08003fa5
 8003e78:	08003fa5 	.word	0x08003fa5
 8003e7c:	08003ee1 	.word	0x08003ee1
 8003e80:	08003fa5 	.word	0x08003fa5
 8003e84:	08003fa5 	.word	0x08003fa5
 8003e88:	08003fa5 	.word	0x08003fa5
 8003e8c:	08003f23 	.word	0x08003f23
 8003e90:	08003fa5 	.word	0x08003fa5
 8003e94:	08003fa5 	.word	0x08003fa5
 8003e98:	08003fa5 	.word	0x08003fa5
 8003e9c:	08003f63 	.word	0x08003f63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68b9      	ldr	r1, [r7, #8]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 fae0 	bl	800446c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699a      	ldr	r2, [r3, #24]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0208 	orr.w	r2, r2, #8
 8003eba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699a      	ldr	r2, [r3, #24]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0204 	bic.w	r2, r2, #4
 8003eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6999      	ldr	r1, [r3, #24]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	691a      	ldr	r2, [r3, #16]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	619a      	str	r2, [r3, #24]
      break;
 8003ede:	e064      	b.n	8003faa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68b9      	ldr	r1, [r7, #8]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 fb30 	bl	800454c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699a      	ldr	r2, [r3, #24]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699a      	ldr	r2, [r3, #24]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6999      	ldr	r1, [r3, #24]
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	021a      	lsls	r2, r3, #8
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	619a      	str	r2, [r3, #24]
      break;
 8003f20:	e043      	b.n	8003faa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68b9      	ldr	r1, [r7, #8]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 fb85 	bl	8004638 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69da      	ldr	r2, [r3, #28]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 0208 	orr.w	r2, r2, #8
 8003f3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	69da      	ldr	r2, [r3, #28]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0204 	bic.w	r2, r2, #4
 8003f4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69d9      	ldr	r1, [r3, #28]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	61da      	str	r2, [r3, #28]
      break;
 8003f60:	e023      	b.n	8003faa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68b9      	ldr	r1, [r7, #8]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 fbd9 	bl	8004720 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	69da      	ldr	r2, [r3, #28]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	69da      	ldr	r2, [r3, #28]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	69d9      	ldr	r1, [r3, #28]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	021a      	lsls	r2, r3, #8
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	61da      	str	r2, [r3, #28]
      break;
 8003fa2:	e002      	b.n	8003faa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8003fa8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3718      	adds	r7, #24
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_TIM_ConfigClockSource+0x1c>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	e0b4      	b.n	8004142 <HAL_TIM_ConfigClockSource+0x186>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ff6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ffe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004010:	d03e      	beq.n	8004090 <HAL_TIM_ConfigClockSource+0xd4>
 8004012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004016:	f200 8087 	bhi.w	8004128 <HAL_TIM_ConfigClockSource+0x16c>
 800401a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800401e:	f000 8086 	beq.w	800412e <HAL_TIM_ConfigClockSource+0x172>
 8004022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004026:	d87f      	bhi.n	8004128 <HAL_TIM_ConfigClockSource+0x16c>
 8004028:	2b70      	cmp	r3, #112	; 0x70
 800402a:	d01a      	beq.n	8004062 <HAL_TIM_ConfigClockSource+0xa6>
 800402c:	2b70      	cmp	r3, #112	; 0x70
 800402e:	d87b      	bhi.n	8004128 <HAL_TIM_ConfigClockSource+0x16c>
 8004030:	2b60      	cmp	r3, #96	; 0x60
 8004032:	d050      	beq.n	80040d6 <HAL_TIM_ConfigClockSource+0x11a>
 8004034:	2b60      	cmp	r3, #96	; 0x60
 8004036:	d877      	bhi.n	8004128 <HAL_TIM_ConfigClockSource+0x16c>
 8004038:	2b50      	cmp	r3, #80	; 0x50
 800403a:	d03c      	beq.n	80040b6 <HAL_TIM_ConfigClockSource+0xfa>
 800403c:	2b50      	cmp	r3, #80	; 0x50
 800403e:	d873      	bhi.n	8004128 <HAL_TIM_ConfigClockSource+0x16c>
 8004040:	2b40      	cmp	r3, #64	; 0x40
 8004042:	d058      	beq.n	80040f6 <HAL_TIM_ConfigClockSource+0x13a>
 8004044:	2b40      	cmp	r3, #64	; 0x40
 8004046:	d86f      	bhi.n	8004128 <HAL_TIM_ConfigClockSource+0x16c>
 8004048:	2b30      	cmp	r3, #48	; 0x30
 800404a:	d064      	beq.n	8004116 <HAL_TIM_ConfigClockSource+0x15a>
 800404c:	2b30      	cmp	r3, #48	; 0x30
 800404e:	d86b      	bhi.n	8004128 <HAL_TIM_ConfigClockSource+0x16c>
 8004050:	2b20      	cmp	r3, #32
 8004052:	d060      	beq.n	8004116 <HAL_TIM_ConfigClockSource+0x15a>
 8004054:	2b20      	cmp	r3, #32
 8004056:	d867      	bhi.n	8004128 <HAL_TIM_ConfigClockSource+0x16c>
 8004058:	2b00      	cmp	r3, #0
 800405a:	d05c      	beq.n	8004116 <HAL_TIM_ConfigClockSource+0x15a>
 800405c:	2b10      	cmp	r3, #16
 800405e:	d05a      	beq.n	8004116 <HAL_TIM_ConfigClockSource+0x15a>
 8004060:	e062      	b.n	8004128 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004072:	f000 fc25 	bl	80048c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004084:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	609a      	str	r2, [r3, #8]
      break;
 800408e:	e04f      	b.n	8004130 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040a0:	f000 fc0e 	bl	80048c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689a      	ldr	r2, [r3, #8]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040b2:	609a      	str	r2, [r3, #8]
      break;
 80040b4:	e03c      	b.n	8004130 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040c2:	461a      	mov	r2, r3
 80040c4:	f000 fb82 	bl	80047cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2150      	movs	r1, #80	; 0x50
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 fbdb 	bl	800488a <TIM_ITRx_SetConfig>
      break;
 80040d4:	e02c      	b.n	8004130 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040e2:	461a      	mov	r2, r3
 80040e4:	f000 fba1 	bl	800482a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2160      	movs	r1, #96	; 0x60
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 fbcb 	bl	800488a <TIM_ITRx_SetConfig>
      break;
 80040f4:	e01c      	b.n	8004130 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004102:	461a      	mov	r2, r3
 8004104:	f000 fb62 	bl	80047cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2140      	movs	r1, #64	; 0x40
 800410e:	4618      	mov	r0, r3
 8004110:	f000 fbbb 	bl	800488a <TIM_ITRx_SetConfig>
      break;
 8004114:	e00c      	b.n	8004130 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4619      	mov	r1, r3
 8004120:	4610      	mov	r0, r2
 8004122:	f000 fbb2 	bl	800488a <TIM_ITRx_SetConfig>
      break;
 8004126:	e003      	b.n	8004130 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	73fb      	strb	r3, [r7, #15]
      break;
 800412c:	e000      	b.n	8004130 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800412e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004140:	7bfb      	ldrb	r3, [r7, #15]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b084      	sub	sp, #16
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	429a      	cmp	r2, r3
 8004188:	d107      	bne.n	800419a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2201      	movs	r2, #1
 800418e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004198:	e02a      	b.n	80041f0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d107      	bne.n	80041b4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2202      	movs	r2, #2
 80041a8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041b2:	e01d      	b.n	80041f0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d107      	bne.n	80041ce <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2204      	movs	r2, #4
 80041c2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041cc:	e010      	b.n	80041f0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d107      	bne.n	80041e8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2208      	movs	r2, #8
 80041dc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041e6:	e003      	b.n	80041f0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f7ff ffb4 	bl	800415e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	771a      	strb	r2, [r3, #28]
}
 80041fc:	bf00      	nop
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004210:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	429a      	cmp	r2, r3
 800421a:	d10b      	bne.n	8004234 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2201      	movs	r2, #1
 8004220:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d136      	bne.n	8004298 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004232:	e031      	b.n	8004298 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	429a      	cmp	r2, r3
 800423c:	d10b      	bne.n	8004256 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2202      	movs	r2, #2
 8004242:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d125      	bne.n	8004298 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004254:	e020      	b.n	8004298 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	429a      	cmp	r2, r3
 800425e:	d10b      	bne.n	8004278 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2204      	movs	r2, #4
 8004264:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d114      	bne.n	8004298 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004276:	e00f      	b.n	8004298 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	429a      	cmp	r2, r3
 8004280:	d10a      	bne.n	8004298 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2208      	movs	r2, #8
 8004286:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d103      	bne.n	8004298 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f001 ff87 	bl	80061ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	771a      	strb	r2, [r3, #28]
}
 80042a4:	bf00      	nop
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d103      	bne.n	80042cc <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2201      	movs	r2, #1
 80042c8:	771a      	strb	r2, [r3, #28]
 80042ca:	e019      	b.n	8004300 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d103      	bne.n	80042de <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2202      	movs	r2, #2
 80042da:	771a      	strb	r2, [r3, #28]
 80042dc:	e010      	b.n	8004300 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d103      	bne.n	80042f0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2204      	movs	r2, #4
 80042ec:	771a      	strb	r2, [r3, #28]
 80042ee:	e007      	b.n	8004300 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d102      	bne.n	8004300 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2208      	movs	r2, #8
 80042fe:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f7ff ff22 	bl	800414a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	771a      	strb	r2, [r3, #28]
}
 800430c:	bf00      	nop
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a46      	ldr	r2, [pc, #280]	; (8004440 <TIM_Base_SetConfig+0x12c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d013      	beq.n	8004354 <TIM_Base_SetConfig+0x40>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004332:	d00f      	beq.n	8004354 <TIM_Base_SetConfig+0x40>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a43      	ldr	r2, [pc, #268]	; (8004444 <TIM_Base_SetConfig+0x130>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d00b      	beq.n	8004354 <TIM_Base_SetConfig+0x40>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a42      	ldr	r2, [pc, #264]	; (8004448 <TIM_Base_SetConfig+0x134>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d007      	beq.n	8004354 <TIM_Base_SetConfig+0x40>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a41      	ldr	r2, [pc, #260]	; (800444c <TIM_Base_SetConfig+0x138>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d003      	beq.n	8004354 <TIM_Base_SetConfig+0x40>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a40      	ldr	r2, [pc, #256]	; (8004450 <TIM_Base_SetConfig+0x13c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d108      	bne.n	8004366 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a35      	ldr	r2, [pc, #212]	; (8004440 <TIM_Base_SetConfig+0x12c>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d02b      	beq.n	80043c6 <TIM_Base_SetConfig+0xb2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004374:	d027      	beq.n	80043c6 <TIM_Base_SetConfig+0xb2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a32      	ldr	r2, [pc, #200]	; (8004444 <TIM_Base_SetConfig+0x130>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d023      	beq.n	80043c6 <TIM_Base_SetConfig+0xb2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a31      	ldr	r2, [pc, #196]	; (8004448 <TIM_Base_SetConfig+0x134>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d01f      	beq.n	80043c6 <TIM_Base_SetConfig+0xb2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a30      	ldr	r2, [pc, #192]	; (800444c <TIM_Base_SetConfig+0x138>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d01b      	beq.n	80043c6 <TIM_Base_SetConfig+0xb2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a2f      	ldr	r2, [pc, #188]	; (8004450 <TIM_Base_SetConfig+0x13c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d017      	beq.n	80043c6 <TIM_Base_SetConfig+0xb2>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a2e      	ldr	r2, [pc, #184]	; (8004454 <TIM_Base_SetConfig+0x140>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d013      	beq.n	80043c6 <TIM_Base_SetConfig+0xb2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a2d      	ldr	r2, [pc, #180]	; (8004458 <TIM_Base_SetConfig+0x144>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00f      	beq.n	80043c6 <TIM_Base_SetConfig+0xb2>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a2c      	ldr	r2, [pc, #176]	; (800445c <TIM_Base_SetConfig+0x148>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d00b      	beq.n	80043c6 <TIM_Base_SetConfig+0xb2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a2b      	ldr	r2, [pc, #172]	; (8004460 <TIM_Base_SetConfig+0x14c>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d007      	beq.n	80043c6 <TIM_Base_SetConfig+0xb2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a2a      	ldr	r2, [pc, #168]	; (8004464 <TIM_Base_SetConfig+0x150>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d003      	beq.n	80043c6 <TIM_Base_SetConfig+0xb2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a29      	ldr	r2, [pc, #164]	; (8004468 <TIM_Base_SetConfig+0x154>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d108      	bne.n	80043d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a10      	ldr	r2, [pc, #64]	; (8004440 <TIM_Base_SetConfig+0x12c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d003      	beq.n	800440c <TIM_Base_SetConfig+0xf8>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a12      	ldr	r2, [pc, #72]	; (8004450 <TIM_Base_SetConfig+0x13c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d103      	bne.n	8004414 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	691a      	ldr	r2, [r3, #16]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b01      	cmp	r3, #1
 8004424:	d105      	bne.n	8004432 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	f023 0201 	bic.w	r2, r3, #1
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	611a      	str	r2, [r3, #16]
  }
}
 8004432:	bf00      	nop
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	40010000 	.word	0x40010000
 8004444:	40000400 	.word	0x40000400
 8004448:	40000800 	.word	0x40000800
 800444c:	40000c00 	.word	0x40000c00
 8004450:	40010400 	.word	0x40010400
 8004454:	40014000 	.word	0x40014000
 8004458:	40014400 	.word	0x40014400
 800445c:	40014800 	.word	0x40014800
 8004460:	40001800 	.word	0x40001800
 8004464:	40001c00 	.word	0x40001c00
 8004468:	40002000 	.word	0x40002000

0800446c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800446c:	b480      	push	{r7}
 800446e:	b087      	sub	sp, #28
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	f023 0201 	bic.w	r2, r3, #1
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0303 	bic.w	r3, r3, #3
 80044a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f023 0302 	bic.w	r3, r3, #2
 80044b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	4313      	orrs	r3, r2
 80044be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a20      	ldr	r2, [pc, #128]	; (8004544 <TIM_OC1_SetConfig+0xd8>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d003      	beq.n	80044d0 <TIM_OC1_SetConfig+0x64>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a1f      	ldr	r2, [pc, #124]	; (8004548 <TIM_OC1_SetConfig+0xdc>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d10c      	bne.n	80044ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f023 0308 	bic.w	r3, r3, #8
 80044d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	4313      	orrs	r3, r2
 80044e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f023 0304 	bic.w	r3, r3, #4
 80044e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a15      	ldr	r2, [pc, #84]	; (8004544 <TIM_OC1_SetConfig+0xd8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d003      	beq.n	80044fa <TIM_OC1_SetConfig+0x8e>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a14      	ldr	r2, [pc, #80]	; (8004548 <TIM_OC1_SetConfig+0xdc>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d111      	bne.n	800451e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004500:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004508:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	4313      	orrs	r3, r2
 8004512:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	4313      	orrs	r3, r2
 800451c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	621a      	str	r2, [r3, #32]
}
 8004538:	bf00      	nop
 800453a:	371c      	adds	r7, #28
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	40010000 	.word	0x40010000
 8004548:	40010400 	.word	0x40010400

0800454c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800454c:	b480      	push	{r7}
 800454e:	b087      	sub	sp, #28
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	f023 0210 	bic.w	r2, r3, #16
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800457a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004582:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	021b      	lsls	r3, r3, #8
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4313      	orrs	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f023 0320 	bic.w	r3, r3, #32
 8004596:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a22      	ldr	r2, [pc, #136]	; (8004630 <TIM_OC2_SetConfig+0xe4>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d003      	beq.n	80045b4 <TIM_OC2_SetConfig+0x68>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a21      	ldr	r2, [pc, #132]	; (8004634 <TIM_OC2_SetConfig+0xe8>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d10d      	bne.n	80045d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a17      	ldr	r2, [pc, #92]	; (8004630 <TIM_OC2_SetConfig+0xe4>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d003      	beq.n	80045e0 <TIM_OC2_SetConfig+0x94>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a16      	ldr	r2, [pc, #88]	; (8004634 <TIM_OC2_SetConfig+0xe8>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d113      	bne.n	8004608 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	4313      	orrs	r3, r2
 8004606:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	621a      	str	r2, [r3, #32]
}
 8004622:	bf00      	nop
 8004624:	371c      	adds	r7, #28
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	40010000 	.word	0x40010000
 8004634:	40010400 	.word	0x40010400

08004638 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004638:	b480      	push	{r7}
 800463a:	b087      	sub	sp, #28
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 0303 	bic.w	r3, r3, #3
 800466e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	4313      	orrs	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	021b      	lsls	r3, r3, #8
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	4313      	orrs	r3, r2
 800468c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a21      	ldr	r2, [pc, #132]	; (8004718 <TIM_OC3_SetConfig+0xe0>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d003      	beq.n	800469e <TIM_OC3_SetConfig+0x66>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a20      	ldr	r2, [pc, #128]	; (800471c <TIM_OC3_SetConfig+0xe4>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d10d      	bne.n	80046ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	021b      	lsls	r3, r3, #8
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a16      	ldr	r2, [pc, #88]	; (8004718 <TIM_OC3_SetConfig+0xe0>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d003      	beq.n	80046ca <TIM_OC3_SetConfig+0x92>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a15      	ldr	r2, [pc, #84]	; (800471c <TIM_OC3_SetConfig+0xe4>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d113      	bne.n	80046f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	011b      	lsls	r3, r3, #4
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	011b      	lsls	r3, r3, #4
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	621a      	str	r2, [r3, #32]
}
 800470c:	bf00      	nop
 800470e:	371c      	adds	r7, #28
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	40010000 	.word	0x40010000
 800471c:	40010400 	.word	0x40010400

08004720 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800474e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	021b      	lsls	r3, r3, #8
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	4313      	orrs	r3, r2
 8004762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800476a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	031b      	lsls	r3, r3, #12
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	4313      	orrs	r3, r2
 8004776:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a12      	ldr	r2, [pc, #72]	; (80047c4 <TIM_OC4_SetConfig+0xa4>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d003      	beq.n	8004788 <TIM_OC4_SetConfig+0x68>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a11      	ldr	r2, [pc, #68]	; (80047c8 <TIM_OC4_SetConfig+0xa8>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d109      	bne.n	800479c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800478e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	019b      	lsls	r3, r3, #6
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	4313      	orrs	r3, r2
 800479a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	621a      	str	r2, [r3, #32]
}
 80047b6:	bf00      	nop
 80047b8:	371c      	adds	r7, #28
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	40010000 	.word	0x40010000
 80047c8:	40010400 	.word	0x40010400

080047cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	f023 0201 	bic.w	r2, r3, #1
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	011b      	lsls	r3, r3, #4
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	4313      	orrs	r3, r2
 8004800:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f023 030a 	bic.w	r3, r3, #10
 8004808:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	4313      	orrs	r3, r2
 8004810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	621a      	str	r2, [r3, #32]
}
 800481e:	bf00      	nop
 8004820:	371c      	adds	r7, #28
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800482a:	b480      	push	{r7}
 800482c:	b087      	sub	sp, #28
 800482e:	af00      	add	r7, sp, #0
 8004830:	60f8      	str	r0, [r7, #12]
 8004832:	60b9      	str	r1, [r7, #8]
 8004834:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	f023 0210 	bic.w	r2, r3, #16
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004854:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	031b      	lsls	r3, r3, #12
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	4313      	orrs	r3, r2
 800485e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004866:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	4313      	orrs	r3, r2
 8004870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	621a      	str	r2, [r3, #32]
}
 800487e:	bf00      	nop
 8004880:	371c      	adds	r7, #28
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800488a:	b480      	push	{r7}
 800488c:	b085      	sub	sp, #20
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
 8004892:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	f043 0307 	orr.w	r3, r3, #7
 80048ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	609a      	str	r2, [r3, #8]
}
 80048b4:	bf00      	nop
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	021a      	lsls	r2, r3, #8
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	431a      	orrs	r2, r3
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	609a      	str	r2, [r3, #8]
}
 80048f4:	bf00      	nop
 80048f6:	371c      	adds	r7, #28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004900:	b480      	push	{r7}
 8004902:	b087      	sub	sp, #28
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	f003 031f 	and.w	r3, r3, #31
 8004912:	2201      	movs	r2, #1
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a1a      	ldr	r2, [r3, #32]
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	43db      	mvns	r3, r3
 8004922:	401a      	ands	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6a1a      	ldr	r2, [r3, #32]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f003 031f 	and.w	r3, r3, #31
 8004932:	6879      	ldr	r1, [r7, #4]
 8004934:	fa01 f303 	lsl.w	r3, r1, r3
 8004938:	431a      	orrs	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	621a      	str	r2, [r3, #32]
}
 800493e:	bf00      	nop
 8004940:	371c      	adds	r7, #28
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
	...

0800494c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800495c:	2b01      	cmp	r3, #1
 800495e:	d101      	bne.n	8004964 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004960:	2302      	movs	r3, #2
 8004962:	e05a      	b.n	8004a1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	4313      	orrs	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a21      	ldr	r2, [pc, #132]	; (8004a28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d022      	beq.n	80049ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b0:	d01d      	beq.n	80049ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a1d      	ldr	r2, [pc, #116]	; (8004a2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d018      	beq.n	80049ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a1b      	ldr	r2, [pc, #108]	; (8004a30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d013      	beq.n	80049ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a1a      	ldr	r2, [pc, #104]	; (8004a34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00e      	beq.n	80049ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a18      	ldr	r2, [pc, #96]	; (8004a38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d009      	beq.n	80049ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a17      	ldr	r2, [pc, #92]	; (8004a3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d004      	beq.n	80049ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a15      	ldr	r2, [pc, #84]	; (8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d10c      	bne.n	8004a08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	40010000 	.word	0x40010000
 8004a2c:	40000400 	.word	0x40000400
 8004a30:	40000800 	.word	0x40000800
 8004a34:	40000c00 	.word	0x40000c00
 8004a38:	40010400 	.word	0x40010400
 8004a3c:	40014000 	.word	0x40014000
 8004a40:	40001800 	.word	0x40001800

08004a44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d101      	bne.n	8004a60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e03d      	b.n	8004adc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e042      	b.n	8004b80 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d106      	bne.n	8004b14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fc f8a8 	bl	8000c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2224      	movs	r2, #36	; 0x24
 8004b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 f973 	bl	8004e18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	691a      	ldr	r2, [r3, #16]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695a      	ldr	r2, [r3, #20]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68da      	ldr	r2, [r3, #12]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08a      	sub	sp, #40	; 0x28
 8004b8c:	af02      	add	r7, sp, #8
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	603b      	str	r3, [r7, #0]
 8004b94:	4613      	mov	r3, r2
 8004b96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	d175      	bne.n	8004c94 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d002      	beq.n	8004bb4 <HAL_UART_Transmit+0x2c>
 8004bae:	88fb      	ldrh	r3, [r7, #6]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e06e      	b.n	8004c96 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2221      	movs	r2, #33	; 0x21
 8004bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bc6:	f7fc fa09 	bl	8000fdc <HAL_GetTick>
 8004bca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	88fa      	ldrh	r2, [r7, #6]
 8004bd0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	88fa      	ldrh	r2, [r7, #6]
 8004bd6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be0:	d108      	bne.n	8004bf4 <HAL_UART_Transmit+0x6c>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d104      	bne.n	8004bf4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004bea:	2300      	movs	r3, #0
 8004bec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	61bb      	str	r3, [r7, #24]
 8004bf2:	e003      	b.n	8004bfc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004bfc:	e02e      	b.n	8004c5c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2200      	movs	r2, #0
 8004c06:	2180      	movs	r1, #128	; 0x80
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 f848 	bl	8004c9e <UART_WaitOnFlagUntilTimeout>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e03a      	b.n	8004c96 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10b      	bne.n	8004c3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	3302      	adds	r3, #2
 8004c3a:	61bb      	str	r3, [r7, #24]
 8004c3c:	e007      	b.n	8004c4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	781a      	ldrb	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	3b01      	subs	r3, #1
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1cb      	bne.n	8004bfe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	2140      	movs	r1, #64	; 0x40
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 f814 	bl	8004c9e <UART_WaitOnFlagUntilTimeout>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d005      	beq.n	8004c88 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e006      	b.n	8004c96 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004c90:	2300      	movs	r3, #0
 8004c92:	e000      	b.n	8004c96 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c94:	2302      	movs	r3, #2
  }
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3720      	adds	r7, #32
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b086      	sub	sp, #24
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	60f8      	str	r0, [r7, #12]
 8004ca6:	60b9      	str	r1, [r7, #8]
 8004ca8:	603b      	str	r3, [r7, #0]
 8004caa:	4613      	mov	r3, r2
 8004cac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cae:	e03b      	b.n	8004d28 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb6:	d037      	beq.n	8004d28 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cb8:	f7fc f990 	bl	8000fdc <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	6a3a      	ldr	r2, [r7, #32]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d302      	bcc.n	8004cce <UART_WaitOnFlagUntilTimeout+0x30>
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e03a      	b.n	8004d48 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d023      	beq.n	8004d28 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2b80      	cmp	r3, #128	; 0x80
 8004ce4:	d020      	beq.n	8004d28 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2b40      	cmp	r3, #64	; 0x40
 8004cea:	d01d      	beq.n	8004d28 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0308 	and.w	r3, r3, #8
 8004cf6:	2b08      	cmp	r3, #8
 8004cf8:	d116      	bne.n	8004d28 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	617b      	str	r3, [r7, #20]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	617b      	str	r3, [r7, #20]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	617b      	str	r3, [r7, #20]
 8004d0e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 f81d 	bl	8004d50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2208      	movs	r2, #8
 8004d1a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e00f      	b.n	8004d48 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	4013      	ands	r3, r2
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	bf0c      	ite	eq
 8004d38:	2301      	moveq	r3, #1
 8004d3a:	2300      	movne	r3, #0
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	461a      	mov	r2, r3
 8004d40:	79fb      	ldrb	r3, [r7, #7]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d0b4      	beq.n	8004cb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3718      	adds	r7, #24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b095      	sub	sp, #84	; 0x54
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	330c      	adds	r3, #12
 8004d5e:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d62:	e853 3f00 	ldrex	r3, [r3]
 8004d66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	330c      	adds	r3, #12
 8004d76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d78:	643a      	str	r2, [r7, #64]	; 0x40
 8004d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d80:	e841 2300 	strex	r3, r2, [r1]
 8004d84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1e5      	bne.n	8004d58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3314      	adds	r3, #20
 8004d92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	e853 3f00 	ldrex	r3, [r3]
 8004d9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	f023 0301 	bic.w	r3, r3, #1
 8004da2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3314      	adds	r3, #20
 8004daa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004db2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004db4:	e841 2300 	strex	r3, r2, [r1]
 8004db8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1e5      	bne.n	8004d8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d119      	bne.n	8004dfc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	330c      	adds	r3, #12
 8004dce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	e853 3f00 	ldrex	r3, [r3]
 8004dd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f023 0310 	bic.w	r3, r3, #16
 8004dde:	647b      	str	r3, [r7, #68]	; 0x44
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	330c      	adds	r3, #12
 8004de6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004de8:	61ba      	str	r2, [r7, #24]
 8004dea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dec:	6979      	ldr	r1, [r7, #20]
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	e841 2300 	strex	r3, r2, [r1]
 8004df4:	613b      	str	r3, [r7, #16]
   return(result);
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1e5      	bne.n	8004dc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e0a:	bf00      	nop
 8004e0c:	3754      	adds	r7, #84	; 0x54
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
	...

08004e18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e1c:	b0c0      	sub	sp, #256	; 0x100
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e34:	68d9      	ldr	r1, [r3, #12]
 8004e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	ea40 0301 	orr.w	r3, r0, r1
 8004e40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	431a      	orrs	r2, r3
 8004e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e70:	f021 010c 	bic.w	r1, r1, #12
 8004e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e7e:	430b      	orrs	r3, r1
 8004e80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e92:	6999      	ldr	r1, [r3, #24]
 8004e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	ea40 0301 	orr.w	r3, r0, r1
 8004e9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	4b8f      	ldr	r3, [pc, #572]	; (80050e4 <UART_SetConfig+0x2cc>)
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d005      	beq.n	8004eb8 <UART_SetConfig+0xa0>
 8004eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	4b8d      	ldr	r3, [pc, #564]	; (80050e8 <UART_SetConfig+0x2d0>)
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d104      	bne.n	8004ec2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004eb8:	f7fe fc68 	bl	800378c <HAL_RCC_GetPCLK2Freq>
 8004ebc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ec0:	e003      	b.n	8004eca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ec2:	f7fe fc4f 	bl	8003764 <HAL_RCC_GetPCLK1Freq>
 8004ec6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ed4:	f040 810c 	bne.w	80050f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ed8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004edc:	2200      	movs	r2, #0
 8004ede:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ee2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004ee6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004eea:	4622      	mov	r2, r4
 8004eec:	462b      	mov	r3, r5
 8004eee:	1891      	adds	r1, r2, r2
 8004ef0:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ef2:	415b      	adcs	r3, r3
 8004ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ef6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004efa:	4621      	mov	r1, r4
 8004efc:	eb12 0801 	adds.w	r8, r2, r1
 8004f00:	4629      	mov	r1, r5
 8004f02:	eb43 0901 	adc.w	r9, r3, r1
 8004f06:	f04f 0200 	mov.w	r2, #0
 8004f0a:	f04f 0300 	mov.w	r3, #0
 8004f0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f1a:	4690      	mov	r8, r2
 8004f1c:	4699      	mov	r9, r3
 8004f1e:	4623      	mov	r3, r4
 8004f20:	eb18 0303 	adds.w	r3, r8, r3
 8004f24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f28:	462b      	mov	r3, r5
 8004f2a:	eb49 0303 	adc.w	r3, r9, r3
 8004f2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004f42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f46:	460b      	mov	r3, r1
 8004f48:	18db      	adds	r3, r3, r3
 8004f4a:	653b      	str	r3, [r7, #80]	; 0x50
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	eb42 0303 	adc.w	r3, r2, r3
 8004f52:	657b      	str	r3, [r7, #84]	; 0x54
 8004f54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f5c:	f7fb f94e 	bl	80001fc <__aeabi_uldivmod>
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	4b61      	ldr	r3, [pc, #388]	; (80050ec <UART_SetConfig+0x2d4>)
 8004f66:	fba3 2302 	umull	r2, r3, r3, r2
 8004f6a:	095b      	lsrs	r3, r3, #5
 8004f6c:	011c      	lsls	r4, r3, #4
 8004f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f72:	2200      	movs	r2, #0
 8004f74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f80:	4642      	mov	r2, r8
 8004f82:	464b      	mov	r3, r9
 8004f84:	1891      	adds	r1, r2, r2
 8004f86:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f88:	415b      	adcs	r3, r3
 8004f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f90:	4641      	mov	r1, r8
 8004f92:	eb12 0a01 	adds.w	sl, r2, r1
 8004f96:	4649      	mov	r1, r9
 8004f98:	eb43 0b01 	adc.w	fp, r3, r1
 8004f9c:	f04f 0200 	mov.w	r2, #0
 8004fa0:	f04f 0300 	mov.w	r3, #0
 8004fa4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fa8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fb0:	4692      	mov	sl, r2
 8004fb2:	469b      	mov	fp, r3
 8004fb4:	4643      	mov	r3, r8
 8004fb6:	eb1a 0303 	adds.w	r3, sl, r3
 8004fba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fbe:	464b      	mov	r3, r9
 8004fc0:	eb4b 0303 	adc.w	r3, fp, r3
 8004fc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004fd4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004fd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004fdc:	460b      	mov	r3, r1
 8004fde:	18db      	adds	r3, r3, r3
 8004fe0:	643b      	str	r3, [r7, #64]	; 0x40
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	eb42 0303 	adc.w	r3, r2, r3
 8004fe8:	647b      	str	r3, [r7, #68]	; 0x44
 8004fea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004fee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ff2:	f7fb f903 	bl	80001fc <__aeabi_uldivmod>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	4611      	mov	r1, r2
 8004ffc:	4b3b      	ldr	r3, [pc, #236]	; (80050ec <UART_SetConfig+0x2d4>)
 8004ffe:	fba3 2301 	umull	r2, r3, r3, r1
 8005002:	095b      	lsrs	r3, r3, #5
 8005004:	2264      	movs	r2, #100	; 0x64
 8005006:	fb02 f303 	mul.w	r3, r2, r3
 800500a:	1acb      	subs	r3, r1, r3
 800500c:	00db      	lsls	r3, r3, #3
 800500e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005012:	4b36      	ldr	r3, [pc, #216]	; (80050ec <UART_SetConfig+0x2d4>)
 8005014:	fba3 2302 	umull	r2, r3, r3, r2
 8005018:	095b      	lsrs	r3, r3, #5
 800501a:	005b      	lsls	r3, r3, #1
 800501c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005020:	441c      	add	r4, r3
 8005022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005026:	2200      	movs	r2, #0
 8005028:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800502c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005030:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005034:	4642      	mov	r2, r8
 8005036:	464b      	mov	r3, r9
 8005038:	1891      	adds	r1, r2, r2
 800503a:	63b9      	str	r1, [r7, #56]	; 0x38
 800503c:	415b      	adcs	r3, r3
 800503e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005040:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005044:	4641      	mov	r1, r8
 8005046:	1851      	adds	r1, r2, r1
 8005048:	6339      	str	r1, [r7, #48]	; 0x30
 800504a:	4649      	mov	r1, r9
 800504c:	414b      	adcs	r3, r1
 800504e:	637b      	str	r3, [r7, #52]	; 0x34
 8005050:	f04f 0200 	mov.w	r2, #0
 8005054:	f04f 0300 	mov.w	r3, #0
 8005058:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800505c:	4659      	mov	r1, fp
 800505e:	00cb      	lsls	r3, r1, #3
 8005060:	4651      	mov	r1, sl
 8005062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005066:	4651      	mov	r1, sl
 8005068:	00ca      	lsls	r2, r1, #3
 800506a:	4610      	mov	r0, r2
 800506c:	4619      	mov	r1, r3
 800506e:	4603      	mov	r3, r0
 8005070:	4642      	mov	r2, r8
 8005072:	189b      	adds	r3, r3, r2
 8005074:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005078:	464b      	mov	r3, r9
 800507a:	460a      	mov	r2, r1
 800507c:	eb42 0303 	adc.w	r3, r2, r3
 8005080:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005090:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005094:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005098:	460b      	mov	r3, r1
 800509a:	18db      	adds	r3, r3, r3
 800509c:	62bb      	str	r3, [r7, #40]	; 0x28
 800509e:	4613      	mov	r3, r2
 80050a0:	eb42 0303 	adc.w	r3, r2, r3
 80050a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80050ae:	f7fb f8a5 	bl	80001fc <__aeabi_uldivmod>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	4b0d      	ldr	r3, [pc, #52]	; (80050ec <UART_SetConfig+0x2d4>)
 80050b8:	fba3 1302 	umull	r1, r3, r3, r2
 80050bc:	095b      	lsrs	r3, r3, #5
 80050be:	2164      	movs	r1, #100	; 0x64
 80050c0:	fb01 f303 	mul.w	r3, r1, r3
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	3332      	adds	r3, #50	; 0x32
 80050ca:	4a08      	ldr	r2, [pc, #32]	; (80050ec <UART_SetConfig+0x2d4>)
 80050cc:	fba2 2303 	umull	r2, r3, r2, r3
 80050d0:	095b      	lsrs	r3, r3, #5
 80050d2:	f003 0207 	and.w	r2, r3, #7
 80050d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4422      	add	r2, r4
 80050de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050e0:	e106      	b.n	80052f0 <UART_SetConfig+0x4d8>
 80050e2:	bf00      	nop
 80050e4:	40011000 	.word	0x40011000
 80050e8:	40011400 	.word	0x40011400
 80050ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050f4:	2200      	movs	r2, #0
 80050f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80050fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80050fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005102:	4642      	mov	r2, r8
 8005104:	464b      	mov	r3, r9
 8005106:	1891      	adds	r1, r2, r2
 8005108:	6239      	str	r1, [r7, #32]
 800510a:	415b      	adcs	r3, r3
 800510c:	627b      	str	r3, [r7, #36]	; 0x24
 800510e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005112:	4641      	mov	r1, r8
 8005114:	1854      	adds	r4, r2, r1
 8005116:	4649      	mov	r1, r9
 8005118:	eb43 0501 	adc.w	r5, r3, r1
 800511c:	f04f 0200 	mov.w	r2, #0
 8005120:	f04f 0300 	mov.w	r3, #0
 8005124:	00eb      	lsls	r3, r5, #3
 8005126:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800512a:	00e2      	lsls	r2, r4, #3
 800512c:	4614      	mov	r4, r2
 800512e:	461d      	mov	r5, r3
 8005130:	4643      	mov	r3, r8
 8005132:	18e3      	adds	r3, r4, r3
 8005134:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005138:	464b      	mov	r3, r9
 800513a:	eb45 0303 	adc.w	r3, r5, r3
 800513e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800514e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005152:	f04f 0200 	mov.w	r2, #0
 8005156:	f04f 0300 	mov.w	r3, #0
 800515a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800515e:	4629      	mov	r1, r5
 8005160:	008b      	lsls	r3, r1, #2
 8005162:	4621      	mov	r1, r4
 8005164:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005168:	4621      	mov	r1, r4
 800516a:	008a      	lsls	r2, r1, #2
 800516c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005170:	f7fb f844 	bl	80001fc <__aeabi_uldivmod>
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	4b60      	ldr	r3, [pc, #384]	; (80052fc <UART_SetConfig+0x4e4>)
 800517a:	fba3 2302 	umull	r2, r3, r3, r2
 800517e:	095b      	lsrs	r3, r3, #5
 8005180:	011c      	lsls	r4, r3, #4
 8005182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005186:	2200      	movs	r2, #0
 8005188:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800518c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005190:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005194:	4642      	mov	r2, r8
 8005196:	464b      	mov	r3, r9
 8005198:	1891      	adds	r1, r2, r2
 800519a:	61b9      	str	r1, [r7, #24]
 800519c:	415b      	adcs	r3, r3
 800519e:	61fb      	str	r3, [r7, #28]
 80051a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051a4:	4641      	mov	r1, r8
 80051a6:	1851      	adds	r1, r2, r1
 80051a8:	6139      	str	r1, [r7, #16]
 80051aa:	4649      	mov	r1, r9
 80051ac:	414b      	adcs	r3, r1
 80051ae:	617b      	str	r3, [r7, #20]
 80051b0:	f04f 0200 	mov.w	r2, #0
 80051b4:	f04f 0300 	mov.w	r3, #0
 80051b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051bc:	4659      	mov	r1, fp
 80051be:	00cb      	lsls	r3, r1, #3
 80051c0:	4651      	mov	r1, sl
 80051c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051c6:	4651      	mov	r1, sl
 80051c8:	00ca      	lsls	r2, r1, #3
 80051ca:	4610      	mov	r0, r2
 80051cc:	4619      	mov	r1, r3
 80051ce:	4603      	mov	r3, r0
 80051d0:	4642      	mov	r2, r8
 80051d2:	189b      	adds	r3, r3, r2
 80051d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051d8:	464b      	mov	r3, r9
 80051da:	460a      	mov	r2, r1
 80051dc:	eb42 0303 	adc.w	r3, r2, r3
 80051e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80051ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80051f0:	f04f 0200 	mov.w	r2, #0
 80051f4:	f04f 0300 	mov.w	r3, #0
 80051f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80051fc:	4649      	mov	r1, r9
 80051fe:	008b      	lsls	r3, r1, #2
 8005200:	4641      	mov	r1, r8
 8005202:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005206:	4641      	mov	r1, r8
 8005208:	008a      	lsls	r2, r1, #2
 800520a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800520e:	f7fa fff5 	bl	80001fc <__aeabi_uldivmod>
 8005212:	4602      	mov	r2, r0
 8005214:	460b      	mov	r3, r1
 8005216:	4611      	mov	r1, r2
 8005218:	4b38      	ldr	r3, [pc, #224]	; (80052fc <UART_SetConfig+0x4e4>)
 800521a:	fba3 2301 	umull	r2, r3, r3, r1
 800521e:	095b      	lsrs	r3, r3, #5
 8005220:	2264      	movs	r2, #100	; 0x64
 8005222:	fb02 f303 	mul.w	r3, r2, r3
 8005226:	1acb      	subs	r3, r1, r3
 8005228:	011b      	lsls	r3, r3, #4
 800522a:	3332      	adds	r3, #50	; 0x32
 800522c:	4a33      	ldr	r2, [pc, #204]	; (80052fc <UART_SetConfig+0x4e4>)
 800522e:	fba2 2303 	umull	r2, r3, r2, r3
 8005232:	095b      	lsrs	r3, r3, #5
 8005234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005238:	441c      	add	r4, r3
 800523a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800523e:	2200      	movs	r2, #0
 8005240:	673b      	str	r3, [r7, #112]	; 0x70
 8005242:	677a      	str	r2, [r7, #116]	; 0x74
 8005244:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005248:	4642      	mov	r2, r8
 800524a:	464b      	mov	r3, r9
 800524c:	1891      	adds	r1, r2, r2
 800524e:	60b9      	str	r1, [r7, #8]
 8005250:	415b      	adcs	r3, r3
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005258:	4641      	mov	r1, r8
 800525a:	1851      	adds	r1, r2, r1
 800525c:	6039      	str	r1, [r7, #0]
 800525e:	4649      	mov	r1, r9
 8005260:	414b      	adcs	r3, r1
 8005262:	607b      	str	r3, [r7, #4]
 8005264:	f04f 0200 	mov.w	r2, #0
 8005268:	f04f 0300 	mov.w	r3, #0
 800526c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005270:	4659      	mov	r1, fp
 8005272:	00cb      	lsls	r3, r1, #3
 8005274:	4651      	mov	r1, sl
 8005276:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800527a:	4651      	mov	r1, sl
 800527c:	00ca      	lsls	r2, r1, #3
 800527e:	4610      	mov	r0, r2
 8005280:	4619      	mov	r1, r3
 8005282:	4603      	mov	r3, r0
 8005284:	4642      	mov	r2, r8
 8005286:	189b      	adds	r3, r3, r2
 8005288:	66bb      	str	r3, [r7, #104]	; 0x68
 800528a:	464b      	mov	r3, r9
 800528c:	460a      	mov	r2, r1
 800528e:	eb42 0303 	adc.w	r3, r2, r3
 8005292:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	663b      	str	r3, [r7, #96]	; 0x60
 800529e:	667a      	str	r2, [r7, #100]	; 0x64
 80052a0:	f04f 0200 	mov.w	r2, #0
 80052a4:	f04f 0300 	mov.w	r3, #0
 80052a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80052ac:	4649      	mov	r1, r9
 80052ae:	008b      	lsls	r3, r1, #2
 80052b0:	4641      	mov	r1, r8
 80052b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052b6:	4641      	mov	r1, r8
 80052b8:	008a      	lsls	r2, r1, #2
 80052ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80052be:	f7fa ff9d 	bl	80001fc <__aeabi_uldivmod>
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	4b0d      	ldr	r3, [pc, #52]	; (80052fc <UART_SetConfig+0x4e4>)
 80052c8:	fba3 1302 	umull	r1, r3, r3, r2
 80052cc:	095b      	lsrs	r3, r3, #5
 80052ce:	2164      	movs	r1, #100	; 0x64
 80052d0:	fb01 f303 	mul.w	r3, r1, r3
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	3332      	adds	r3, #50	; 0x32
 80052da:	4a08      	ldr	r2, [pc, #32]	; (80052fc <UART_SetConfig+0x4e4>)
 80052dc:	fba2 2303 	umull	r2, r3, r2, r3
 80052e0:	095b      	lsrs	r3, r3, #5
 80052e2:	f003 020f 	and.w	r2, r3, #15
 80052e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4422      	add	r2, r4
 80052ee:	609a      	str	r2, [r3, #8]
}
 80052f0:	bf00      	nop
 80052f2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80052f6:	46bd      	mov	sp, r7
 80052f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052fc:	51eb851f 	.word	0x51eb851f

08005300 <delayInit>:
/**
 * Delay Functions
 */

void delayInit(delay_t * delay, tick_t duration)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
	if (delay == NULL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d009      	beq.n	8005324 <delayInit+0x24>
		return;

	delay->duration = duration;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	721a      	strb	r2, [r3, #8]
	delay->startTime = 0;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	e000      	b.n	8005326 <delayInit+0x26>
		return;
 8005324:	bf00      	nop
}
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <delayRead>:

bool_t delayRead(delay_t * delay)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
	uint32_t elapsedTime = 0;
 8005338:	2300      	movs	r3, #0
 800533a:	60bb      	str	r3, [r7, #8]
	bool_t returnValue = false;
 800533c:	2300      	movs	r3, #0
 800533e:	73fb      	strb	r3, [r7, #15]

	if (delay == NULL)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <delayRead+0x1a>
		return returnValue;
 8005346:	7bfb      	ldrb	r3, [r7, #15]
 8005348:	e021      	b.n	800538e <delayRead+0x5e>

	if (delay->running == false)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	7a1b      	ldrb	r3, [r3, #8]
 800534e:	f083 0301 	eor.w	r3, r3, #1
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d008      	beq.n	800536a <delayRead+0x3a>
	{
		delay->startTime = HAL_GetTick();
 8005358:	f7fb fe40 	bl	8000fdc <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	721a      	strb	r2, [r3, #8]
 8005368:	e010      	b.n	800538c <delayRead+0x5c>
	}
	else
	{
		elapsedTime = HAL_GetTick() - delay->startTime;
 800536a:	f7fb fe37 	bl	8000fdc <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	60bb      	str	r3, [r7, #8]
		if (elapsedTime >= delay->duration)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	429a      	cmp	r2, r3
 8005380:	d304      	bcc.n	800538c <delayRead+0x5c>
		{
			delay->running = false;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	721a      	strb	r2, [r3, #8]
			returnValue = true;
 8005388:	2301      	movs	r3, #1
 800538a:	73fb      	strb	r3, [r7, #15]
		}
	}

	return returnValue;
 800538c:	7bfb      	ldrb	r3, [r7, #15]
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <delayWrite>:

void delayWrite(delay_t * delay, tick_t duration)
{
 8005396:	b480      	push	{r7}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	6039      	str	r1, [r7, #0]
	if (delay == NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <delayWrite+0x18>
	{
		return;
	}

	delay->duration = duration;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	605a      	str	r2, [r3, #4]
 80053ac:	e000      	b.n	80053b0 <delayWrite+0x1a>
		return;
 80053ae:	bf00      	nop

//	if (delay->running == false)
//	{
//		delay->duration = duration;
//	}
}
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <imu_Init>:
 */
static bool imu_IsActive();


bool imu_Init()
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	af00      	add	r7, sp, #0

	if (imuPort_Init())
 80053be:	f000 f8c7 	bl	8005550 <imuPort_Init>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <imu_Init+0x16>
	{
		imu_ClearData();
 80053c8:	f000 f854 	bl	8005474 <imu_ClearData>
		return true;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e000      	b.n	80053d2 <imu_Init+0x18>
	}
	else
	{
		return false;
 80053d0:	2300      	movs	r3, #0
	}
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <imu_Check>:

bool imu_Check()
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	af00      	add	r7, sp, #0
	return imuPort_Check();
 80053da:	f000 f8cf 	bl	800557c <imuPort_Check>
 80053de:	4603      	mov	r3, r0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <imu_GetData>:

bool imu_GetData()
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
	bool retVal = true;
 80053ea:	2301      	movs	r3, #1
 80053ec:	71fb      	strb	r3, [r7, #7]

	retVal &= imu_ReadData();
 80053ee:	f000 f869 	bl	80054c4 <imu_ReadData>
 80053f2:	4603      	mov	r3, r0
 80053f4:	461a      	mov	r2, r3
 80053f6:	79fb      	ldrb	r3, [r7, #7]
 80053f8:	4013      	ands	r3, r2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	bf14      	ite	ne
 80053fe:	2301      	movne	r3, #1
 8005400:	2300      	moveq	r3, #0
 8005402:	71fb      	strb	r3, [r7, #7]
	retVal &= imu_ProcessData();
 8005404:	f000 f87e 	bl	8005504 <imu_ProcessData>
 8005408:	4603      	mov	r3, r0
 800540a:	461a      	mov	r2, r3
 800540c:	79fb      	ldrb	r3, [r7, #7]
 800540e:	4013      	ands	r3, r2
 8005410:	2b00      	cmp	r3, #0
 8005412:	bf14      	ite	ne
 8005414:	2301      	movne	r3, #1
 8005416:	2300      	moveq	r3, #0
 8005418:	71fb      	strb	r3, [r7, #7]

	return retVal;
 800541a:	79fb      	ldrb	r3, [r7, #7]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3708      	adds	r7, #8
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <imu_State>:

imuState_t imu_State()
{
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
	if (imu_IsActive())
 8005428:	f000 f874 	bl	8005514 <imu_IsActive>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <imu_State+0x12>
	{
		return IMU_ACTIVE;
 8005432:	2301      	movs	r3, #1
 8005434:	e000      	b.n	8005438 <imu_State+0x14>
	}
	else
	{
		return IMU_IDLE;
 8005436:	2300      	movs	r3, #0
	}
}
 8005438:	4618      	mov	r0, r3
 800543a:	bd80      	pop	{r7, pc}

0800543c <imu_SpinDirection>:

imuSpin_t imu_SpinDirection()
{
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0
	if ((abs(imu.gz) < IMU_SPIN_THRESHOLD))
 8005440:	4b0b      	ldr	r3, [pc, #44]	; (8005470 <imu_SpinDirection+0x34>)
 8005442:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005446:	2b00      	cmp	r3, #0
 8005448:	bfb8      	it	lt
 800544a:	425b      	neglt	r3, r3
 800544c:	b29b      	uxth	r3, r3
 800544e:	2b31      	cmp	r3, #49	; 0x31
 8005450:	d801      	bhi.n	8005456 <imu_SpinDirection+0x1a>
	{
		return IMU_NO_SPIN;
 8005452:	2300      	movs	r3, #0
 8005454:	e007      	b.n	8005466 <imu_SpinDirection+0x2a>
	}
	else
	{
		if (imu.gz>0)
 8005456:	4b06      	ldr	r3, [pc, #24]	; (8005470 <imu_SpinDirection+0x34>)
 8005458:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800545c:	2b00      	cmp	r3, #0
 800545e:	dd01      	ble.n	8005464 <imu_SpinDirection+0x28>
		{
			return IMU_POS_SPIN;
 8005460:	2301      	movs	r3, #1
 8005462:	e000      	b.n	8005466 <imu_SpinDirection+0x2a>
		}
		else
		{
			return IMU_NEG_SPIN;
 8005464:	2302      	movs	r3, #2
		}
	}
}
 8005466:	4618      	mov	r0, r3
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	20000048 	.word	0x20000048

08005474 <imu_ClearData>:

static void imu_ClearData()
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0
	// accelerometer
	imu.ax = 0;
 8005478:	4b11      	ldr	r3, [pc, #68]	; (80054c0 <imu_ClearData+0x4c>)
 800547a:	2200      	movs	r2, #0
 800547c:	801a      	strh	r2, [r3, #0]
	imu.ay = 0;
 800547e:	4b10      	ldr	r3, [pc, #64]	; (80054c0 <imu_ClearData+0x4c>)
 8005480:	2200      	movs	r2, #0
 8005482:	805a      	strh	r2, [r3, #2]
	imu.az = 0;
 8005484:	4b0e      	ldr	r3, [pc, #56]	; (80054c0 <imu_ClearData+0x4c>)
 8005486:	2200      	movs	r2, #0
 8005488:	809a      	strh	r2, [r3, #4]

	// gyro
	imu.gx = 0;
 800548a:	4b0d      	ldr	r3, [pc, #52]	; (80054c0 <imu_ClearData+0x4c>)
 800548c:	2200      	movs	r2, #0
 800548e:	80da      	strh	r2, [r3, #6]
	imu.gy = 0;
 8005490:	4b0b      	ldr	r3, [pc, #44]	; (80054c0 <imu_ClearData+0x4c>)
 8005492:	2200      	movs	r2, #0
 8005494:	811a      	strh	r2, [r3, #8]
	imu.gz = 0;
 8005496:	4b0a      	ldr	r3, [pc, #40]	; (80054c0 <imu_ClearData+0x4c>)
 8005498:	2200      	movs	r2, #0
 800549a:	815a      	strh	r2, [r3, #10]

	// magnetomer
	imu.mx = 0;
 800549c:	4b08      	ldr	r3, [pc, #32]	; (80054c0 <imu_ClearData+0x4c>)
 800549e:	2200      	movs	r2, #0
 80054a0:	819a      	strh	r2, [r3, #12]
	imu.my = 0;
 80054a2:	4b07      	ldr	r3, [pc, #28]	; (80054c0 <imu_ClearData+0x4c>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	81da      	strh	r2, [r3, #14]
	imu.mz = 0;
 80054a8:	4b05      	ldr	r3, [pc, #20]	; (80054c0 <imu_ClearData+0x4c>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	821a      	strh	r2, [r3, #16]

	// temperature
	imu.temp = 0;
 80054ae:	4b04      	ldr	r3, [pc, #16]	; (80054c0 <imu_ClearData+0x4c>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	825a      	strh	r2, [r3, #18]
}
 80054b4:	bf00      	nop
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	20000048 	.word	0x20000048

080054c4 <imu_ReadData>:

static bool imu_ReadData()
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
	gyro_t gyroData;

	if (imuPort_GyroReadData(&gyroData))
 80054ca:	463b      	mov	r3, r7
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 f877 	bl	80055c0 <imuPort_GyroReadData>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00d      	beq.n	80054f4 <imu_ReadData+0x30>
	{
		imu.gx = gyroData.gx;
 80054d8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80054dc:	4b08      	ldr	r3, [pc, #32]	; (8005500 <imu_ReadData+0x3c>)
 80054de:	80da      	strh	r2, [r3, #6]
		imu.gy = gyroData.gy;
 80054e0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80054e4:	4b06      	ldr	r3, [pc, #24]	; (8005500 <imu_ReadData+0x3c>)
 80054e6:	811a      	strh	r2, [r3, #8]
		imu.gz = gyroData.gz;
 80054e8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80054ec:	4b04      	ldr	r3, [pc, #16]	; (8005500 <imu_ReadData+0x3c>)
 80054ee:	815a      	strh	r2, [r3, #10]

		return true;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e000      	b.n	80054f6 <imu_ReadData+0x32>
	}
	else
	{
		return false;
 80054f4:	2300      	movs	r3, #0
	}
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	20000048 	.word	0x20000048

08005504 <imu_ProcessData>:

static bool imu_ProcessData()
{
 8005504:	b480      	push	{r7}
 8005506:	af00      	add	r7, sp, #0
	// todo: implement function
	return true;
 8005508:	2301      	movs	r3, #1
}
 800550a:	4618      	mov	r0, r3
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <imu_IsActive>:

static bool imu_IsActive()
{
 8005514:	b480      	push	{r7}
 8005516:	af00      	add	r7, sp, #0
	return ((imu.gx > IMU_SPIN_THRESHOLD) || (imu.gy > IMU_SPIN_THRESHOLD) || (imu.gz > IMU_SPIN_THRESHOLD));
 8005518:	4b0c      	ldr	r3, [pc, #48]	; (800554c <imu_IsActive+0x38>)
 800551a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800551e:	2b32      	cmp	r3, #50	; 0x32
 8005520:	dc09      	bgt.n	8005536 <imu_IsActive+0x22>
 8005522:	4b0a      	ldr	r3, [pc, #40]	; (800554c <imu_IsActive+0x38>)
 8005524:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005528:	2b32      	cmp	r3, #50	; 0x32
 800552a:	dc04      	bgt.n	8005536 <imu_IsActive+0x22>
 800552c:	4b07      	ldr	r3, [pc, #28]	; (800554c <imu_IsActive+0x38>)
 800552e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005532:	2b32      	cmp	r3, #50	; 0x32
 8005534:	dd01      	ble.n	800553a <imu_IsActive+0x26>
 8005536:	2301      	movs	r3, #1
 8005538:	e000      	b.n	800553c <imu_IsActive+0x28>
 800553a:	2300      	movs	r3, #0
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	b2db      	uxtb	r3, r3
}
 8005542:	4618      	mov	r0, r3
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	20000048 	.word	0x20000048

08005550 <imuPort_Init>:
 /**
 * IMU Port Functions
 */

bool imuPort_Init()
{
 8005550:	b580      	push	{r7, lr}
 8005552:	af00      	add	r7, sp, #0
	I2C1_Init();
 8005554:	f000 fb0a 	bl	8005b6c <I2C1_Init>
	if (imuPort_begin(AFSR_4G, GFSR_500DPS))
 8005558:	2101      	movs	r1, #1
 800555a:	2001      	movs	r0, #1
 800555c:	f000 f8a0 	bl	80056a0 <imuPort_begin>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d004      	beq.n	8005570 <imuPort_Init+0x20>
	{
		BSP_LED_Off(LED_IMU);
 8005566:	2001      	movs	r0, #1
 8005568:	f7fb fc9e 	bl	8000ea8 <BSP_LED_Off>
	    return true;
 800556c:	2301      	movs	r3, #1
 800556e:	e003      	b.n	8005578 <imuPort_Init+0x28>
	}
	else
	{
		BSP_LED_On(LED_IMU);
 8005570:	2001      	movs	r0, #1
 8005572:	f7fb fc7f 	bl	8000e74 <BSP_LED_On>
		return false;
 8005576:	2300      	movs	r3, #0
	}
}
 8005578:	4618      	mov	r0, r3
 800557a:	bd80      	pop	{r7, pc}

0800557c <imuPort_Check>:

bool imuPort_Check()
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af04      	add	r7, sp, #16
    uint8_t buffer[1];

    // Confirm device
    HAL_I2C_Mem_Read(&hi2c1, imu_i2cAddress<< 1, WHO_AM_I, 1, buffer, 1, IMU_I2C_TIMEOUT_MS);
 8005582:	4b0d      	ldr	r3, [pc, #52]	; (80055b8 <imuPort_Check+0x3c>)
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	b29b      	uxth	r3, r3
 8005588:	005b      	lsls	r3, r3, #1
 800558a:	b299      	uxth	r1, r3
 800558c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005590:	9302      	str	r3, [sp, #8]
 8005592:	2301      	movs	r3, #1
 8005594:	9301      	str	r3, [sp, #4]
 8005596:	1d3b      	adds	r3, r7, #4
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	2301      	movs	r3, #1
 800559c:	2275      	movs	r2, #117	; 0x75
 800559e:	4807      	ldr	r0, [pc, #28]	; (80055bc <imuPort_Check+0x40>)
 80055a0:	f7fc fe0e 	bl	80021c0 <HAL_I2C_Mem_Read>

    return (buffer[0] == WHO_AM_I_9250_ANS)? true : false;
 80055a4:	793b      	ldrb	r3, [r7, #4]
 80055a6:	2b71      	cmp	r3, #113	; 0x71
 80055a8:	bf0c      	ite	eq
 80055aa:	2301      	moveq	r3, #1
 80055ac:	2300      	movne	r3, #0
 80055ae:	b2db      	uxtb	r3, r3
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	20000015 	.word	0x20000015
 80055bc:	20000094 	.word	0x20000094

080055c0 <imuPort_GyroReadData>:
	// todo: not implemented yet
	return false;
}

bool imuPort_GyroReadData(gyro_t *gyro)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
	imuPort_readProcessedData();
 80055c8:	f000 f904 	bl	80057d4 <imuPort_readProcessedData>

	gyro->gx = sensorData.gx;
 80055cc:	4b09      	ldr	r3, [pc, #36]	; (80055f4 <imuPort_GyroReadData+0x34>)
 80055ce:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	801a      	strh	r2, [r3, #0]
	gyro->gy = sensorData.gy;
 80055d6:	4b07      	ldr	r3, [pc, #28]	; (80055f4 <imuPort_GyroReadData+0x34>)
 80055d8:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	805a      	strh	r2, [r3, #2]
	gyro->gz = sensorData.gz;
 80055e0:	4b04      	ldr	r3, [pc, #16]	; (80055f4 <imuPort_GyroReadData+0x34>)
 80055e2:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	809a      	strh	r2, [r3, #4]

	return true;
 80055ea:	2301      	movs	r3, #1
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3708      	adds	r7, #8
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	20000070 	.word	0x20000070

080055f8 <imuPort_calibrateGyro>:
	return false;
}

/// @brief Find offsets for each axis of gyroscope.
void imuPort_calibrateGyro()
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
    int32_t gx = 0;
 80055fe:	2300      	movs	r3, #0
 8005600:	60fb      	str	r3, [r7, #12]
    int32_t gy = 0;
 8005602:	2300      	movs	r3, #0
 8005604:	60bb      	str	r3, [r7, #8]
    int32_t gz = 0;
 8005606:	2300      	movs	r3, #0
 8005608:	607b      	str	r3, [r7, #4]

    // Save specified number of points
    for (uint16_t i = 0; i < IMU_GYRO_CAL_POINTS; i++)
 800560a:	2300      	movs	r3, #0
 800560c:	807b      	strh	r3, [r7, #2]
 800560e:	e01c      	b.n	800564a <imuPort_calibrateGyro+0x52>
    {
        imuPort_readRawData();
 8005610:	f000 f88c 	bl	800572c <imuPort_readRawData>

        gx += rawData.gx;
 8005614:	4b1f      	ldr	r3, [pc, #124]	; (8005694 <imuPort_calibrateGyro+0x9c>)
 8005616:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800561a:	461a      	mov	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4413      	add	r3, r2
 8005620:	60fb      	str	r3, [r7, #12]
        gy += rawData.gy;
 8005622:	4b1c      	ldr	r3, [pc, #112]	; (8005694 <imuPort_calibrateGyro+0x9c>)
 8005624:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005628:	461a      	mov	r2, r3
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	4413      	add	r3, r2
 800562e:	60bb      	str	r3, [r7, #8]
        gz += rawData.gz;
 8005630:	4b18      	ldr	r3, [pc, #96]	; (8005694 <imuPort_calibrateGyro+0x9c>)
 8005632:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005636:	461a      	mov	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4413      	add	r3, r2
 800563c:	607b      	str	r3, [r7, #4]

        HAL_Delay(10); // @todo: improve this method
 800563e:	200a      	movs	r0, #10
 8005640:	f7fb fcd8 	bl	8000ff4 <HAL_Delay>
    for (uint16_t i = 0; i < IMU_GYRO_CAL_POINTS; i++)
 8005644:	887b      	ldrh	r3, [r7, #2]
 8005646:	3301      	adds	r3, #1
 8005648:	807b      	strh	r3, [r7, #2]
 800564a:	887b      	ldrh	r3, [r7, #2]
 800564c:	2b09      	cmp	r3, #9
 800564e:	d9df      	bls.n	8005610 <imuPort_calibrateGyro+0x18>
    }

    // Average the saved data points to find the gyroscope offset
    gyroCal.gx = (int16_t)(gx/IMU_GYRO_CAL_POINTS);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4a11      	ldr	r2, [pc, #68]	; (8005698 <imuPort_calibrateGyro+0xa0>)
 8005654:	fb82 1203 	smull	r1, r2, r2, r3
 8005658:	1092      	asrs	r2, r2, #2
 800565a:	17db      	asrs	r3, r3, #31
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	b21a      	sxth	r2, r3
 8005660:	4b0e      	ldr	r3, [pc, #56]	; (800569c <imuPort_calibrateGyro+0xa4>)
 8005662:	801a      	strh	r2, [r3, #0]
    gyroCal.gy = (int16_t)(gy/IMU_GYRO_CAL_POINTS);
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	4a0c      	ldr	r2, [pc, #48]	; (8005698 <imuPort_calibrateGyro+0xa0>)
 8005668:	fb82 1203 	smull	r1, r2, r2, r3
 800566c:	1092      	asrs	r2, r2, #2
 800566e:	17db      	asrs	r3, r3, #31
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	b21a      	sxth	r2, r3
 8005674:	4b09      	ldr	r3, [pc, #36]	; (800569c <imuPort_calibrateGyro+0xa4>)
 8005676:	805a      	strh	r2, [r3, #2]
    gyroCal.gz = (int16_t)(gz/IMU_GYRO_CAL_POINTS);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a07      	ldr	r2, [pc, #28]	; (8005698 <imuPort_calibrateGyro+0xa0>)
 800567c:	fb82 1203 	smull	r1, r2, r2, r3
 8005680:	1092      	asrs	r2, r2, #2
 8005682:	17db      	asrs	r3, r3, #31
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	b21a      	sxth	r2, r3
 8005688:	4b04      	ldr	r3, [pc, #16]	; (800569c <imuPort_calibrateGyro+0xa4>)
 800568a:	809a      	strh	r2, [r3, #4]
}
 800568c:	bf00      	nop
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	2000005c 	.word	0x2000005c
 8005698:	66666667 	.word	0x66666667
 800569c:	20000084 	.word	0x20000084

080056a0 <imuPort_begin>:

static bool imuPort_begin(uint8_t accScale, uint8_t gyroScale)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b088      	sub	sp, #32
 80056a4:	af04      	add	r7, sp, #16
 80056a6:	4603      	mov	r3, r0
 80056a8:	460a      	mov	r2, r1
 80056aa:	71fb      	strb	r3, [r7, #7]
 80056ac:	4613      	mov	r3, r2
 80056ae:	71bb      	strb	r3, [r7, #6]
    // Initialize variables
    uint8_t buffer[1];

    // Confirm device
    HAL_I2C_Mem_Read(&hi2c1, imu_i2cAddress<< 1, WHO_AM_I, 1, buffer, 1, IMU_I2C_TIMEOUT_MS);
 80056b0:	4b1c      	ldr	r3, [pc, #112]	; (8005724 <imuPort_begin+0x84>)
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	005b      	lsls	r3, r3, #1
 80056b8:	b299      	uxth	r1, r3
 80056ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056be:	9302      	str	r3, [sp, #8]
 80056c0:	2301      	movs	r3, #1
 80056c2:	9301      	str	r3, [sp, #4]
 80056c4:	f107 030c 	add.w	r3, r7, #12
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	2301      	movs	r3, #1
 80056cc:	2275      	movs	r2, #117	; 0x75
 80056ce:	4816      	ldr	r0, [pc, #88]	; (8005728 <imuPort_begin+0x88>)
 80056d0:	f7fc fd76 	bl	80021c0 <HAL_I2C_Mem_Read>


    if (buffer[0] == WHO_AM_I_9250_ANS)
 80056d4:	7b3b      	ldrb	r3, [r7, #12]
 80056d6:	2b71      	cmp	r3, #113	; 0x71
 80056d8:	d11f      	bne.n	800571a <imuPort_begin+0x7a>
    {
        // Startup / reset the sensor
    	buffer[0] = 0x00;
 80056da:	2300      	movs	r3, #0
 80056dc:	733b      	strb	r3, [r7, #12]
        HAL_I2C_Mem_Write(&hi2c1, imu_i2cAddress<< 1, PWR_MGMT_1, 1, buffer, 1, IMU_I2C_TIMEOUT_MS);
 80056de:	4b11      	ldr	r3, [pc, #68]	; (8005724 <imuPort_begin+0x84>)
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	b299      	uxth	r1, r3
 80056e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056ec:	9302      	str	r3, [sp, #8]
 80056ee:	2301      	movs	r3, #1
 80056f0:	9301      	str	r3, [sp, #4]
 80056f2:	f107 030c 	add.w	r3, r7, #12
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	2301      	movs	r3, #1
 80056fa:	226b      	movs	r2, #107	; 0x6b
 80056fc:	480a      	ldr	r0, [pc, #40]	; (8005728 <imuPort_begin+0x88>)
 80056fe:	f7fc fc65 	bl	8001fcc <HAL_I2C_Mem_Write>

        // Set the full scale ranges
        imuPort_writeAccFullScaleRange(accScale);
 8005702:	79fb      	ldrb	r3, [r7, #7]
 8005704:	4618      	mov	r0, r3
 8005706:	f000 f8f7 	bl	80058f8 <imuPort_writeAccFullScaleRange>

        imuPort_writeGyroFullScaleRange(gyroScale);
 800570a:	79bb      	ldrb	r3, [r7, #6]
 800570c:	4618      	mov	r0, r3
 800570e:	f000 f98f 	bl	8005a30 <imuPort_writeGyroFullScaleRange>
        imuPort_calibrateGyro();
 8005712:	f7ff ff71 	bl	80055f8 <imuPort_calibrateGyro>

        return true;
 8005716:	2301      	movs	r3, #1
 8005718:	e000      	b.n	800571c <imuPort_begin+0x7c>
    }
    else
    {
        return false;
 800571a:	2300      	movs	r3, #0
    }
}
 800571c:	4618      	mov	r0, r3
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	20000015 	.word	0x20000015
 8005728:	20000094 	.word	0x20000094

0800572c <imuPort_readRawData>:

static void imuPort_readRawData()
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b088      	sub	sp, #32
 8005730:	af04      	add	r7, sp, #16
    // Init buffer
    uint8_t buffer[14];

    // Subroutine for reading the raw data
    HAL_I2C_Mem_Read(&hi2c1, imu_i2cAddress<< 1, ACCEL_XOUT_H, 1, buffer, 14, IMU_I2C_TIMEOUT_MS);
 8005732:	4b25      	ldr	r3, [pc, #148]	; (80057c8 <imuPort_readRawData+0x9c>)
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	b29b      	uxth	r3, r3
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	b299      	uxth	r1, r3
 800573c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005740:	9302      	str	r3, [sp, #8]
 8005742:	230e      	movs	r3, #14
 8005744:	9301      	str	r3, [sp, #4]
 8005746:	463b      	mov	r3, r7
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	2301      	movs	r3, #1
 800574c:	223b      	movs	r2, #59	; 0x3b
 800574e:	481f      	ldr	r0, [pc, #124]	; (80057cc <imuPort_readRawData+0xa0>)
 8005750:	f7fc fd36 	bl	80021c0 <HAL_I2C_Mem_Read>

    // Bit shift the data
    rawData.ax = buffer[0] << 8 | buffer[1];
 8005754:	783b      	ldrb	r3, [r7, #0]
 8005756:	021b      	lsls	r3, r3, #8
 8005758:	b21a      	sxth	r2, r3
 800575a:	787b      	ldrb	r3, [r7, #1]
 800575c:	b21b      	sxth	r3, r3
 800575e:	4313      	orrs	r3, r2
 8005760:	b21a      	sxth	r2, r3
 8005762:	4b1b      	ldr	r3, [pc, #108]	; (80057d0 <imuPort_readRawData+0xa4>)
 8005764:	801a      	strh	r2, [r3, #0]
    rawData.ay = buffer[2] << 8 | buffer[3];
 8005766:	78bb      	ldrb	r3, [r7, #2]
 8005768:	021b      	lsls	r3, r3, #8
 800576a:	b21a      	sxth	r2, r3
 800576c:	78fb      	ldrb	r3, [r7, #3]
 800576e:	b21b      	sxth	r3, r3
 8005770:	4313      	orrs	r3, r2
 8005772:	b21a      	sxth	r2, r3
 8005774:	4b16      	ldr	r3, [pc, #88]	; (80057d0 <imuPort_readRawData+0xa4>)
 8005776:	805a      	strh	r2, [r3, #2]
    rawData.az = buffer[4] << 8 | buffer[5];
 8005778:	793b      	ldrb	r3, [r7, #4]
 800577a:	021b      	lsls	r3, r3, #8
 800577c:	b21a      	sxth	r2, r3
 800577e:	797b      	ldrb	r3, [r7, #5]
 8005780:	b21b      	sxth	r3, r3
 8005782:	4313      	orrs	r3, r2
 8005784:	b21a      	sxth	r2, r3
 8005786:	4b12      	ldr	r3, [pc, #72]	; (80057d0 <imuPort_readRawData+0xa4>)
 8005788:	809a      	strh	r2, [r3, #4]
    // temperature = buffer[6] << 8 | buffer[7];
    rawData.gx = buffer[8] << 8 | buffer[9];
 800578a:	7a3b      	ldrb	r3, [r7, #8]
 800578c:	021b      	lsls	r3, r3, #8
 800578e:	b21a      	sxth	r2, r3
 8005790:	7a7b      	ldrb	r3, [r7, #9]
 8005792:	b21b      	sxth	r3, r3
 8005794:	4313      	orrs	r3, r2
 8005796:	b21a      	sxth	r2, r3
 8005798:	4b0d      	ldr	r3, [pc, #52]	; (80057d0 <imuPort_readRawData+0xa4>)
 800579a:	80da      	strh	r2, [r3, #6]
    rawData.gy = buffer[10] << 8 | buffer[11];
 800579c:	7abb      	ldrb	r3, [r7, #10]
 800579e:	021b      	lsls	r3, r3, #8
 80057a0:	b21a      	sxth	r2, r3
 80057a2:	7afb      	ldrb	r3, [r7, #11]
 80057a4:	b21b      	sxth	r3, r3
 80057a6:	4313      	orrs	r3, r2
 80057a8:	b21a      	sxth	r2, r3
 80057aa:	4b09      	ldr	r3, [pc, #36]	; (80057d0 <imuPort_readRawData+0xa4>)
 80057ac:	811a      	strh	r2, [r3, #8]
    rawData.gz = buffer[12] << 8 | buffer[13];
 80057ae:	7b3b      	ldrb	r3, [r7, #12]
 80057b0:	021b      	lsls	r3, r3, #8
 80057b2:	b21a      	sxth	r2, r3
 80057b4:	7b7b      	ldrb	r3, [r7, #13]
 80057b6:	b21b      	sxth	r3, r3
 80057b8:	4313      	orrs	r3, r2
 80057ba:	b21a      	sxth	r2, r3
 80057bc:	4b04      	ldr	r3, [pc, #16]	; (80057d0 <imuPort_readRawData+0xa4>)
 80057be:	815a      	strh	r2, [r3, #10]
}
 80057c0:	bf00      	nop
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	20000015 	.word	0x20000015
 80057cc:	20000094 	.word	0x20000094
 80057d0:	2000005c 	.word	0x2000005c

080057d4 <imuPort_readProcessedData>:


static void imuPort_readProcessedData()
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	af00      	add	r7, sp, #0
    // Get raw values from the IMU
    imuPort_readRawData();
 80057d8:	f7ff ffa8 	bl	800572c <imuPort_readRawData>

    // Convert accelerometer values to g's
    sensorData.ax = rawData.ax/accScaleFactor;
 80057dc:	4b41      	ldr	r3, [pc, #260]	; (80058e4 <imuPort_readProcessedData+0x110>)
 80057de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057e2:	ee07 3a90 	vmov	s15, r3
 80057e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80057ea:	4b3f      	ldr	r3, [pc, #252]	; (80058e8 <imuPort_readProcessedData+0x114>)
 80057ec:	ed93 7a00 	vldr	s14, [r3]
 80057f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057f8:	ee17 3a90 	vmov	r3, s15
 80057fc:	b21a      	sxth	r2, r3
 80057fe:	4b3b      	ldr	r3, [pc, #236]	; (80058ec <imuPort_readProcessedData+0x118>)
 8005800:	801a      	strh	r2, [r3, #0]
    sensorData.ay = rawData.ay/accScaleFactor;
 8005802:	4b38      	ldr	r3, [pc, #224]	; (80058e4 <imuPort_readProcessedData+0x110>)
 8005804:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005808:	ee07 3a90 	vmov	s15, r3
 800580c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005810:	4b35      	ldr	r3, [pc, #212]	; (80058e8 <imuPort_readProcessedData+0x114>)
 8005812:	ed93 7a00 	vldr	s14, [r3]
 8005816:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800581a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800581e:	ee17 3a90 	vmov	r3, s15
 8005822:	b21a      	sxth	r2, r3
 8005824:	4b31      	ldr	r3, [pc, #196]	; (80058ec <imuPort_readProcessedData+0x118>)
 8005826:	805a      	strh	r2, [r3, #2]
    sensorData.az = rawData.az/accScaleFactor;
 8005828:	4b2e      	ldr	r3, [pc, #184]	; (80058e4 <imuPort_readProcessedData+0x110>)
 800582a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800582e:	ee07 3a90 	vmov	s15, r3
 8005832:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005836:	4b2c      	ldr	r3, [pc, #176]	; (80058e8 <imuPort_readProcessedData+0x114>)
 8005838:	ed93 7a00 	vldr	s14, [r3]
 800583c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005840:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005844:	ee17 3a90 	vmov	r3, s15
 8005848:	b21a      	sxth	r2, r3
 800584a:	4b28      	ldr	r3, [pc, #160]	; (80058ec <imuPort_readProcessedData+0x118>)
 800584c:	809a      	strh	r2, [r3, #4]

    // Compensate offset and convert to deg/s
    sensorData.gx = (rawData.gx-gyroCal.gx)/gyroScaleFactor;
 800584e:	4b25      	ldr	r3, [pc, #148]	; (80058e4 <imuPort_readProcessedData+0x110>)
 8005850:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005854:	461a      	mov	r2, r3
 8005856:	4b26      	ldr	r3, [pc, #152]	; (80058f0 <imuPort_readProcessedData+0x11c>)
 8005858:	f9b3 3000 	ldrsh.w	r3, [r3]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	ee07 3a90 	vmov	s15, r3
 8005862:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005866:	4b23      	ldr	r3, [pc, #140]	; (80058f4 <imuPort_readProcessedData+0x120>)
 8005868:	ed93 7a00 	vldr	s14, [r3]
 800586c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005870:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005874:	ee17 3a90 	vmov	r3, s15
 8005878:	b21a      	sxth	r2, r3
 800587a:	4b1c      	ldr	r3, [pc, #112]	; (80058ec <imuPort_readProcessedData+0x118>)
 800587c:	80da      	strh	r2, [r3, #6]
    sensorData.gy = (rawData.gy-gyroCal.gy)/gyroScaleFactor;
 800587e:	4b19      	ldr	r3, [pc, #100]	; (80058e4 <imuPort_readProcessedData+0x110>)
 8005880:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005884:	461a      	mov	r2, r3
 8005886:	4b1a      	ldr	r3, [pc, #104]	; (80058f0 <imuPort_readProcessedData+0x11c>)
 8005888:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	ee07 3a90 	vmov	s15, r3
 8005892:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005896:	4b17      	ldr	r3, [pc, #92]	; (80058f4 <imuPort_readProcessedData+0x120>)
 8005898:	ed93 7a00 	vldr	s14, [r3]
 800589c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058a4:	ee17 3a90 	vmov	r3, s15
 80058a8:	b21a      	sxth	r2, r3
 80058aa:	4b10      	ldr	r3, [pc, #64]	; (80058ec <imuPort_readProcessedData+0x118>)
 80058ac:	811a      	strh	r2, [r3, #8]
    sensorData.gz = (rawData.gz-gyroCal.gz)/gyroScaleFactor;
 80058ae:	4b0d      	ldr	r3, [pc, #52]	; (80058e4 <imuPort_readProcessedData+0x110>)
 80058b0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80058b4:	461a      	mov	r2, r3
 80058b6:	4b0e      	ldr	r3, [pc, #56]	; (80058f0 <imuPort_readProcessedData+0x11c>)
 80058b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	ee07 3a90 	vmov	s15, r3
 80058c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80058c6:	4b0b      	ldr	r3, [pc, #44]	; (80058f4 <imuPort_readProcessedData+0x120>)
 80058c8:	ed93 7a00 	vldr	s14, [r3]
 80058cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058d4:	ee17 3a90 	vmov	r3, s15
 80058d8:	b21a      	sxth	r2, r3
 80058da:	4b04      	ldr	r3, [pc, #16]	; (80058ec <imuPort_readProcessedData+0x118>)
 80058dc:	815a      	strh	r2, [r3, #10]
}
 80058de:	bf00      	nop
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	2000005c 	.word	0x2000005c
 80058e8:	2000008c 	.word	0x2000008c
 80058ec:	20000070 	.word	0x20000070
 80058f0:	20000084 	.word	0x20000084
 80058f4:	20000090 	.word	0x20000090

080058f8 <imuPort_writeAccFullScaleRange>:

static void imuPort_writeAccFullScaleRange(uint8_t accScale)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b088      	sub	sp, #32
 80058fc:	af04      	add	r7, sp, #16
 80058fe:	4603      	mov	r3, r0
 8005900:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t select;

    // Set the value
    switch (accScale)
 8005902:	79fb      	ldrb	r3, [r7, #7]
 8005904:	2b03      	cmp	r3, #3
 8005906:	d86f      	bhi.n	80059e8 <imuPort_writeAccFullScaleRange+0xf0>
 8005908:	a201      	add	r2, pc, #4	; (adr r2, 8005910 <imuPort_writeAccFullScaleRange+0x18>)
 800590a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590e:	bf00      	nop
 8005910:	08005921 	.word	0x08005921
 8005914:	08005953 	.word	0x08005953
 8005918:	08005985 	.word	0x08005985
 800591c:	080059b7 	.word	0x080059b7
    {
    case AFSR_2G:
        accScaleFactor = 16384.0;
 8005920:	4b40      	ldr	r3, [pc, #256]	; (8005a24 <imuPort_writeAccFullScaleRange+0x12c>)
 8005922:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8005926:	601a      	str	r2, [r3, #0]
        select = 0x00;
 8005928:	2300      	movs	r3, #0
 800592a:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, imu_i2cAddress<< 1, ACCEL_CONFIG, 1, &select, 1, IMU_I2C_TIMEOUT_MS);
 800592c:	4b3e      	ldr	r3, [pc, #248]	; (8005a28 <imuPort_writeAccFullScaleRange+0x130>)
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	b29b      	uxth	r3, r3
 8005932:	005b      	lsls	r3, r3, #1
 8005934:	b299      	uxth	r1, r3
 8005936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800593a:	9302      	str	r3, [sp, #8]
 800593c:	2301      	movs	r3, #1
 800593e:	9301      	str	r3, [sp, #4]
 8005940:	f107 030f 	add.w	r3, r7, #15
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	2301      	movs	r3, #1
 8005948:	221c      	movs	r2, #28
 800594a:	4838      	ldr	r0, [pc, #224]	; (8005a2c <imuPort_writeAccFullScaleRange+0x134>)
 800594c:	f7fc fb3e 	bl	8001fcc <HAL_I2C_Mem_Write>
        break;
 8005950:	e063      	b.n	8005a1a <imuPort_writeAccFullScaleRange+0x122>

    case AFSR_4G:
        accScaleFactor = 8192.0;
 8005952:	4b34      	ldr	r3, [pc, #208]	; (8005a24 <imuPort_writeAccFullScaleRange+0x12c>)
 8005954:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8005958:	601a      	str	r2, [r3, #0]
        select = 0x08;
 800595a:	2308      	movs	r3, #8
 800595c:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, imu_i2cAddress<< 1, ACCEL_CONFIG, 1, &select, 1, IMU_I2C_TIMEOUT_MS);
 800595e:	4b32      	ldr	r3, [pc, #200]	; (8005a28 <imuPort_writeAccFullScaleRange+0x130>)
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	b29b      	uxth	r3, r3
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	b299      	uxth	r1, r3
 8005968:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800596c:	9302      	str	r3, [sp, #8]
 800596e:	2301      	movs	r3, #1
 8005970:	9301      	str	r3, [sp, #4]
 8005972:	f107 030f 	add.w	r3, r7, #15
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	2301      	movs	r3, #1
 800597a:	221c      	movs	r2, #28
 800597c:	482b      	ldr	r0, [pc, #172]	; (8005a2c <imuPort_writeAccFullScaleRange+0x134>)
 800597e:	f7fc fb25 	bl	8001fcc <HAL_I2C_Mem_Write>
        break;
 8005982:	e04a      	b.n	8005a1a <imuPort_writeAccFullScaleRange+0x122>

    case AFSR_8G:
        accScaleFactor = 4096.0;
 8005984:	4b27      	ldr	r3, [pc, #156]	; (8005a24 <imuPort_writeAccFullScaleRange+0x12c>)
 8005986:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800598a:	601a      	str	r2, [r3, #0]
        select = 0x10;
 800598c:	2310      	movs	r3, #16
 800598e:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, imu_i2cAddress<< 1, ACCEL_CONFIG, 1, &select, 1, IMU_I2C_TIMEOUT_MS);
 8005990:	4b25      	ldr	r3, [pc, #148]	; (8005a28 <imuPort_writeAccFullScaleRange+0x130>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	b29b      	uxth	r3, r3
 8005996:	005b      	lsls	r3, r3, #1
 8005998:	b299      	uxth	r1, r3
 800599a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800599e:	9302      	str	r3, [sp, #8]
 80059a0:	2301      	movs	r3, #1
 80059a2:	9301      	str	r3, [sp, #4]
 80059a4:	f107 030f 	add.w	r3, r7, #15
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	2301      	movs	r3, #1
 80059ac:	221c      	movs	r2, #28
 80059ae:	481f      	ldr	r0, [pc, #124]	; (8005a2c <imuPort_writeAccFullScaleRange+0x134>)
 80059b0:	f7fc fb0c 	bl	8001fcc <HAL_I2C_Mem_Write>
        break;
 80059b4:	e031      	b.n	8005a1a <imuPort_writeAccFullScaleRange+0x122>

    case AFSR_16G:
        accScaleFactor = 2048.0;
 80059b6:	4b1b      	ldr	r3, [pc, #108]	; (8005a24 <imuPort_writeAccFullScaleRange+0x12c>)
 80059b8:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 80059bc:	601a      	str	r2, [r3, #0]
        select = 0x18;
 80059be:	2318      	movs	r3, #24
 80059c0:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, imu_i2cAddress<< 1, ACCEL_CONFIG, 1, &select, 1, IMU_I2C_TIMEOUT_MS);
 80059c2:	4b19      	ldr	r3, [pc, #100]	; (8005a28 <imuPort_writeAccFullScaleRange+0x130>)
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	b299      	uxth	r1, r3
 80059cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059d0:	9302      	str	r3, [sp, #8]
 80059d2:	2301      	movs	r3, #1
 80059d4:	9301      	str	r3, [sp, #4]
 80059d6:	f107 030f 	add.w	r3, r7, #15
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	2301      	movs	r3, #1
 80059de:	221c      	movs	r2, #28
 80059e0:	4812      	ldr	r0, [pc, #72]	; (8005a2c <imuPort_writeAccFullScaleRange+0x134>)
 80059e2:	f7fc faf3 	bl	8001fcc <HAL_I2C_Mem_Write>
        break;
 80059e6:	e018      	b.n	8005a1a <imuPort_writeAccFullScaleRange+0x122>

    default:
        accScaleFactor = 8192.0;
 80059e8:	4b0e      	ldr	r3, [pc, #56]	; (8005a24 <imuPort_writeAccFullScaleRange+0x12c>)
 80059ea:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80059ee:	601a      	str	r2, [r3, #0]
        select = 0x08;
 80059f0:	2308      	movs	r3, #8
 80059f2:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, imu_i2cAddress<< 1, ACCEL_CONFIG, 1, &select, 1, IMU_I2C_TIMEOUT_MS);
 80059f4:	4b0c      	ldr	r3, [pc, #48]	; (8005a28 <imuPort_writeAccFullScaleRange+0x130>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	b299      	uxth	r1, r3
 80059fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a02:	9302      	str	r3, [sp, #8]
 8005a04:	2301      	movs	r3, #1
 8005a06:	9301      	str	r3, [sp, #4]
 8005a08:	f107 030f 	add.w	r3, r7, #15
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	2301      	movs	r3, #1
 8005a10:	221c      	movs	r2, #28
 8005a12:	4806      	ldr	r0, [pc, #24]	; (8005a2c <imuPort_writeAccFullScaleRange+0x134>)
 8005a14:	f7fc fada 	bl	8001fcc <HAL_I2C_Mem_Write>
        break;
 8005a18:	bf00      	nop
    }
}
 8005a1a:	bf00      	nop
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	2000008c 	.word	0x2000008c
 8005a28:	20000015 	.word	0x20000015
 8005a2c:	20000094 	.word	0x20000094

08005a30 <imuPort_writeGyroFullScaleRange>:

static void imuPort_writeGyroFullScaleRange(uint8_t gyroScale)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b088      	sub	sp, #32
 8005a34:	af04      	add	r7, sp, #16
 8005a36:	4603      	mov	r3, r0
 8005a38:	71fb      	strb	r3, [r7, #7]
    // Variable init
    uint8_t select;

    // Set the value
    switch (gyroScale)
 8005a3a:	79fb      	ldrb	r3, [r7, #7]
 8005a3c:	2b03      	cmp	r3, #3
 8005a3e:	d86b      	bhi.n	8005b18 <imuPort_writeGyroFullScaleRange+0xe8>
 8005a40:	a201      	add	r2, pc, #4	; (adr r2, 8005a48 <imuPort_writeGyroFullScaleRange+0x18>)
 8005a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a46:	bf00      	nop
 8005a48:	08005a59 	.word	0x08005a59
 8005a4c:	08005a89 	.word	0x08005a89
 8005a50:	08005ab9 	.word	0x08005ab9
 8005a54:	08005ae9 	.word	0x08005ae9
    {
    case GFSR_250DPS:
        gyroScaleFactor = 131.0;
 8005a58:	4b3d      	ldr	r3, [pc, #244]	; (8005b50 <imuPort_writeGyroFullScaleRange+0x120>)
 8005a5a:	4a3e      	ldr	r2, [pc, #248]	; (8005b54 <imuPort_writeGyroFullScaleRange+0x124>)
 8005a5c:	601a      	str	r2, [r3, #0]
        select = 0x00;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, imu_i2cAddress<< 1, GYRO_CONFIG, 1, &select, 1, IMU_I2C_TIMEOUT_MS);
 8005a62:	4b3d      	ldr	r3, [pc, #244]	; (8005b58 <imuPort_writeGyroFullScaleRange+0x128>)
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	b299      	uxth	r1, r3
 8005a6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a70:	9302      	str	r3, [sp, #8]
 8005a72:	2301      	movs	r3, #1
 8005a74:	9301      	str	r3, [sp, #4]
 8005a76:	f107 030f 	add.w	r3, r7, #15
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	221b      	movs	r2, #27
 8005a80:	4836      	ldr	r0, [pc, #216]	; (8005b5c <imuPort_writeGyroFullScaleRange+0x12c>)
 8005a82:	f7fc faa3 	bl	8001fcc <HAL_I2C_Mem_Write>
        break;
 8005a86:	e05f      	b.n	8005b48 <imuPort_writeGyroFullScaleRange+0x118>
    case GFSR_500DPS:
        gyroScaleFactor = 65.5;
 8005a88:	4b31      	ldr	r3, [pc, #196]	; (8005b50 <imuPort_writeGyroFullScaleRange+0x120>)
 8005a8a:	4a35      	ldr	r2, [pc, #212]	; (8005b60 <imuPort_writeGyroFullScaleRange+0x130>)
 8005a8c:	601a      	str	r2, [r3, #0]
        select = 0x08;
 8005a8e:	2308      	movs	r3, #8
 8005a90:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, imu_i2cAddress<< 1, GYRO_CONFIG, 1, &select, 1, IMU_I2C_TIMEOUT_MS);
 8005a92:	4b31      	ldr	r3, [pc, #196]	; (8005b58 <imuPort_writeGyroFullScaleRange+0x128>)
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	005b      	lsls	r3, r3, #1
 8005a9a:	b299      	uxth	r1, r3
 8005a9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005aa0:	9302      	str	r3, [sp, #8]
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	9301      	str	r3, [sp, #4]
 8005aa6:	f107 030f 	add.w	r3, r7, #15
 8005aaa:	9300      	str	r3, [sp, #0]
 8005aac:	2301      	movs	r3, #1
 8005aae:	221b      	movs	r2, #27
 8005ab0:	482a      	ldr	r0, [pc, #168]	; (8005b5c <imuPort_writeGyroFullScaleRange+0x12c>)
 8005ab2:	f7fc fa8b 	bl	8001fcc <HAL_I2C_Mem_Write>
        break;
 8005ab6:	e047      	b.n	8005b48 <imuPort_writeGyroFullScaleRange+0x118>
    case GFSR_1000DPS:
        gyroScaleFactor = 32.8;
 8005ab8:	4b25      	ldr	r3, [pc, #148]	; (8005b50 <imuPort_writeGyroFullScaleRange+0x120>)
 8005aba:	4a2a      	ldr	r2, [pc, #168]	; (8005b64 <imuPort_writeGyroFullScaleRange+0x134>)
 8005abc:	601a      	str	r2, [r3, #0]
        select = 0x10;
 8005abe:	2310      	movs	r3, #16
 8005ac0:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, imu_i2cAddress<< 1, GYRO_CONFIG, 1, &select, 1, IMU_I2C_TIMEOUT_MS);
 8005ac2:	4b25      	ldr	r3, [pc, #148]	; (8005b58 <imuPort_writeGyroFullScaleRange+0x128>)
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	b299      	uxth	r1, r3
 8005acc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ad0:	9302      	str	r3, [sp, #8]
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	9301      	str	r3, [sp, #4]
 8005ad6:	f107 030f 	add.w	r3, r7, #15
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	2301      	movs	r3, #1
 8005ade:	221b      	movs	r2, #27
 8005ae0:	481e      	ldr	r0, [pc, #120]	; (8005b5c <imuPort_writeGyroFullScaleRange+0x12c>)
 8005ae2:	f7fc fa73 	bl	8001fcc <HAL_I2C_Mem_Write>
        break;
 8005ae6:	e02f      	b.n	8005b48 <imuPort_writeGyroFullScaleRange+0x118>
    case GFSR_2000DPS:
        gyroScaleFactor = 16.4;
 8005ae8:	4b19      	ldr	r3, [pc, #100]	; (8005b50 <imuPort_writeGyroFullScaleRange+0x120>)
 8005aea:	4a1f      	ldr	r2, [pc, #124]	; (8005b68 <imuPort_writeGyroFullScaleRange+0x138>)
 8005aec:	601a      	str	r2, [r3, #0]
        select = 0x18;
 8005aee:	2318      	movs	r3, #24
 8005af0:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, imu_i2cAddress<< 1, GYRO_CONFIG, 1, &select, 1, IMU_I2C_TIMEOUT_MS);
 8005af2:	4b19      	ldr	r3, [pc, #100]	; (8005b58 <imuPort_writeGyroFullScaleRange+0x128>)
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	005b      	lsls	r3, r3, #1
 8005afa:	b299      	uxth	r1, r3
 8005afc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b00:	9302      	str	r3, [sp, #8]
 8005b02:	2301      	movs	r3, #1
 8005b04:	9301      	str	r3, [sp, #4]
 8005b06:	f107 030f 	add.w	r3, r7, #15
 8005b0a:	9300      	str	r3, [sp, #0]
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	221b      	movs	r2, #27
 8005b10:	4812      	ldr	r0, [pc, #72]	; (8005b5c <imuPort_writeGyroFullScaleRange+0x12c>)
 8005b12:	f7fc fa5b 	bl	8001fcc <HAL_I2C_Mem_Write>
        break;
 8005b16:	e017      	b.n	8005b48 <imuPort_writeGyroFullScaleRange+0x118>
    default:
        gyroScaleFactor = 65.5;
 8005b18:	4b0d      	ldr	r3, [pc, #52]	; (8005b50 <imuPort_writeGyroFullScaleRange+0x120>)
 8005b1a:	4a11      	ldr	r2, [pc, #68]	; (8005b60 <imuPort_writeGyroFullScaleRange+0x130>)
 8005b1c:	601a      	str	r2, [r3, #0]
        select = 0x08;
 8005b1e:	2308      	movs	r3, #8
 8005b20:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(&hi2c1, imu_i2cAddress<< 1, GYRO_CONFIG, 1, &select, 1, IMU_I2C_TIMEOUT_MS);
 8005b22:	4b0d      	ldr	r3, [pc, #52]	; (8005b58 <imuPort_writeGyroFullScaleRange+0x128>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	b299      	uxth	r1, r3
 8005b2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b30:	9302      	str	r3, [sp, #8]
 8005b32:	2301      	movs	r3, #1
 8005b34:	9301      	str	r3, [sp, #4]
 8005b36:	f107 030f 	add.w	r3, r7, #15
 8005b3a:	9300      	str	r3, [sp, #0]
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	221b      	movs	r2, #27
 8005b40:	4806      	ldr	r0, [pc, #24]	; (8005b5c <imuPort_writeGyroFullScaleRange+0x12c>)
 8005b42:	f7fc fa43 	bl	8001fcc <HAL_I2C_Mem_Write>
        break;
 8005b46:	bf00      	nop
    }
}
 8005b48:	bf00      	nop
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	20000090 	.word	0x20000090
 8005b54:	43030000 	.word	0x43030000
 8005b58:	20000015 	.word	0x20000015
 8005b5c:	20000094 	.word	0x20000094
 8005b60:	42830000 	.word	0x42830000
 8005b64:	42033333 	.word	0x42033333
 8005b68:	41833333 	.word	0x41833333

08005b6c <I2C1_Init>:

static void I2C1_Init(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8005b70:	4b1b      	ldr	r3, [pc, #108]	; (8005be0 <I2C1_Init+0x74>)
 8005b72:	4a1c      	ldr	r2, [pc, #112]	; (8005be4 <I2C1_Init+0x78>)
 8005b74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8005b76:	4b1a      	ldr	r3, [pc, #104]	; (8005be0 <I2C1_Init+0x74>)
 8005b78:	4a1b      	ldr	r2, [pc, #108]	; (8005be8 <I2C1_Init+0x7c>)
 8005b7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005b7c:	4b18      	ldr	r3, [pc, #96]	; (8005be0 <I2C1_Init+0x74>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005b82:	4b17      	ldr	r3, [pc, #92]	; (8005be0 <I2C1_Init+0x74>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005b88:	4b15      	ldr	r3, [pc, #84]	; (8005be0 <I2C1_Init+0x74>)
 8005b8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005b8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005b90:	4b13      	ldr	r3, [pc, #76]	; (8005be0 <I2C1_Init+0x74>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005b96:	4b12      	ldr	r3, [pc, #72]	; (8005be0 <I2C1_Init+0x74>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005b9c:	4b10      	ldr	r3, [pc, #64]	; (8005be0 <I2C1_Init+0x74>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005ba2:	4b0f      	ldr	r3, [pc, #60]	; (8005be0 <I2C1_Init+0x74>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005ba8:	480d      	ldr	r0, [pc, #52]	; (8005be0 <I2C1_Init+0x74>)
 8005baa:	f7fc f8cb 	bl	8001d44 <HAL_I2C_Init>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d001      	beq.n	8005bb8 <I2C1_Init+0x4c>
  {
    Error_Handler();
 8005bb4:	f000 f81a 	bl	8005bec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005bb8:	2100      	movs	r1, #0
 8005bba:	4809      	ldr	r0, [pc, #36]	; (8005be0 <I2C1_Init+0x74>)
 8005bbc:	f7fd f8e6 	bl	8002d8c <HAL_I2CEx_ConfigAnalogFilter>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <I2C1_Init+0x5e>
  {
    Error_Handler();
 8005bc6:	f000 f811 	bl	8005bec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005bca:	2100      	movs	r1, #0
 8005bcc:	4804      	ldr	r0, [pc, #16]	; (8005be0 <I2C1_Init+0x74>)
 8005bce:	f7fd f919 	bl	8002e04 <HAL_I2CEx_ConfigDigitalFilter>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <I2C1_Init+0x70>
  {
    Error_Handler();
 8005bd8:	f000 f808 	bl	8005bec <Error_Handler>
  }
}
 8005bdc:	bf00      	nop
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	20000094 	.word	0x20000094
 8005be4:	40005400 	.word	0x40005400
 8005be8:	00061a80 	.word	0x00061a80

08005bec <Error_Handler>:

static void Error_Handler(void)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	af00      	add	r7, sp, #0
	/* Turn LED_IMU on */
	BSP_LED_On(LED_IMU);
 8005bf0:	2001      	movs	r0, #1
 8005bf2:	f7fb f93f 	bl	8000e74 <BSP_LED_On>
	while (1)
 8005bf6:	e7fe      	b.n	8005bf6 <Error_Handler+0xa>

08005bf8 <uartInit>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

bool_t uartInit()
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	af00      	add	r7, sp, #0
					  BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
	  - Stop Bit    = One Stop bit
	  - Parity      = NONE parity
	  - BaudRate    = 9600 baud
	  - Hardware flow control disabled (RTS and CTS signals) */
	UartHandle.Instance        = USARTx;
 8005bfc:	4b13      	ldr	r3, [pc, #76]	; (8005c4c <uartInit+0x54>)
 8005bfe:	4a14      	ldr	r2, [pc, #80]	; (8005c50 <uartInit+0x58>)
 8005c00:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate   = 9600;
 8005c02:	4b12      	ldr	r3, [pc, #72]	; (8005c4c <uartInit+0x54>)
 8005c04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005c08:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8005c0a:	4b10      	ldr	r3, [pc, #64]	; (8005c4c <uartInit+0x54>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8005c10:	4b0e      	ldr	r3, [pc, #56]	; (8005c4c <uartInit+0x54>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 8005c16:	4b0d      	ldr	r3, [pc, #52]	; (8005c4c <uartInit+0x54>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8005c1c:	4b0b      	ldr	r3, [pc, #44]	; (8005c4c <uartInit+0x54>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8005c22:	4b0a      	ldr	r3, [pc, #40]	; (8005c4c <uartInit+0x54>)
 8005c24:	220c      	movs	r2, #12
 8005c26:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c28:	4b08      	ldr	r3, [pc, #32]	; (8005c4c <uartInit+0x54>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8005c2e:	4807      	ldr	r0, [pc, #28]	; (8005c4c <uartInit+0x54>)
 8005c30:	f7fe ff5a 	bl	8004ae8 <HAL_UART_Init>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d003      	beq.n	8005c42 <uartInit+0x4a>
	{
		uartErrorHandler();
 8005c3a:	f000 f833 	bl	8005ca4 <uartErrorHandler>
		return false;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	e002      	b.n	8005c48 <uartInit+0x50>
	}
	else
	{
		uartPrintConfig();
 8005c42:	f000 f821 	bl	8005c88 <uartPrintConfig>
		return true;
 8005c46:	2301      	movs	r3, #1
	}
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	200000e8 	.word	0x200000e8
 8005c50:	40004800 	.word	0x40004800

08005c54 <uartSendString>:

void uartSendString(uint8_t * pstring)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
	if( HAL_UART_Transmit(&UartHandle, pstring, strlen((const char *)pstring), UART_TX_TIMEOUT)!= HAL_OK)
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7fa fac5 	bl	80001ec <strlen>
 8005c62:	4603      	mov	r3, r0
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c6a:	6879      	ldr	r1, [r7, #4]
 8005c6c:	4805      	ldr	r0, [pc, #20]	; (8005c84 <uartSendString+0x30>)
 8005c6e:	f7fe ff8b 	bl	8004b88 <HAL_UART_Transmit>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <uartSendString+0x28>
	{
		uartErrorHandler();
 8005c78:	f000 f814 	bl	8005ca4 <uartErrorHandler>
	}
}
 8005c7c:	bf00      	nop
 8005c7e:	3708      	adds	r7, #8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	200000e8 	.word	0x200000e8

08005c88 <uartPrintConfig>:
		uartErrorHandler();
	}
}

static void uartPrintConfig()
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	af00      	add	r7, sp, #0
	uartSendString((uint8_t*)motd);
 8005c8c:	4803      	ldr	r0, [pc, #12]	; (8005c9c <uartPrintConfig+0x14>)
 8005c8e:	f7ff ffe1 	bl	8005c54 <uartSendString>
	uartSendString((uint8_t*)config);
 8005c92:	4803      	ldr	r0, [pc, #12]	; (8005ca0 <uartPrintConfig+0x18>)
 8005c94:	f7ff ffde 	bl	8005c54 <uartSendString>
}
 8005c98:	bf00      	nop
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	08006394 	.word	0x08006394
 8005ca0:	08006434 	.word	0x08006434

08005ca4 <uartErrorHandler>:

static void uartErrorHandler()
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8005ca8:	2001      	movs	r0, #1
 8005caa:	f7fb f8e3 	bl	8000e74 <BSP_LED_On>
	while (1)
 8005cae:	e7fe      	b.n	8005cae <uartErrorHandler+0xa>

08005cb0 <log_Init>:
 */
static void log_StartMsg();


bool_t log_Init()
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	af00      	add	r7, sp, #0
	if (DEVICE_LOG_ENABLE)
	{
		if (uartInit())
 8005cb4:	f7ff ffa0 	bl	8005bf8 <uartInit>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <log_Init+0x16>
		{
			log_StartMsg();
 8005cbe:	f000 f845 	bl	8005d4c <log_StartMsg>
			return true;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e000      	b.n	8005cc8 <log_Init+0x18>
		}
		else
		{
			return false;
 8005cc6:	2300      	movs	r3, #0
	}
	else // log disabled, returns true to avoid error
	{
		return true;
	}
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <log_SendString>:

bool_t log_SendString(logType_t logType, char * pstring)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	6039      	str	r1, [r7, #0]
 8005cd6:	71fb      	strb	r3, [r7, #7]
	if (DEVICE_LOG_ENABLE)
	{
	// check string validity
		if (pstring==NULL)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d104      	bne.n	8005ce8 <log_SendString+0x1c>
		{
			uartSendString((uint8_t*)"<System Error: NULL String >\n\r");
 8005cde:	4815      	ldr	r0, [pc, #84]	; (8005d34 <log_SendString+0x68>)
 8005ce0:	f7ff ffb8 	bl	8005c54 <uartSendString>
			return false;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	e021      	b.n	8005d2c <log_SendString+0x60>
		}

		// log preamble
		switch (logType)
 8005ce8:	79fb      	ldrb	r3, [r7, #7]
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d00e      	beq.n	8005d0c <log_SendString+0x40>
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	dc10      	bgt.n	8005d14 <log_SendString+0x48>
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d002      	beq.n	8005cfc <log_SendString+0x30>
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d004      	beq.n	8005d04 <log_SendString+0x38>
 8005cfa:	e00b      	b.n	8005d14 <log_SendString+0x48>
		{
			case LOG_APP_INFO:
				uartSendString((uint8_t*)"<APP Info: ");
 8005cfc:	480e      	ldr	r0, [pc, #56]	; (8005d38 <log_SendString+0x6c>)
 8005cfe:	f7ff ffa9 	bl	8005c54 <uartSendString>
				break;
 8005d02:	e00c      	b.n	8005d1e <log_SendString+0x52>

			case LOG_APP_ERROR:
				uartSendString((uint8_t*)"<APP Error: ");
 8005d04:	480d      	ldr	r0, [pc, #52]	; (8005d3c <log_SendString+0x70>)
 8005d06:	f7ff ffa5 	bl	8005c54 <uartSendString>
				break;
 8005d0a:	e008      	b.n	8005d1e <log_SendString+0x52>

			case LOG_SYSTEM_ERROR:
				uartSendString((uint8_t*)"<System Error: ");
 8005d0c:	480c      	ldr	r0, [pc, #48]	; (8005d40 <log_SendString+0x74>)
 8005d0e:	f7ff ffa1 	bl	8005c54 <uartSendString>
				break;
 8005d12:	e004      	b.n	8005d1e <log_SendString+0x52>

			default:
				uartSendString((uint8_t*)"<System Error: Log Type Unknown");
 8005d14:	480b      	ldr	r0, [pc, #44]	; (8005d44 <log_SendString+0x78>)
 8005d16:	f7ff ff9d 	bl	8005c54 <uartSendString>
				return false;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	e006      	b.n	8005d2c <log_SendString+0x60>
				//break;
		}

		// string
		uartSendString((uint8_t*)pstring);
 8005d1e:	6838      	ldr	r0, [r7, #0]
 8005d20:	f7ff ff98 	bl	8005c54 <uartSendString>

		// log postamble
		uartSendString((uint8_t*)">\n\r");
 8005d24:	4808      	ldr	r0, [pc, #32]	; (8005d48 <log_SendString+0x7c>)
 8005d26:	f7ff ff95 	bl	8005c54 <uartSendString>

		return true;
 8005d2a:	2301      	movs	r3, #1
	}
	else // log disabled, returns true to avoid error
	{
		return true;
	}
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3708      	adds	r7, #8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	080062ec 	.word	0x080062ec
 8005d38:	0800630c 	.word	0x0800630c
 8005d3c:	08006318 	.word	0x08006318
 8005d40:	08006328 	.word	0x08006328
 8005d44:	08006338 	.word	0x08006338
 8005d48:	08006358 	.word	0x08006358

08005d4c <log_StartMsg>:


static void log_StartMsg()
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	af00      	add	r7, sp, #0
	log_SendString(LOG_APP_INFO,DEVICE_NAME);
 8005d50:	4904      	ldr	r1, [pc, #16]	; (8005d64 <log_StartMsg+0x18>)
 8005d52:	2000      	movs	r0, #0
 8005d54:	f7ff ffba 	bl	8005ccc <log_SendString>
	log_SendString(LOG_APP_INFO,DEVICE_FIRMWARE_VERSION);
 8005d58:	4903      	ldr	r1, [pc, #12]	; (8005d68 <log_StartMsg+0x1c>)
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	f7ff ffb6 	bl	8005ccc <log_SendString>
}
 8005d60:	bf00      	nop
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	0800635c 	.word	0x0800635c
 8005d68:	08006368 	.word	0x08006368

08005d6c <npx_Init>:
#include "npx_port.h"

#define NPX_LED_VALUE 50

void npx_Init()
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	af00      	add	r7, sp, #0
	npxPort_Init();
 8005d70:	f000 f817 	bl	8005da2 <npxPort_Init>
}
 8005d74:	bf00      	nop
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <npx_SetIdle>:
{
	npxPort_ClearLEDs();
}

void npx_SetIdle()
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	af00      	add	r7, sp, #0
	npxPort_SetGreen(NPX_LED_VALUE);
 8005d7c:	2032      	movs	r0, #50	; 0x32
 8005d7e:	f000 f857 	bl	8005e30 <npxPort_SetGreen>
}
 8005d82:	bf00      	nop
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <npx_SetPositive>:

void npx_SetPositive()
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	af00      	add	r7, sp, #0
	npxPort_SetRed(NPX_LED_VALUE);
 8005d8a:	2032      	movs	r0, #50	; 0x32
 8005d8c:	f000 f82e 	bl	8005dec <npxPort_SetRed>
}
 8005d90:	bf00      	nop
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <npx_SetNegative>:

void npx_SetNegative()
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	af00      	add	r7, sp, #0
	npxPort_SetBlue(NPX_LED_VALUE);
 8005d98:	2032      	movs	r0, #50	; 0x32
 8005d9a:	f000 f86b 	bl	8005e74 <npxPort_SetBlue>
}
 8005d9e:	bf00      	nop
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <npxPort_Init>:
 /**
 * NeoPixels Port Functions
 */

void npxPort_Init()
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	af00      	add	r7, sp, #0
	DMA_Init();
 8005da6:	f000 f9e1 	bl	800616c <DMA_Init>
	TIM1_Init();
 8005daa:	f000 f8c5 	bl	8005f38 <TIM1_Init>

	npxPort_initialSequence();
 8005dae:	f000 f963 	bl	8006078 <npxPort_initialSequence>
}
 8005db2:	bf00      	nop
 8005db4:	bd80      	pop	{r7, pc}
	...

08005db8 <npxPort_ClearLEDs>:

void npxPort_ClearLEDs()
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
	for (int i= 0; i<NEOPIXEL_LED_QTY; i++)
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	607b      	str	r3, [r7, #4]
 8005dc2:	e007      	b.n	8005dd4 <npxPort_ClearLEDs+0x1c>
	{
		pixels[i].value = 0;
 8005dc4:	4a08      	ldr	r2, [pc, #32]	; (8005de8 <npxPort_ClearLEDs+0x30>)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2100      	movs	r1, #0
 8005dca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i= 0; i<NEOPIXEL_LED_QTY; i++)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	607b      	str	r3, [r7, #4]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b13      	cmp	r3, #19
 8005dd8:	ddf4      	ble.n	8005dc4 <npxPort_ClearLEDs+0xc>
	}
	npxPort_SetLEDs();
 8005dda:	f000 f86b 	bl	8005eb4 <npxPort_SetLEDs>
}
 8005dde:	bf00      	nop
 8005de0:	3708      	adds	r7, #8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	200001d8 	.word	0x200001d8

08005dec <npxPort_SetRed>:

void npxPort_SetRed(uint8_t bright)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	4603      	mov	r3, r0
 8005df4:	71fb      	strb	r3, [r7, #7]
	for (int i= 0; i<NEOPIXEL_LED_QTY; i++)
 8005df6:	2300      	movs	r3, #0
 8005df8:	60fb      	str	r3, [r7, #12]
 8005dfa:	e00d      	b.n	8005e18 <npxPort_SetRed+0x2c>
	{
		pixels[i].value = 0;
 8005dfc:	4a0b      	ldr	r2, [pc, #44]	; (8005e2c <npxPort_SetRed+0x40>)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2100      	movs	r1, #0
 8005e02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		pixels[i].colour.red = bright;
 8005e06:	4a09      	ldr	r2, [pc, #36]	; (8005e2c <npxPort_SetRed+0x40>)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	79fa      	ldrb	r2, [r7, #7]
 8005e10:	705a      	strb	r2, [r3, #1]
	for (int i= 0; i<NEOPIXEL_LED_QTY; i++)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	3301      	adds	r3, #1
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2b13      	cmp	r3, #19
 8005e1c:	ddee      	ble.n	8005dfc <npxPort_SetRed+0x10>
	}
	npxPort_SetLEDs();
 8005e1e:	f000 f849 	bl	8005eb4 <npxPort_SetLEDs>
}
 8005e22:	bf00      	nop
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	200001d8 	.word	0x200001d8

08005e30 <npxPort_SetGreen>:

void npxPort_SetGreen(uint8_t bright)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	4603      	mov	r3, r0
 8005e38:	71fb      	strb	r3, [r7, #7]
	for (int i= 0; i<NEOPIXEL_LED_QTY; i++)
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60fb      	str	r3, [r7, #12]
 8005e3e:	e00d      	b.n	8005e5c <npxPort_SetGreen+0x2c>
	{
		pixels[i].value = 0;
 8005e40:	4a0b      	ldr	r2, [pc, #44]	; (8005e70 <npxPort_SetGreen+0x40>)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2100      	movs	r1, #0
 8005e46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		pixels[i].colour.green = bright;
 8005e4a:	4a09      	ldr	r2, [pc, #36]	; (8005e70 <npxPort_SetGreen+0x40>)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4413      	add	r3, r2
 8005e52:	79fa      	ldrb	r2, [r7, #7]
 8005e54:	709a      	strb	r2, [r3, #2]
	for (int i= 0; i<NEOPIXEL_LED_QTY; i++)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2b13      	cmp	r3, #19
 8005e60:	ddee      	ble.n	8005e40 <npxPort_SetGreen+0x10>
	}
	npxPort_SetLEDs();
 8005e62:	f000 f827 	bl	8005eb4 <npxPort_SetLEDs>
}
 8005e66:	bf00      	nop
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	200001d8 	.word	0x200001d8

08005e74 <npxPort_SetBlue>:

void npxPort_SetBlue(uint8_t bright)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	71fb      	strb	r3, [r7, #7]
	for (int i= 0; i<NEOPIXEL_LED_QTY; i++)
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	e00c      	b.n	8005e9e <npxPort_SetBlue+0x2a>
	{
		pixels[i].value = 0;
 8005e84:	4a0a      	ldr	r2, [pc, #40]	; (8005eb0 <npxPort_SetBlue+0x3c>)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2100      	movs	r1, #0
 8005e8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		pixels[i].colour.blue = bright;
 8005e8e:	4908      	ldr	r1, [pc, #32]	; (8005eb0 <npxPort_SetBlue+0x3c>)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	79fa      	ldrb	r2, [r7, #7]
 8005e94:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
	for (int i= 0; i<NEOPIXEL_LED_QTY; i++)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	60fb      	str	r3, [r7, #12]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b13      	cmp	r3, #19
 8005ea2:	ddef      	ble.n	8005e84 <npxPort_SetBlue+0x10>
	}
	npxPort_SetLEDs();
 8005ea4:	f000 f806 	bl	8005eb4 <npxPort_SetLEDs>
}
 8005ea8:	bf00      	nop
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	200001d8 	.word	0x200001d8

08005eb4 <npxPort_SetLEDs>:


void npxPort_SetLEDs(void)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
	uint32_t iPWM = 0;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	60fb      	str	r3, [r7, #12]

	// Pixel to bit conversion for serial transmission
	for (int iPix = 0; iPix<NEOPIXEL_LED_QTY; iPix++)
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	60bb      	str	r3, [r7, #8]
 8005ec2:	e024      	b.n	8005f0e <npxPort_SetLEDs+0x5a>
	{
		for (int iBit = NEOPIXELS_LED_BIT_QTY-1; iBit>=0; iBit--)
 8005ec4:	2317      	movs	r3, #23
 8005ec6:	607b      	str	r3, [r7, #4]
 8005ec8:	e01b      	b.n	8005f02 <npxPort_SetLEDs+0x4e>
		{
			if (pixels[iPix].value & (1<<iBit))
 8005eca:	4a18      	ldr	r2, [pc, #96]	; (8005f2c <npxPort_SetLEDs+0x78>)
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8005eda:	4013      	ands	r3, r2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d005      	beq.n	8005eec <npxPort_SetLEDs+0x38>
			{
				// Send a 1: Set 68% PWMs duty cycle
				dmaData[iPWM] = NEOPIXELS_BIT_SET_TIM_COUNTER;
 8005ee0:	4a13      	ldr	r2, [pc, #76]	; (8005f30 <npxPort_SetLEDs+0x7c>)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	213d      	movs	r1, #61	; 0x3d
 8005ee6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8005eea:	e004      	b.n	8005ef6 <npxPort_SetLEDs+0x42>
			}
			else
			{
				// Send a 0: Set 32% PWMs duty cycle
				dmaData[iPWM] = NEOPIXELS_BIT_RESET_TIM_COUNTER;
 8005eec:	4a10      	ldr	r2, [pc, #64]	; (8005f30 <npxPort_SetLEDs+0x7c>)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	211d      	movs	r1, #29
 8005ef2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			iPWM++;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	60fb      	str	r3, [r7, #12]
		for (int iBit = NEOPIXELS_LED_BIT_QTY-1; iBit>=0; iBit--)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	3b01      	subs	r3, #1
 8005f00:	607b      	str	r3, [r7, #4]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	dae0      	bge.n	8005eca <npxPort_SetLEDs+0x16>
	for (int iPix = 0; iPix<NEOPIXEL_LED_QTY; iPix++)
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	60bb      	str	r3, [r7, #8]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b13      	cmp	r3, #19
 8005f12:	ddd7      	ble.n	8005ec4 <npxPort_SetLEDs+0x10>
	}

	//@todo: assert iPWM==NEOPIXELS_DMA_BUFFER_LENGTH

	// Send PWM signal via DMA controller
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)dmaData, iPWM);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	4a05      	ldr	r2, [pc, #20]	; (8005f30 <npxPort_SetLEDs+0x7c>)
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	4805      	ldr	r0, [pc, #20]	; (8005f34 <npxPort_SetLEDs+0x80>)
 8005f1e:	f7fd fcf1 	bl	8003904 <HAL_TIM_PWM_Start_DMA>
}
 8005f22:	bf00      	nop
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	200001d8 	.word	0x200001d8
 8005f30:	20000228 	.word	0x20000228
 8005f34:	20000130 	.word	0x20000130

08005f38 <TIM1_Init>:

static void TIM1_Init(void)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b096      	sub	sp, #88	; 0x58
 8005f3c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005f3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005f42:	2200      	movs	r2, #0
 8005f44:	601a      	str	r2, [r3, #0]
 8005f46:	605a      	str	r2, [r3, #4]
 8005f48:	609a      	str	r2, [r3, #8]
 8005f4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005f50:	2200      	movs	r2, #0
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	601a      	str	r2, [r3, #0]
 8005f5e:	605a      	str	r2, [r3, #4]
 8005f60:	609a      	str	r2, [r3, #8]
 8005f62:	60da      	str	r2, [r3, #12]
 8005f64:	611a      	str	r2, [r3, #16]
 8005f66:	615a      	str	r2, [r3, #20]
 8005f68:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005f6a:	1d3b      	adds	r3, r7, #4
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	2100      	movs	r1, #0
 8005f70:	4618      	mov	r0, r3
 8005f72:	f000 f92f 	bl	80061d4 <memset>

  htim1.Instance = TIM1;
 8005f76:	4b3e      	ldr	r3, [pc, #248]	; (8006070 <TIM1_Init+0x138>)
 8005f78:	4a3e      	ldr	r2, [pc, #248]	; (8006074 <TIM1_Init+0x13c>)
 8005f7a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005f7c:	4b3c      	ldr	r3, [pc, #240]	; (8006070 <TIM1_Init+0x138>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f82:	4b3b      	ldr	r3, [pc, #236]	; (8006070 <TIM1_Init+0x138>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8005f88:	4b39      	ldr	r3, [pc, #228]	; (8006070 <TIM1_Init+0x138>)
 8005f8a:	2259      	movs	r2, #89	; 0x59
 8005f8c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f8e:	4b38      	ldr	r3, [pc, #224]	; (8006070 <TIM1_Init+0x138>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005f94:	4b36      	ldr	r3, [pc, #216]	; (8006070 <TIM1_Init+0x138>)
 8005f96:	2200      	movs	r2, #0
 8005f98:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f9a:	4b35      	ldr	r3, [pc, #212]	; (8006070 <TIM1_Init+0x138>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005fa0:	4833      	ldr	r0, [pc, #204]	; (8006070 <TIM1_Init+0x138>)
 8005fa2:	f7fd fc07 	bl	80037b4 <HAL_TIM_Base_Init>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <TIM1_Init+0x78>
  {
    Error_Handler();
 8005fac:	f000 f90c 	bl	80061c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005fb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fb4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005fb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005fba:	4619      	mov	r1, r3
 8005fbc:	482c      	ldr	r0, [pc, #176]	; (8006070 <TIM1_Init+0x138>)
 8005fbe:	f7fd fffd 	bl	8003fbc <HAL_TIM_ConfigClockSource>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <TIM1_Init+0x94>
  {
    Error_Handler();
 8005fc8:	f000 f8fe 	bl	80061c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005fcc:	4828      	ldr	r0, [pc, #160]	; (8006070 <TIM1_Init+0x138>)
 8005fce:	f7fd fc40 	bl	8003852 <HAL_TIM_PWM_Init>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <TIM1_Init+0xa4>
  {
    Error_Handler();
 8005fd8:	f000 f8f6 	bl	80061c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005fe4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005fe8:	4619      	mov	r1, r3
 8005fea:	4821      	ldr	r0, [pc, #132]	; (8006070 <TIM1_Init+0x138>)
 8005fec:	f7fe fcae 	bl	800494c <HAL_TIMEx_MasterConfigSynchronization>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <TIM1_Init+0xc2>
  {
    Error_Handler();
 8005ff6:	f000 f8e7 	bl	80061c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ffa:	2360      	movs	r3, #96	; 0x60
 8005ffc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8005ffe:	2300      	movs	r3, #0
 8006000:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006002:	2300      	movs	r3, #0
 8006004:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006006:	2300      	movs	r3, #0
 8006008:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800600a:	2300      	movs	r3, #0
 800600c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800600e:	2300      	movs	r3, #0
 8006010:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006012:	2300      	movs	r3, #0
 8006014:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800601a:	2200      	movs	r2, #0
 800601c:	4619      	mov	r1, r3
 800601e:	4814      	ldr	r0, [pc, #80]	; (8006070 <TIM1_Init+0x138>)
 8006020:	f7fd ff0a 	bl	8003e38 <HAL_TIM_PWM_ConfigChannel>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <TIM1_Init+0xf6>
  {
    Error_Handler();
 800602a:	f000 f8cd 	bl	80061c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800602e:	2300      	movs	r3, #0
 8006030:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006032:	2300      	movs	r3, #0
 8006034:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006036:	2300      	movs	r3, #0
 8006038:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800603a:	2300      	movs	r3, #0
 800603c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800603e:	2300      	movs	r3, #0
 8006040:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006042:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006046:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006048:	2300      	movs	r3, #0
 800604a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800604c:	1d3b      	adds	r3, r7, #4
 800604e:	4619      	mov	r1, r3
 8006050:	4807      	ldr	r0, [pc, #28]	; (8006070 <TIM1_Init+0x138>)
 8006052:	f7fe fcf7 	bl	8004a44 <HAL_TIMEx_ConfigBreakDeadTime>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d001      	beq.n	8006060 <TIM1_Init+0x128>
  {
    Error_Handler();
 800605c:	f000 f8b4 	bl	80061c8 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 8006060:	4803      	ldr	r0, [pc, #12]	; (8006070 <TIM1_Init+0x138>)
 8006062:	f7fa fdc5 	bl	8000bf0 <HAL_TIM_MspPostInit>
}
 8006066:	bf00      	nop
 8006068:	3758      	adds	r7, #88	; 0x58
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	20000130 	.word	0x20000130
 8006074:	40010000 	.word	0x40010000

08006078 <npxPort_initialSequence>:

void npxPort_initialSequence()
{
 8006078:	b580      	push	{r7, lr}
 800607a:	af00      	add	r7, sp, #0
	npxPort_ClearLEDs(); HAL_Delay(100);
 800607c:	f7ff fe9c 	bl	8005db8 <npxPort_ClearLEDs>
 8006080:	2064      	movs	r0, #100	; 0x64
 8006082:	f7fa ffb7 	bl	8000ff4 <HAL_Delay>

	npxPort_SetRed(0); HAL_Delay(100);
 8006086:	2000      	movs	r0, #0
 8006088:	f7ff feb0 	bl	8005dec <npxPort_SetRed>
 800608c:	2064      	movs	r0, #100	; 0x64
 800608e:	f7fa ffb1 	bl	8000ff4 <HAL_Delay>
	npxPort_SetRed(50);	HAL_Delay(100);
 8006092:	2032      	movs	r0, #50	; 0x32
 8006094:	f7ff feaa 	bl	8005dec <npxPort_SetRed>
 8006098:	2064      	movs	r0, #100	; 0x64
 800609a:	f7fa ffab 	bl	8000ff4 <HAL_Delay>
	npxPort_SetRed(100); HAL_Delay(100);
 800609e:	2064      	movs	r0, #100	; 0x64
 80060a0:	f7ff fea4 	bl	8005dec <npxPort_SetRed>
 80060a4:	2064      	movs	r0, #100	; 0x64
 80060a6:	f7fa ffa5 	bl	8000ff4 <HAL_Delay>
	npxPort_SetRed(150); HAL_Delay(100);
 80060aa:	2096      	movs	r0, #150	; 0x96
 80060ac:	f7ff fe9e 	bl	8005dec <npxPort_SetRed>
 80060b0:	2064      	movs	r0, #100	; 0x64
 80060b2:	f7fa ff9f 	bl	8000ff4 <HAL_Delay>
	npxPort_SetRed(200); HAL_Delay(100);
 80060b6:	20c8      	movs	r0, #200	; 0xc8
 80060b8:	f7ff fe98 	bl	8005dec <npxPort_SetRed>
 80060bc:	2064      	movs	r0, #100	; 0x64
 80060be:	f7fa ff99 	bl	8000ff4 <HAL_Delay>
	npxPort_SetRed(250); HAL_Delay(100);
 80060c2:	20fa      	movs	r0, #250	; 0xfa
 80060c4:	f7ff fe92 	bl	8005dec <npxPort_SetRed>
 80060c8:	2064      	movs	r0, #100	; 0x64
 80060ca:	f7fa ff93 	bl	8000ff4 <HAL_Delay>

	npxPort_SetGreen(0);HAL_Delay(100);
 80060ce:	2000      	movs	r0, #0
 80060d0:	f7ff feae 	bl	8005e30 <npxPort_SetGreen>
 80060d4:	2064      	movs	r0, #100	; 0x64
 80060d6:	f7fa ff8d 	bl	8000ff4 <HAL_Delay>
	npxPort_SetGreen(50); HAL_Delay(100);
 80060da:	2032      	movs	r0, #50	; 0x32
 80060dc:	f7ff fea8 	bl	8005e30 <npxPort_SetGreen>
 80060e0:	2064      	movs	r0, #100	; 0x64
 80060e2:	f7fa ff87 	bl	8000ff4 <HAL_Delay>
	npxPort_SetGreen(100); HAL_Delay(100);
 80060e6:	2064      	movs	r0, #100	; 0x64
 80060e8:	f7ff fea2 	bl	8005e30 <npxPort_SetGreen>
 80060ec:	2064      	movs	r0, #100	; 0x64
 80060ee:	f7fa ff81 	bl	8000ff4 <HAL_Delay>
	npxPort_SetGreen(150); HAL_Delay(100);
 80060f2:	2096      	movs	r0, #150	; 0x96
 80060f4:	f7ff fe9c 	bl	8005e30 <npxPort_SetGreen>
 80060f8:	2064      	movs	r0, #100	; 0x64
 80060fa:	f7fa ff7b 	bl	8000ff4 <HAL_Delay>
	npxPort_SetGreen(200);HAL_Delay(100);
 80060fe:	20c8      	movs	r0, #200	; 0xc8
 8006100:	f7ff fe96 	bl	8005e30 <npxPort_SetGreen>
 8006104:	2064      	movs	r0, #100	; 0x64
 8006106:	f7fa ff75 	bl	8000ff4 <HAL_Delay>
	npxPort_SetGreen(250);HAL_Delay(100);
 800610a:	20fa      	movs	r0, #250	; 0xfa
 800610c:	f7ff fe90 	bl	8005e30 <npxPort_SetGreen>
 8006110:	2064      	movs	r0, #100	; 0x64
 8006112:	f7fa ff6f 	bl	8000ff4 <HAL_Delay>


	npxPort_SetBlue(0);	HAL_Delay(100);
 8006116:	2000      	movs	r0, #0
 8006118:	f7ff feac 	bl	8005e74 <npxPort_SetBlue>
 800611c:	2064      	movs	r0, #100	; 0x64
 800611e:	f7fa ff69 	bl	8000ff4 <HAL_Delay>
	npxPort_SetBlue(50); HAL_Delay(100);
 8006122:	2032      	movs	r0, #50	; 0x32
 8006124:	f7ff fea6 	bl	8005e74 <npxPort_SetBlue>
 8006128:	2064      	movs	r0, #100	; 0x64
 800612a:	f7fa ff63 	bl	8000ff4 <HAL_Delay>
	npxPort_SetBlue(100); HAL_Delay(100);
 800612e:	2064      	movs	r0, #100	; 0x64
 8006130:	f7ff fea0 	bl	8005e74 <npxPort_SetBlue>
 8006134:	2064      	movs	r0, #100	; 0x64
 8006136:	f7fa ff5d 	bl	8000ff4 <HAL_Delay>
	npxPort_SetBlue(150);HAL_Delay(100);
 800613a:	2096      	movs	r0, #150	; 0x96
 800613c:	f7ff fe9a 	bl	8005e74 <npxPort_SetBlue>
 8006140:	2064      	movs	r0, #100	; 0x64
 8006142:	f7fa ff57 	bl	8000ff4 <HAL_Delay>
	npxPort_SetBlue(200);HAL_Delay(100);
 8006146:	20c8      	movs	r0, #200	; 0xc8
 8006148:	f7ff fe94 	bl	8005e74 <npxPort_SetBlue>
 800614c:	2064      	movs	r0, #100	; 0x64
 800614e:	f7fa ff51 	bl	8000ff4 <HAL_Delay>
	npxPort_SetBlue(250); HAL_Delay(100);
 8006152:	20fa      	movs	r0, #250	; 0xfa
 8006154:	f7ff fe8e 	bl	8005e74 <npxPort_SetBlue>
 8006158:	2064      	movs	r0, #100	; 0x64
 800615a:	f7fa ff4b 	bl	8000ff4 <HAL_Delay>

	npxPort_ClearLEDs(); HAL_Delay(100);
 800615e:	f7ff fe2b 	bl	8005db8 <npxPort_ClearLEDs>
 8006162:	2064      	movs	r0, #100	; 0x64
 8006164:	f7fa ff46 	bl	8000ff4 <HAL_Delay>
}
 8006168:	bf00      	nop
 800616a:	bd80      	pop	{r7, pc}

0800616c <DMA_Init>:

static void DMA_Init(void)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006172:	2300      	movs	r3, #0
 8006174:	607b      	str	r3, [r7, #4]
 8006176:	4b0c      	ldr	r3, [pc, #48]	; (80061a8 <DMA_Init+0x3c>)
 8006178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617a:	4a0b      	ldr	r2, [pc, #44]	; (80061a8 <DMA_Init+0x3c>)
 800617c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006180:	6313      	str	r3, [r2, #48]	; 0x30
 8006182:	4b09      	ldr	r3, [pc, #36]	; (80061a8 <DMA_Init+0x3c>)
 8006184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800618a:	607b      	str	r3, [r7, #4]
 800618c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800618e:	2200      	movs	r2, #0
 8006190:	2100      	movs	r1, #0
 8006192:	2039      	movs	r0, #57	; 0x39
 8006194:	f7fb f82d 	bl	80011f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8006198:	2039      	movs	r0, #57	; 0x39
 800619a:	f7fb f846 	bl	800122a <HAL_NVIC_EnableIRQ>

}
 800619e:	bf00      	nop
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	40023800 	.word	0x40023800

080061ac <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80061b4:	2100      	movs	r1, #0
 80061b6:	4803      	ldr	r0, [pc, #12]	; (80061c4 <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 80061b8:	f7fd fd6c 	bl	8003c94 <HAL_TIM_PWM_Stop_DMA>
}
 80061bc:	bf00      	nop
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	20000130 	.word	0x20000130

080061c8 <Error_Handler>:

static void Error_Handler(void)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	af00      	add	r7, sp, #0
	/* Turn LED_NPX on */
	BSP_LED_On(LED_NPX);
 80061cc:	2002      	movs	r0, #2
 80061ce:	f7fa fe51 	bl	8000e74 <BSP_LED_On>
	while (1)
 80061d2:	e7fe      	b.n	80061d2 <Error_Handler+0xa>

080061d4 <memset>:
 80061d4:	4402      	add	r2, r0
 80061d6:	4603      	mov	r3, r0
 80061d8:	4293      	cmp	r3, r2
 80061da:	d100      	bne.n	80061de <memset+0xa>
 80061dc:	4770      	bx	lr
 80061de:	f803 1b01 	strb.w	r1, [r3], #1
 80061e2:	e7f9      	b.n	80061d8 <memset+0x4>

080061e4 <__libc_init_array>:
 80061e4:	b570      	push	{r4, r5, r6, lr}
 80061e6:	4d0d      	ldr	r5, [pc, #52]	; (800621c <__libc_init_array+0x38>)
 80061e8:	4c0d      	ldr	r4, [pc, #52]	; (8006220 <__libc_init_array+0x3c>)
 80061ea:	1b64      	subs	r4, r4, r5
 80061ec:	10a4      	asrs	r4, r4, #2
 80061ee:	2600      	movs	r6, #0
 80061f0:	42a6      	cmp	r6, r4
 80061f2:	d109      	bne.n	8006208 <__libc_init_array+0x24>
 80061f4:	4d0b      	ldr	r5, [pc, #44]	; (8006224 <__libc_init_array+0x40>)
 80061f6:	4c0c      	ldr	r4, [pc, #48]	; (8006228 <__libc_init_array+0x44>)
 80061f8:	f000 f818 	bl	800622c <_init>
 80061fc:	1b64      	subs	r4, r4, r5
 80061fe:	10a4      	asrs	r4, r4, #2
 8006200:	2600      	movs	r6, #0
 8006202:	42a6      	cmp	r6, r4
 8006204:	d105      	bne.n	8006212 <__libc_init_array+0x2e>
 8006206:	bd70      	pop	{r4, r5, r6, pc}
 8006208:	f855 3b04 	ldr.w	r3, [r5], #4
 800620c:	4798      	blx	r3
 800620e:	3601      	adds	r6, #1
 8006210:	e7ee      	b.n	80061f0 <__libc_init_array+0xc>
 8006212:	f855 3b04 	ldr.w	r3, [r5], #4
 8006216:	4798      	blx	r3
 8006218:	3601      	adds	r6, #1
 800621a:	e7f2      	b.n	8006202 <__libc_init_array+0x1e>
 800621c:	0800645c 	.word	0x0800645c
 8006220:	0800645c 	.word	0x0800645c
 8006224:	0800645c 	.word	0x0800645c
 8006228:	08006460 	.word	0x08006460

0800622c <_init>:
 800622c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800622e:	bf00      	nop
 8006230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006232:	bc08      	pop	{r3}
 8006234:	469e      	mov	lr, r3
 8006236:	4770      	bx	lr

08006238 <_fini>:
 8006238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800623a:	bf00      	nop
 800623c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800623e:	bc08      	pop	{r3}
 8006240:	469e      	mov	lr, r3
 8006242:	4770      	bx	lr
