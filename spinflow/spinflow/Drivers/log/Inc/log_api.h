/**
 ******************************************************************************
 * @file    log_api.h
 *
 * @author 	Marco Rolon
 *
 * @brief   Serial Log API header
 ******************************************************************************
 */

#ifndef LOG_INC_LOG_API_H_
#define LOG_INC_LOG_API_H_

#include "device_types.h"

/**
 * @typedef logType_t
 * @brief Defines the types of log messages.
 *
 * This enumeration is used to categorize the different types of log messages
 * that can be generated by the system. Each enumerator represents a distinct
 * category of log message, aiding in filtering and handling log output appropriately.
 */
typedef enum
{
    LOG_APP_INFO,       /**< Indicates an informational message from the application. */
    LOG_APP_ERROR,      /**< Indicates an error message specific to the application. */
    LOG_SYSTEM_ERROR    /**< Indicates an error message related to the system operations. */
}
logType_t;

/**
 * @brief Initializes the logging system.
 *
 * This function must be called before start logging.
 * It sets up the UART port and ensures the system is ready to log messages.
 *
 * @return bool_t Returns true if initialization was successful, false otherwise.
 */
bool_t log_Init();


/**
 * @brief Sends a string to the logging system.
 *
 * Logs a string message with a specified log type. The message is categorized and
 * formatted based on the type provided. This function assumes that the
 * logging system has been initialized and is ready to receive messages.
 *
 * @param logType The type of the log (e.g., LOG_APP_INFO, LOG_APP_ERROR, LOG_SYSTEM_ERROR).
 *        This directs the logging behavior and output format.
 * @param pstring Pointer to the null-terminated string to be logged.
 *
 * @return bool_t Returns true if initialization was successful, false otherwise.
 */
bool_t log_SendString(logType_t logType, char * pstring);

#endif /* LOG_INC_LOG_API_H_ */
